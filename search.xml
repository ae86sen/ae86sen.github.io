<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Dockerfile语法</title>
    <url>/posts/280bbbdf.html</url>
    <content><![CDATA[<h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><h4 id="什么是Dockerfile？"><a href="#什么是Dockerfile？" class="headerlink" title="什么是Dockerfile？"></a>什么是Dockerfile？</h4><p><strong>Dockerfile</strong>是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p>
<h4 id="自定义一个镜像"><a href="#自定义一个镜像" class="headerlink" title="自定义一个镜像"></a>自定义一个镜像</h4><p>举个栗子，我们需要自定义这么一个镜像：基于Python基础镜像，当容器运行时，会自动打印一些图案。</p>
<p>如何实现呢？</p>
<p>1、首先，编写<code>Dockerfile</code>文件。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:alpine</span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">&quot;ancientone&quot;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> description=<span class="string">&quot;This is simple example.&quot;</span></span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> requirements.txt ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install -i https://pypi.douban.com/simple --no-cache-dir -r requirements.txt</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;fun.py&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>具体指令含义下文详解，先梳理流程。</p>
<p>2、将<code>Dockerfile</code>中需要的文件（<code>Dockerfile</code>、<code>requireents.txt</code>、<code>fun.py</code>）放到一个目录下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-0-2-centos docker-demo] ls</span><br><span class="line">Dockerfile  fun.py  requirements.txt</span><br></pre></td></tr></table></figure>

<p><em>requirements.txt文件内容</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cowpy&#x3D;&#x3D;1.1.0</span><br></pre></td></tr></table></figure>

<p><em>fun.py文件内容</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> cowpy <span class="keyword">import</span> cow</span><br><span class="line"></span><br><span class="line">print(cow.milk_random_cow(<span class="string">&quot;Hello, Everyone!&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>3、然后，执行命令开始构建镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t <span class="built_in">test</span>:v1 .</span><br></pre></td></tr></table></figure>

<p>构建过程如下：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/img/1.png"></p>
<p>可以看到，其实构建过程中的每一个<code>step</code>对应的就是<code>Dockerfile</code>文件中的一条指令。</p>
<p>4、构建完成后，通过<code>docker images</code>查看新构建的镜像。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/img/2.png"></p>
<p>5、启动容器。</p>
<p>执行命令<code>docker run --rm test:v1</code>启动容器。(加上**–rm**退出容器以后，这个容器就被删除了，方便在临时测试使用)</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/img/3.png"></p>
<p>可以看到，每次启动容器后，都会打印一个图案，这是因为该镜像文件中有一行指令<code>CMD [&quot;python&quot;, &quot;fun.py&quot;]</code>，即当容器启动时，会在命令行中执行<code>python fun.py</code>，而这个<code>py</code>文件其实就是应用<code>cowpy</code>模块执行了一句<code>print(cow.milk_random_cow(&quot;Hello, Everyone!&quot;))</code>来完成图案打印。</p>
<p>ok，构建自定义镜像的整体流程如上，下面来详解<code>Dockerfile</code>中的常用指令。</p>
<h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h4><p>定制的镜像都是基于<code>FROM</code>的镜像，上文的<code>python:alpine</code>就是基础镜像。</p>
<p>格式：<code>FROM 镜像名:版本</code>。</p>
<p>注意两点：</p>
<ul>
<li>如果基础镜像本地没有，会自动去<code>docker hub</code>中下载</li>
<li>一个<code>Dockerfile</code>文件中通常只有一个<code>FROM</code>指令（多阶段构建除外）</li>
</ul>
<h4 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h4><p><code>LABEL</code>指定docker中的元数据信息，<code>maintainer</code>指定当前<code>Dockerfile</code>文件的作者（维护者），<code>description</code>指定功能描述信息。</p>
<h4 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h4><p>相当于cd命令，切换到容器中的某个目录，如果指定的目录不存在，那么会自动创建。</p>
<h4 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h4><p>相当于cp命令，将宿主机中的目录或文件复制粘贴到容器中。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> requirements.txt ./dir/</span></span><br></pre></td></tr></table></figure>

<p>注意：如果是<code>./dir</code>会把<code>dir</code>当做一个文件。</p>
<p>将宿主机当前目录下的<code>requirements.txt</code>文件复制到容器内的当前目录下的<code>dir</code>目录下。</p>
<ul>
<li>第一个参数为宿主机中的目录或文件（相对路径或绝对路径）</li>
<li>第二个参数为容器中的目录或文件（相对路径或绝对路径）</li>
</ul>
<p>注：容器内的路径如果不存在，会自动创建。</p>
<h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h4><p>跟<code>COPY</code>功能类似，如果第一个参数为本地的压缩文件，那么会自动解压，将解压之后的文件复制粘贴到容器中；如果是路径，那么会自动下载，将下载后的文件复制粘贴到容器中。</p>
<h4 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h4><p>用于执行<code>RUN</code>后面跟着的命令，等同于在命令行执行<code>shell</code>命令。</p>
<p>值得注意的是，<code>RUN</code>指令越多，构建出来的镜像层级就会很多，镜像尺寸就会很大。</p>
<p>若有多个<code>RUN</code>指令，可以用<code>&amp;&amp;</code>连接成一条指令，如：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install -i https://pypi.douban.com/simple --no-cache-dir -r requirements.txt &amp;&amp; ls / &amp;&amp; ls /root &amp;&amp; ps aux</span></span><br></pre></td></tr></table></figure>

<h4 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h4><p>设置环境变量，定义了环境变量后，后续的指令就可以使用这个环境变量。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> username=ancientone</span><br></pre></td></tr></table></figure>

<h4 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h4><p>指定容器运行时，需要映射出去的目录（容器中）。</p>
<p>如</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /app</span></span><br></pre></td></tr></table></figure>

<p><strong>只有在<code>Dockerfile</code>中指定了<code>VOLUME</code>映射目录，才能在<code>docker run</code>时加参数-v映射到宿主机。</strong></p>
<h4 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h4><p>指定容器运行时，需要映射出去的端口号（容器中）。</p>
<p>如</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8088</span></span><br></pre></td></tr></table></figure>

<h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><p>类似于<code>RUN</code> 指令，用于运行程序，但二者运行的时间点不同:</p>
<ul>
<li>CMD在<code>docker run</code>时运行，即容器启动时。</li>
<li>RUN在<code>docker build</code>时运行，即镜像构建时。</li>
</ul>
<p><code>CMD</code>指令后面可以跟两种类型的命令：</p>
<ul>
<li><code>shell</code>类型的命令，如<code>CMD python fun.py</code>、<code>CMD ls /root</code></li>
<li><code>exec</code>类型的命令：[“指令”,”参数1”,”参数2”]，为json数组，必须得用双引号，如<code>CMD [&quot;python&quot;,&quot;fun.py&quot;]</code>、<code>CMD [&quot;ls&quot;,&quot;/root&quot;]</code></li>
</ul>
<p>注意：</p>
<ul>
<li>如果在容器运行时（docker run）有指定的命令，那么<code>CMD</code>会被忽略。</li>
<li>如果 <code>Dockerfile</code>中如果存在多个 <code>CMD </code>指令，仅最后一个生效。</li>
</ul>
<p><strong>优先使用exec类型的命令，执行过程比较明确。第一种格式实际上在运行的过程中也会自动转换成第二种格式运行，并且默认可执行文件是 sh。</strong></p>
<h4 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h4><p>类似于<code>CMD</code>命令，区别在于：</p>
<ul>
<li><code>CMD</code>会被<code>docker run</code>的命令行参数指定的指令所覆盖，而<code>ENTRYPOINT</code>不会。</li>
</ul>
<p>如果<code>ENTRYPOINT</code>和<code>CMD</code>连用，那么<code>CMD</code>会作为<code>ENTRYPOINT</code>的默认参数，如：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;ping&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;114.114.114.114&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>即当容器运行时，会在shell执行<code>ping 114.114.114.114</code>。</p>
<p><em>注意：如果 <code>Dockerfile</code>中如果存在多个 <code>ENTRYPOINT </code>指令，仅最后一个生效。</em></p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>UI自动化-测试步骤驱动</title>
    <url>/posts/dea2bc19.html</url>
    <content><![CDATA[<h3 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h3><p>UI自动化一般都是基于<code>POM</code>的设计模式，将页面抽象为一个对象，而页面提供的操作方法封装为页面类的实例方法。</p>
<p>最开始封装页面时，大概是这样封装的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> common.base_page <span class="keyword">import</span> BasePage</span><br><span class="line"><span class="keyword">from</span> common.getconfig <span class="keyword">import</span> conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskPage</span>(<span class="params">BasePage</span>):</span></span><br><span class="line">    url = conf.get_str(<span class="string">&quot;env&quot;</span>, <span class="string">&quot;url&quot;</span>) + conf.get_str(<span class="string">&quot;task_url&quot;</span>, <span class="string">&quot;inspection&quot;</span>)</span><br><span class="line">    add_locator = (By.XPATH, <span class="string">&quot;//span[text()=&#x27;添加&#x27;]/parent::button&quot;</span>)</span><br><span class="line">    add_btn_locator = (By.XPATH, <span class="string">&quot;//ul[contains(@class,&#x27;menu-vertical&#x27;)]/li[1]&quot;</span>)</span><br><span class="line">    start_time_locator = (By.XPATH, <span class="string">&quot;//span[@id=&#x27;startTime&#x27;]//input&quot;</span>)</span><br><span class="line">    input_time_locator = (By.XPATH, <span class="string">&quot;//input[@class=&#x27;ant-calendar-input &#x27;]&quot;</span>)</span><br><span class="line">    confirm_btn_locator = (By.XPATH, <span class="string">&quot;//a[@class=&#x27;ant-calendar-ok-btn&#x27;]&quot;</span>)</span><br><span class="line">    end_time_locator = (By.XPATH, <span class="string">&quot;//span[@id=&#x27;endTime&#x27;]//input&quot;</span>)</span><br><span class="line">    add_person_btn_locator = (By.XPATH, <span class="string">&quot;//div[@id=&#x27;UserSelect&#x27;]/button&quot;</span>)</span><br><span class="line">    first_person_locator = (By.XPATH, <span class="string">&quot;//div[@id=&#x27;UserSelectTable&#x27;]//tbody/tr[1]//input&quot;</span>)</span><br><span class="line">    second_person_locator = (By.XPATH, <span class="string">&quot;//div[@id=&#x27;UserSelectTable&#x27;]//tbody/tr[2]//input&quot;</span>)</span><br><span class="line">    first_task_name_locator = (By.XPATH, <span class="string">&quot;//tbody/tr[1]//a&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_task_page</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;打开任务管理页面&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.driver.get(self.url)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_task</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 1、鼠标悬停到添加按钮上</span></span><br><span class="line">        self.ac_hover(self.get_element(add_locator))</span><br><span class="line">        <span class="comment"># 2、点击添加</span></span><br><span class="line">        self.wait_element_clickable(add_btn_locator).click()</span><br><span class="line">        <span class="comment"># 3、点击开始时间输入框</span></span><br><span class="line">        self.get_element(start_time_locator)</span><br><span class="line">        <span class="comment"># 4、输入开始时间</span></span><br><span class="line">        self.get_element(input_time_locator).send_keys(<span class="string">&#x27;2022-02-02&#x27;</span>)</span><br><span class="line">        <span class="comment"># 5、点击结束时间输入框</span></span><br><span class="line">        self.get_element(end_time_locator)</span><br><span class="line">        <span class="comment"># 6、输入结束时间</span></span><br><span class="line">        self.get_element(input_time_locator).send_keys(<span class="string">&#x27;2022-02-03&#x27;</span>)</span><br><span class="line">        <span class="comment"># 7、点击人员选择框</span></span><br><span class="line">        self.get_element(add_person_btn_locator).click()</span><br><span class="line">        <span class="comment"># 8、勾选第一个人</span></span><br><span class="line">        self.get_element(first_person_locator).click()</span><br><span class="line">        <span class="comment"># 9、勾选第二个人</span></span><br><span class="line">        self.get_element(second_person_locator).click()</span><br><span class="line">        <span class="comment"># 10、点击确定</span></span><br><span class="line">        self.get_element(confirm_btn_locator).click()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> self.get_element(first_task_name_locator)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>该页面所有的<code>locator</code>作为页面类的类属性，但是如果该页面方法有很多，有很多<code>locator</code>，全部写成类属性会非常臃肿，当<code>locator</code>发生改变，维护起来也是费劲的。</p>
<p>那么，我们可以将<code>locator</code>完全抽离出去，放在<code>yaml</code>中或者封装成一个类，需要的时候直接调用即可，这样可以让页面类减负不少。</p>
<p>但是，还是有个问题，就是一个复杂的页面操作逻辑，可能操作步骤会很多，上面的例子有10个操作步骤，有的甚至有几十个，而且观察可以发现，其实每个步骤无非就是获取元素、点击、输入、悬停等操作，所以重复代码是非常多的。</p>
<p>那么，针对这个痛点，如何解决呢？</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>从<code>Robot Framwork</code>框架的关键字驱动中可以找到一些灵感。既然<code>locator</code>可以抽离出去，而测试步骤（即操作步骤）重复性非常高，我们是不是也可以考虑将其抽离出去？</p>
<p>我们将操作步骤从代码描述的方式转化为用yaml描述，将所有操作步骤的动作给一个关键字，比如点击-click，输入-send，悬停-hover等，每一步的描述信息包括：<code>locator</code>、动作、输入值（针对输入动作）、等待时间等，比如讲上面的代码转化为yaml描述：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">add_task:</span></span><br><span class="line"><span class="comment"># 1、鼠标悬停添加按键</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;xpath&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;//span[text()=&#x27;添加&#x27;]/parent::button&quot;</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">ac_hover</span></span><br><span class="line"><span class="comment"># 2、点击重点任务</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;xpath&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;//ul[contains(@class,&#x27;menu-vertical&#x27;)]/li[1]&quot;</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">click</span></span><br><span class="line"><span class="comment"># 3、输入任务名称</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;id&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;name&quot;</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">send</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;自动化测试&quot;</span></span><br><span class="line">          <span class="attr">return_value:</span></span><br><span class="line"><span class="comment"># 4、点击开始时间</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;xpath&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;//span[@id=&#x27;startTime&#x27;]//input&quot;</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">click</span></span><br><span class="line"><span class="comment"># 5、输入开始时间</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;xpath&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;//input[@class=&#x27;ant-calendar-input &#x27;]&quot;</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">send</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;2022-02-22&quot;</span></span><br><span class="line"><span class="comment"># 6、点击确定</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;xpath&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;//a[@class=&#x27;ant-calendar-ok-btn&#x27;]&quot;</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">click</span></span><br><span class="line"><span class="comment"># 7、点击结束时间</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;xpath&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;//span[@id=&#x27;endTime&#x27;]//input&quot;</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">click</span></span><br><span class="line"><span class="comment"># 8、输入结束时间</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;xpath&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;//input[@class=&#x27;ant-calendar-input &#x27;]&quot;</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">send</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;2022-02-23&quot;</span></span><br><span class="line"><span class="comment"># 9、点击确定</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;xpath&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;//a[@class=&#x27;ant-calendar-ok-btn&#x27;]&quot;</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">click</span></span><br><span class="line"><span class="comment"># 10、点击添加人员</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;xpath&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;//div[@id=&#x27;UserSelect&#x27;]/button&quot;</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">click</span></span><br><span class="line"><span class="comment"># 11、勾选前两名执行人</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;xpath&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;//div[@id=&#x27;UserSelectTable&#x27;]//tbody/tr[1]//input&quot;</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">click</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;xpath&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;//div[@id=&#x27;UserSelectTable&#x27;]//tbody/tr[2]//input&quot;</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">click</span></span><br><span class="line"><span class="comment"># 12、点击确定</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;xpath&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;//div[contains(@style,&#x27;width: 1200px&#x27;)]//span[text()=&#x27;确 定&#x27;]/parent::button&quot;</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">click</span></span><br><span class="line">          <span class="attr">wait:</span> <span class="string">clickable</span></span><br><span class="line"> <span class="comment"># 13、获取第一条任务名称</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;xpath&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;//tbody/tr[1]//a&quot;</span></span><br><span class="line">          <span class="comment"># 表示需要接收返回值</span></span><br><span class="line">          <span class="attr">return_value:</span></span><br></pre></td></tr></table></figure>

<p>这样描述看起来测试步骤非常清晰明了，维护也很方便，那么现在最关键的问题来了，如何解析这些步骤？</p>
<p>我们可以在<code>basepage</code>中添加一个驱动测试步骤的引擎，即用来解析yaml中描述的测试步骤，将这些步骤转化为对应的代码去执行。其实思路也很清晰，首先将yaml中对应方法的所有测试步骤拿到，这个测试步骤是一个字典嵌套列表再嵌套字典的结构，即<code>&#123;&quot;add_task&quot;:[&#123;&quot;by&quot;:&quot;xpath&quot;,&quot;locator&quot;:&quot;xxx&quot;,&quot;action&quot;:&quot;xxx&quot;,..&#125;,&#123;&#125;,&#123;&#125;,....]&#125;</code>，<code>add_task</code>就是对应的方法名，而其值就是一个列表，它的每一个元素就代表一个测试步骤，那么我们遍历这个列表，就相当于去执行每一步操作步骤，每一步又如何执行呢？通过<code>key-value</code>取值，根据<code>action</code>去执行对应的动作，比如<code>action</code>是<code>click</code>，那么就去执行<code>self.get_element(locator).click()</code>这句代码。</p>
<p>具体代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasePage</span>:</span></span><br><span class="line">    _params = &#123;&#125;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 省略其它方法...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">steps</span>(<span class="params">self, path</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;解析yaml文件中的测试步骤&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 读取描述测试步骤的yaml文件</span></span><br><span class="line">        <span class="keyword">with</span> open(path, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="comment"># 获取调用该方法的方法名</span></span><br><span class="line">            name = inspect.stack()[<span class="number">1</span>].function</span><br><span class="line">            <span class="comment"># 根据方法名提取对应的测试步骤集合</span></span><br><span class="line">            steps = yaml.safe_load(f)[name]</span><br><span class="line">        <span class="keyword">return</span> self.analysis_steps(steps)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analysis_steps</span>(<span class="params">self, steps: list</span>):</span></span><br><span class="line">        <span class="comment"># 定义一个空列表，来接收整个测试步骤中需要用来断言的返回值</span></span><br><span class="line">        rvs = []</span><br><span class="line">        <span class="keyword">for</span> step <span class="keyword">in</span> steps:</span><br><span class="line">            <span class="comment"># yaml中有return_value的处理方式</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;return_value&quot;</span> <span class="keyword">in</span> step.keys():</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;number&quot;</span> <span class="keyword">in</span> step.keys():</span><br><span class="line">                    <span class="comment"># 返回值是数量</span></span><br><span class="line">                    time.sleep(<span class="number">1</span>)</span><br><span class="line">                    rv = len(self.get_elements(step[<span class="string">&quot;by&quot;</span>], step[<span class="string">&quot;locator&quot;</span>]))</span><br><span class="line">                    rvs.append(rv)</span><br><span class="line">                <span class="keyword">elif</span> <span class="string">&quot;value&quot;</span> <span class="keyword">in</span> step.keys():</span><br><span class="line">                    <span class="comment"># 返回值是输入的值</span></span><br><span class="line">                    rvs.append(step[<span class="string">&quot;value&quot;</span>])</span><br><span class="line">                <span class="keyword">elif</span> <span class="string">&quot;attribute&quot;</span> <span class="keyword">in</span> step.keys():</span><br><span class="line">                    rv = self.get_element(step[<span class="string">&quot;by&quot;</span>], step[<span class="string">&quot;locator&quot;</span>]).get_attribute(step[<span class="string">&quot;attribute&quot;</span>])</span><br><span class="line">                    rvs.append(rv)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 返回值是元素文本</span></span><br><span class="line">                    rv = self.wait_element_visible(step[<span class="string">&quot;by&quot;</span>], step[<span class="string">&quot;locator&quot;</span>]).text</span><br><span class="line">                    rvs.append(rv)</span><br><span class="line">                    </span><br><span class="line">            <span class="comment"># yaml中有action的处理方式</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;action&quot;</span> <span class="keyword">in</span> step.keys():</span><br><span class="line">                action = step[<span class="string">&quot;action&quot;</span>]</span><br><span class="line">                <span class="comment"># 动作为点击</span></span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;click&quot;</span> == action:</span><br><span class="line">                    <span class="comment"># 步骤中是否有wait关键字，有：表明点击动作用显示等待</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&quot;wait&quot;</span> <span class="keyword">in</span> step.keys():</span><br><span class="line">                        <span class="keyword">if</span> <span class="string">&quot;clickable&quot;</span> == step[<span class="string">&quot;wait&quot;</span>]:</span><br><span class="line">                            self.wait_element_clickable(step[<span class="string">&quot;by&quot;</span>], step[<span class="string">&quot;locator&quot;</span>]).click()</span><br><span class="line">                    <span class="comment"># 无：表示点击动作用隐式等待   </span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        self.get_element(step[<span class="string">&quot;by&quot;</span>], step[<span class="string">&quot;locator&quot;</span>]).click()</span><br><span class="line">                <span class="comment"># 动作为输入</span></span><br><span class="line">                <span class="keyword">elif</span> <span class="string">&quot;send&quot;</span> == action:</span><br><span class="line">                    self.get_element(step[<span class="string">&quot;by&quot;</span>], step[<span class="string">&quot;locator&quot;</span>]).send_keys(step[<span class="string">&quot;value&quot;</span>])</span><br><span class="line">                <span class="comment"># 动作为清空输入框</span></span><br><span class="line">                <span class="keyword">elif</span> <span class="string">&quot;clear&quot;</span> == action:</span><br><span class="line">                    self.get_element(step[<span class="string">&quot;by&quot;</span>], step[<span class="string">&quot;locator&quot;</span>]).clear()</span><br><span class="line">                <span class="comment"># 动作为鼠标双击</span></span><br><span class="line">                <span class="keyword">elif</span> <span class="string">&quot;ac_double_click&quot;</span> == action:</span><br><span class="line">                    e = self.get_element(step[<span class="string">&quot;by&quot;</span>], step[<span class="string">&quot;locator&quot;</span>])</span><br><span class="line">                    self.ac_double_click(e)</span><br><span class="line">                <span class="comment"># 动作为鼠标悬停    </span></span><br><span class="line">                <span class="keyword">elif</span> <span class="string">&quot;ac_hover&quot;</span> == action:</span><br><span class="line">                    e = self.get_element(step[<span class="string">&quot;by&quot;</span>], step[<span class="string">&quot;locator&quot;</span>])</span><br><span class="line">                    self.ac_hover(e)</span><br><span class="line">            <span class="comment"># yaml中有sleep的处理方式</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;sleep&quot;</span> <span class="keyword">in</span> step.keys():</span><br><span class="line">                time.sleep(step[<span class="string">&quot;sleep&quot;</span>])</span><br><span class="line">        <span class="keyword">return</span> rvs</span><br></pre></td></tr></table></figure>

<p>通过该驱动引擎，即可完成对测试步骤的驱动，当然，这里并没有写全所有的动作解析，可以根据自己的需求自行扩展。</p>
<p>没完。</p>
<p>还有个问题，如果测试数据是动态变化的怎么传进去呢？比如上面的例子中，要输入开始时间和结束时间，上面是直接写死的，如果我获取当前日期怎么办？</p>
<p>处理方案是，模板引擎替换。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 6、输入开始时间</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;xpath&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;//div[contains(@class,&#x27;left&#x27;)]//input[@class=&#x27;ant-calendar-input &#x27;]&quot;</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">send</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">$start_time</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">sleep:</span> <span class="number">1</span></span><br><span class="line"><span class="comment"># 7、输入结束时间</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;xpath&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;//div[contains(@class,&#x27;right&#x27;)]//input[@class=&#x27;ant-calendar-input &#x27;]&quot;</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">send</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">$end_time</span></span><br></pre></td></tr></table></figure>

<p><code>value</code>表示需要从外部传入值，<code>$</code>表示需要替换的标识符。</p>
<p>另外，在<code>basepage</code>中设置一个类属性<code>_params=&#123;&#125;</code>来接收具体的参数替换值，在页面方法中获取当前时间+2和+4小时，并添加到<code>_params</code>字典中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1 = datetime.datetime.now() + datetime.timedelta(hours=<span class="number">2</span>)</span><br><span class="line">t2 = datetime.datetime.now() + datetime.timedelta(hours=<span class="number">4</span>)</span><br><span class="line">self._params[<span class="string">&quot;start_time&quot;</span>] = t1.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M&#x27;</span>)</span><br><span class="line">self._params[<span class="string">&quot;end_time&quot;</span>] = t2.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>此时，<code>_params=&#123;&quot;start_time&quot;:&quot;xxx&quot;,&quot;end_time&quot;:&quot;xxxx&quot;&#125;</code>。</p>
<p>然后在解析引擎中加上替换步骤即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasePage</span>:</span></span><br><span class="line">    _params = &#123;&#125;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 省略其它方法...</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_template</span>(<span class="params">source_data, replace_data: dict, </span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        替换文本变量</span></span><br><span class="line"><span class="string">        :param source_data:</span></span><br><span class="line"><span class="string">        :param replace_data:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        res = Template(str(source_data)).safe_substitute(**replace_data)</span><br><span class="line">        <span class="keyword">return</span> yaml.safe_load(res)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">steps</span>(<span class="params">self, path</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;解析yaml文件中的测试步骤&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> open(path, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            name = inspect.stack()[<span class="number">1</span>].function</span><br><span class="line">            steps = yaml.safe_load(f)[name]</span><br><span class="line">        raw = json.dumps(steps)  <span class="comment"># 将字典转化成字符串</span></span><br><span class="line">        <span class="comment"># 替换变量</span></span><br><span class="line">        steps = self.handle_template(raw, self._params)</span><br><span class="line">        <span class="keyword">return</span> self.analysis_steps(self, steps)</span><br></pre></td></tr></table></figure>

<h3 id="改造效果"><a href="#改造效果" class="headerlink" title="改造效果"></a>改造效果</h3><p>改造后：</p>
<p><em>task_page.py</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> common.base_page <span class="keyword">import</span> BasePage</span><br><span class="line"><span class="keyword">from</span> common.getconfig <span class="keyword">import</span> conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskPage</span>(<span class="params">BasePage</span>):</span></span><br><span class="line">    url = conf.get_str(<span class="string">&quot;env&quot;</span>, <span class="string">&quot;url&quot;</span>) + conf.get_str(<span class="string">&quot;task_url&quot;</span>, <span class="string">&quot;inspection&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_task_page</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;打开任务管理页面&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.driver.get(self.url)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_task</span>(<span class="params">self</span>):</span></span><br><span class="line">        t1 = datetime.datetime.now() + datetime.timedelta(hours=<span class="number">2</span>)</span><br><span class="line">        t2 = datetime.datetime.now() + datetime.timedelta(hours=<span class="number">4</span>)</span><br><span class="line">        self._params[<span class="string">&quot;start_time&quot;</span>] = t1.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M&#x27;</span>)</span><br><span class="line">        self._params[<span class="string">&quot;end_time&quot;</span>] = t2.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.steps(self.steps_path)</span><br></pre></td></tr></table></figure>

<p><em>task_page_steps.yaml</em></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">add_task:</span></span><br><span class="line"><span class="comment"># 1、鼠标悬停添加按键</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;xpath&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;//span[text()=&#x27;添加&#x27;]/parent::button&quot;</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">ac_hover</span></span><br><span class="line"><span class="comment"># 2、点击重点任务</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;xpath&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;//ul[contains(@class,&#x27;menu-vertical&#x27;)]/li[1]&quot;</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">click</span></span><br><span class="line"><span class="comment"># 3、输入任务名称</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;id&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;name&quot;</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">send</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;自动化测试&quot;</span></span><br><span class="line">          <span class="attr">return_value:</span></span><br><span class="line"><span class="comment"># 4、点击开始时间</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;xpath&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;//span[@id=&#x27;startTime&#x27;]//input&quot;</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">click</span></span><br><span class="line"><span class="comment"># 5、输入开始时间</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;xpath&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;//input[@class=&#x27;ant-calendar-input &#x27;]&quot;</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">send</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">$start_time</span></span><br><span class="line"><span class="comment"># 6、点击确定</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;xpath&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;//a[@class=&#x27;ant-calendar-ok-btn&#x27;]&quot;</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">click</span></span><br><span class="line"><span class="comment"># 7、点击结束时间</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;xpath&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;//span[@id=&#x27;endTime&#x27;]//input&quot;</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">click</span></span><br><span class="line"><span class="comment"># 8、输入结束时间</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;xpath&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;//input[@class=&#x27;ant-calendar-input &#x27;]&quot;</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">send</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">$end_time</span></span><br><span class="line"><span class="comment"># 9、点击确定</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;xpath&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;//a[@class=&#x27;ant-calendar-ok-btn&#x27;]&quot;</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">click</span></span><br><span class="line"><span class="comment"># 10、点击添加人员</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;xpath&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;//div[@id=&#x27;UserSelect&#x27;]/button&quot;</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">click</span></span><br><span class="line"><span class="comment"># 11、勾选前两名执行人</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;xpath&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;//div[@id=&#x27;UserSelectTable&#x27;]//tbody/tr[1]//input&quot;</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">click</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;xpath&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;//div[@id=&#x27;UserSelectTable&#x27;]//tbody/tr[2]//input&quot;</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">click</span></span><br><span class="line"><span class="comment"># 12、点击确定</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;xpath&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;//div[contains(@style,&#x27;width: 1200px&#x27;)]//span[text()=&#x27;确 定&#x27;]/parent::button&quot;</span></span><br><span class="line">          <span class="attr">action:</span> <span class="string">click</span></span><br><span class="line">          <span class="attr">wait:</span> <span class="string">clickable</span></span><br><span class="line"> <span class="comment"># 13、获取第一条任务名称</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">by:</span> <span class="string">&quot;xpath&quot;</span></span><br><span class="line">          <span class="attr">locator:</span> <span class="string">&quot;//tbody/tr[1]//a&quot;</span></span><br><span class="line">          <span class="attr">return_value:</span></span><br></pre></td></tr></table></figure>

<p>改造后，<code>page</code>的具体操作方法封装，不再需要写重复冗余的代码，变得干净清爽，所有测试步骤都用yaml管理，后期维护也更加方便简单，无需关心具体代码如何实现，只需要按照手工步测试骤，转化为yaml描述即可。</p>
]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>selenium</tag>
        <tag>yaml</tag>
      </tags>
  </entry>
  <entry>
    <title>linux三剑客</title>
    <url>/posts/72cc1e91.html</url>
    <content><![CDATA[<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p><code>grep</code>命令将根据用户指定的模式(pattern)对目标进行过滤，显示被模式匹配到的行。</p>
<p>两种使用形式：</p>
<p><code>grep [option] pattern [file1,fli2,...]</code></p>
<p><code>some command | grep [option] pattern</code></p>
<table>
<thead>
<tr>
<th align="center">option</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-i</td>
<td>忽略大小写</td>
</tr>
<tr>
<td align="center">-c</td>
<td>只输出匹配行的数量</td>
</tr>
<tr>
<td align="center">-n</td>
<td>显示行号</td>
</tr>
<tr>
<td align="center">-r</td>
<td>递归搜索</td>
</tr>
<tr>
<td align="center">-E</td>
<td>支持扩展正则表达式</td>
</tr>
<tr>
<td align="center">-w</td>
<td>匹配整个单词</td>
</tr>
<tr>
<td align="center">-l</td>
<td>只列出匹配的文件名</td>
</tr>
<tr>
<td align="center">-F</td>
<td>不支持正则，按字符串字面意思进行匹配</td>
</tr>
<tr>
<td align="center">-C</td>
<td>匹配行及其上下文，如-C2，匹配行的上下两行</td>
</tr>
<tr>
<td align="center">-A</td>
<td>匹配行的下文</td>
</tr>
<tr>
<td align="center">-B</td>
<td>匹配行的上文</td>
</tr>
</tbody></table>
<p><em>显示/etc/passwd中带<code>root</code>的行</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-2-centos ~] grep root /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br></pre></td></tr></table></figure>

<p><em>显示/etc/passwd中带<code>root</code>的行及行号</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-2-centos ~] grep -n root /etc/passwd</span><br><span class="line">1:root:x:0:0:root:/root:/bin/bash</span><br><span class="line">10:operator:x:11:0:operator:/root:/sbin/nologin</span><br></pre></td></tr></table></figure>

<p><em>显示匹配行的数量</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-2-centos ~] grep -c root /etc/passwd</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<p><em>对一个目录进行递归搜索查找匹配行</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-2-centos /] grep -r root /notebooks/</span><br><span class="line">/notebooks/shell基础.md:  [root@VM-0-2-centos ~] a=10</span><br><span class="line">/notebooks/shell基础.md:  [root@VM-0-2-centos ~] b=20</span><br><span class="line">/notebooks/shell基础.md:  [root@VM-0-2-centos ~] <span class="built_in">echo</span> $((a+b)) <span class="comment"># 变量可以不加$</span></span><br><span class="line">/notebooks/shell基础.md:  [root@VM-0-2-centos ~] <span class="built_in">echo</span> $((<span class="variable">$a</span>+<span class="variable">$b</span>))</span><br></pre></td></tr></table></figure>

<p><em>查询以<code>r</code>开头的行</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-2-centos ~] grep -n ^r /etc/passwd  </span><br><span class="line">1:root:x:0:0:root:/root:/bin/bash</span><br><span class="line">18:rpc:x:32:32:Rpcbind Daemon:/var/lib/rpcbind:/sbin/nologin</span><br></pre></td></tr></table></figure>

<p><em>查询以<code>sh</code>结尾的行</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-2-centos ~] grep -n sh$ /etc/passwd  </span><br><span class="line">1:root:x:0:0:root:/root:/bin/bash</span><br></pre></td></tr></table></figure>

<p><em>查询字母<code>o</code>连续出现两次的所在行</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-2-centos ~] grep -En <span class="string">&#x27;o&#123;2&#125;&#x27;</span> /etc/passwd  </span><br><span class="line">1:root:x:0:0:root:/root:/bin/bash</span><br><span class="line">5:lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">9:mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">10:operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">22:postfix:x:89:89::/var/spool/postfix:/sbin/nologin</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong><code>grep</code>默认只支持基础正则，当需要扩展正则时，需要加<code>-E</code>或者使用<code>egrep</code>。</p>
<p><em>基础正则</em></p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">^</td>
<td>以…开头，如^a</td>
</tr>
<tr>
<td align="center">$</td>
<td>以…结尾，如a$</td>
</tr>
<tr>
<td align="center">^$</td>
<td>空行，什么符号都没有</td>
</tr>
<tr>
<td align="center">.</td>
<td>表示任意一个字符</td>
</tr>
<tr>
<td align="center">\</td>
<td>转义字符，\n相当于回车，\t相当于tab键</td>
</tr>
<tr>
<td align="center">*</td>
<td>表示前一个字符连续出现了0次或0次以上</td>
</tr>
<tr>
<td align="center">.*</td>
<td>表示任意字符，包括空行</td>
</tr>
<tr>
<td align="center">[]</td>
<td>匹配字符范围，如[1,5]，只匹配包含数字1-5</td>
</tr>
<tr>
<td align="center">[^]</td>
<td>[^abc]表示排除a,b,c</td>
</tr>
</tbody></table>
<p><em>扩展正则</em></p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td>表示前一个字符连续出现1次或1次以上</td>
</tr>
<tr>
<td align="center">|</td>
<td>或</td>
</tr>
<tr>
<td align="center">()</td>
<td>表示一个整体</td>
</tr>
<tr>
<td align="center">{}</td>
<td>{n,m}前一个字符至少连续出现n次，最多连续出现mci</td>
</tr>
</tbody></table>
<p><em>显示匹配包含<code>Daemon</code>的行及其上下两行</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-2-centos ~] grep -C2 Daemon /etc/passwd  </span><br><span class="line">polkitd:x:999:998:User <span class="keyword">for</span> polkitd:/:/sbin/nologin</span><br><span class="line">libstoragemgmt:x:998:997:daemon account <span class="keyword">for</span> libstoragemgmt:/var/run/lsm:/sbin/nologin</span><br><span class="line">rpc:x:32:32:Rpcbind Daemon:/var/lib/rpcbind:/sbin/nologin</span><br><span class="line">ntp:x:38:38::/etc/ntp:/sbin/nologin</span><br><span class="line">abrt:x:173:173::/etc/abrt:/sbin/nologin</span><br></pre></td></tr></table></figure>

<h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h3><p><code>sed</code>是流编辑器，一次处理一行，将每行放在模式空间中进行处理，处理完成后清除掉这个空间，也就是说<code>sed</code>操作文件并不会改变源文件。</p>
<p>两种使用形式：</p>
<p><code>sed [option] &quot;pattern command&quot; file</code></p>
<p><code>some command | sed [option] &quot;pattern command&quot;</code></p>
<table>
<thead>
<tr>
<th align="center">option</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-n</td>
<td>只打印模式匹配的行</td>
</tr>
<tr>
<td align="center">-f</td>
<td>加载存放动作的文件</td>
</tr>
<tr>
<td align="center">-r</td>
<td>支持扩展正则</td>
</tr>
<tr>
<td align="center">-i</td>
<td>直接修改文件</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">匹配模式(pattern)</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">5</td>
<td>只处理第5行</td>
</tr>
<tr>
<td align="center">5,10</td>
<td>只处理第5到第10行</td>
</tr>
<tr>
<td align="center">/pattern/</td>
<td>只处理能匹配pattern的行</td>
</tr>
<tr>
<td align="center">/pattern1/,/pattern2/</td>
<td>只处理从匹配pattern1到pattern2之间的行</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">命令(command)</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">a</td>
<td>在匹配行后新增</td>
</tr>
<tr>
<td align="center">c</td>
<td>取代</td>
</tr>
<tr>
<td align="center">d</td>
<td>删除</td>
</tr>
<tr>
<td align="center">i</td>
<td>在匹配行前新增</td>
</tr>
<tr>
<td align="center">r</td>
<td>外部文件读入新增到行后</td>
</tr>
<tr>
<td align="center">w</td>
<td>匹配行写入到外部文件</td>
</tr>
<tr>
<td align="center">p</td>
<td>打印</td>
</tr>
<tr>
<td align="center">s</td>
<td>修改<br><br>s /old/new/ 只修改匹配行中第一个old<br>s /old/new/g 修改匹配行中所有的old</td>
</tr>
</tbody></table>
<p><strong>查询</strong></p>
<p><code>sed</code>和<code>grep</code>一样，默认只支持普通正则，要用扩展正则需要加<code>-r</code></p>
<p><em>打印连续出现两次字母<code>o</code>的行</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-2-centos ~] sed -rn <span class="string">&#x27;/o&#123;2&#125;/ p&#x27;</span> /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">postfix:x:89:89::/var/spool/postfix:/sbin/nologin</span><br></pre></td></tr></table></figure>

<p><em>打印以<code>rpc</code>开头和<code>post</code> 开头的之间的行</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-2-centos ~] sed -n <span class="string">&#x27;/^rpc/,/^post/ p&#x27;</span> /etc/passwd</span><br><span class="line">rpc:x:32:32:Rpcbind Daemon:/var/lib/rpcbind:/sbin/nologin</span><br><span class="line">ntp:x:38:38::/etc/ntp:/sbin/nologin</span><br><span class="line">abrt:x:173:173::/etc/abrt:/sbin/nologin</span><br><span class="line">sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin</span><br><span class="line">postfix:x:89:89::/var/spool/postfix:/sbin/nologin</span><br></pre></td></tr></table></figure>

<p><strong>新增</strong></p>
<p><em>在匹配行后新增</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;/^他/ a 敢笑黄巢不丈夫&#x27;</span> test.txt </span><br><span class="line">宝骏踏断命里刺</span><br><span class="line">胭脂洒满暮光谷</span><br><span class="line">他日若随凌云志</span><br><span class="line">敢笑黄巢不丈夫</span><br></pre></td></tr></table></figure>

<p><em>在匹配行前新增</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;/^宝  i 兰花草  test.txt </span></span><br><span class="line"><span class="string">兰花草</span></span><br><span class="line"><span class="string">宝骏踏断命里刺</span></span><br><span class="line"><span class="string">胭脂洒满暮光谷</span></span><br><span class="line"><span class="string">他日若随凌云志</span></span><br></pre></td></tr></table></figure>

<p><em>从外部文件插入内容</em></p>
<p><code>content.txt</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我从山中来</span><br><span class="line">带着兰花草</span><br><span class="line">家中无富贵</span><br><span class="line">口袋无财宝</span><br><span class="line">寒风终刺骨</span><br><span class="line">勤为好仕途</span><br><span class="line">博得明月出</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;3 r content.txt&#x27;</span> test.txt</span><br><span class="line">宝骏踏断命里刺</span><br><span class="line">胭脂洒满暮光谷</span><br><span class="line">他日若随凌云志</span><br><span class="line">我从山中来</span><br><span class="line">带着兰花草</span><br><span class="line">家中无富贵</span><br><span class="line">口袋无财宝</span><br><span class="line">寒风终刺骨</span><br><span class="line">勤为好仕途</span><br><span class="line">博得明月出</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>上述对文件的插入新增操作，都不会修改源文件，如果要直接修改源文件，需要加<code>-i</code>。</p>
<p><strong>修改</strong></p>
<p><code>test.txt</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yellow blue yellow</span><br><span class="line"><span class="built_in">read</span> green grey</span><br><span class="line">yellow</span><br></pre></td></tr></table></figure>

<p><em>只修改匹配到的第一个</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;s/yellow/white/&#x27;</span> test.txt </span><br><span class="line">white blue yellow</span><br><span class="line"><span class="built_in">read</span> green grey</span><br><span class="line">white</span><br></pre></td></tr></table></figure>

<p><em>修改所有匹配到的内容</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;s/yellow/white/g&#x27;</span> test.txt </span><br><span class="line">white blue white</span><br><span class="line"><span class="built_in">read</span> green grey</span><br><span class="line">white</span><br></pre></td></tr></table></figure>

<p><strong>这里s/old/new/可以用其它任意分隔符，如s#old#new#。</strong></p>
<p><strong>注：</strong>同样地，修改不会影响源文件，要直接修改加<code>-i</code>。</p>
<h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p><code>awk</code>命令会把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行后续处理并生成结果报告。</p>
<blockquote>
<p>之所以叫 AWK 是因为其取了三位创始人 Alfred Aho，Peter Weinberger, 和 Brian Kernighan 的 Family Name 的首字符。</p>
</blockquote>
<p>两种使用形式：</p>
<p><code>awk &#39;BEGIN&#123;&#125; pattern &#123;commands&#125; END&#123;&#125;&#39; file</code></p>
<p><code>some command | awk &#39;BEGIN&#123;&#125; pattern &#123;commands&#125; END&#123;&#125;&#39;</code></p>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>BEGIN{}</td>
<td>处理数据之前执行，只执行一次</td>
</tr>
<tr>
<td>pattern</td>
<td>匹配模式</td>
</tr>
<tr>
<td>{commands}</td>
<td>处理的命令</td>
</tr>
<tr>
<td>END{}</td>
<td>处理数据之后执行，只执行一次</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>内置变量</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>$0</td>
<td>整行内容</td>
</tr>
<tr>
<td>$1-$n</td>
<td>当前行的第1-n个字段</td>
</tr>
<tr>
<td>NF(Number Field)</td>
<td>当前行字段数</td>
</tr>
<tr>
<td>NR(Number Row)</td>
<td>当前行行号，从1开始</td>
</tr>
<tr>
<td>FS(Field Separator)</td>
<td>输入字段分隔符，默认为空格或tab键</td>
</tr>
<tr>
<td>RS(Row Separator)</td>
<td>输入行分隔符，默认为回车符</td>
</tr>
<tr>
<td>OFS(Output Field Separator)</td>
<td>输出字段分隔符，默认为空格</td>
</tr>
<tr>
<td>ORS(Output Row Separator)</td>
<td>输出行分隔符，默认为回车符</td>
</tr>
</tbody></table>
<p><em>打印文件所有内容</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;&#123;print $0&#125;&#x27;</span> test.txt </span><br><span class="line">id name age</span><br><span class="line">001 bob 19</span><br><span class="line">002 tim 20</span><br><span class="line">003 jay 17</span><br></pre></td></tr></table></figure>

<p><em>打印<code>id</code>列内容</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> test.txt </span><br><span class="line">id</span><br><span class="line">001</span><br><span class="line">002</span><br><span class="line">003</span><br></pre></td></tr></table></figure>

<p><strong><code>awk</code>的处理流程</strong>：把文件内容做逐行处理，每一行内容作为输入，并赋值给$0，将行按照分隔符切割(默认空格)，从$1开始，然后对行进行匹配，执行动作，最后打印输出内容。</p>
<p><em>打印<code>/etc/passwd</code>第一列内容</em>`</p>
<p><code>/etc/passwd</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class="line">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过BEGIN作为前置条件指定分割符为&quot;:&quot;</span></span><br><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;FS=&quot;:&quot;&#125; &#123;print $1&#125;&#x27;</span> /etc/passwd</span><br><span class="line">root</span><br><span class="line">bin</span><br><span class="line">daemon</span><br><span class="line">adm</span><br><span class="line">lp</span><br><span class="line">sync</span><br><span class="line">shutdown</span><br><span class="line">halt</span><br><span class="line">mail</span><br><span class="line">operator</span><br></pre></td></tr></table></figure>

<p>也可以这样分割</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> /etc/passwd</span><br><span class="line">root</span><br><span class="line">bin</span><br><span class="line">daemon</span><br><span class="line">adm</span><br><span class="line">lp</span><br><span class="line">sync</span><br><span class="line">shutdown</span><br><span class="line">halt</span><br><span class="line">mail</span><br><span class="line">operator</span><br></pre></td></tr></table></figure>

<p><em>打印<code>/etc/passwd</code>第2-7行的第一列和最后一列内容</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &amp;&amp;:与，||：或，NF：当前行的字段数，$NF即最后一列</span></span><br><span class="line">$ awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;NR&gt;=2 &amp;&amp; NR&lt;=7 &#123;print $1,$NF&#125;&#x27;</span> /etc/passwd</span><br><span class="line">bin /sbin/nologin</span><br><span class="line">daemon /sbin/nologin</span><br><span class="line">adm /sbin/nologin</span><br><span class="line">lp /sbin/nologin</span><br><span class="line">sync /bin/sync</span><br><span class="line">shutdown /sbin/shutdown</span><br></pre></td></tr></table></figure>

<p><em>打印<code>/etc/passwd</code>第2-7行的第一列和最后一列内容，并将输出内容以|分隔</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如上例所示，输出内容默认以空格分隔，要想指定输出内容的列之间的分隔符，可以用OFS指定</span></span><br><span class="line">$ awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;BEGIN&#123;OFS=&quot;|&quot;&#125; NR&gt;=2 &amp;&amp; NR&lt;=7 &#123;print $1,$NF&#125;&#x27;</span> /etc/passwd</span><br><span class="line">bin|/sbin/nologin</span><br><span class="line">daemon|/sbin/nologin</span><br><span class="line">adm|/sbin/nologin</span><br><span class="line">lp|/sbin/nologin</span><br><span class="line">sync|/bin/sync</span><br><span class="line">shutdown|/sbin/shutdown</span><br></pre></td></tr></table></figure>

<p><em>指定换行符</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># awk默认以回车符为换行符，通过RS指定以&quot;,&quot;为换行符</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;Benz,Audi,BMW,Porsche,Ferrari&quot;</span> | awk <span class="string">&#x27;BEGIN&#123;RS=&quot;,&quot;&#125; &#123;print $0&#125;&#x27;</span></span><br><span class="line">Benz</span><br><span class="line">Audi</span><br><span class="line">BMW</span><br><span class="line">Porsche</span><br><span class="line">Ferrari</span><br></pre></td></tr></table></figure>

<p><strong><code>awk</code>还支持循环、条件判断等语法</strong></p>
<p><em>如果行号等于5，打印该行内容</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;if(NR==5) print $0&#125;&#x27;</span> /etc/passwd</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br></pre></td></tr></table></figure>

<p>该语句，等价于：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;NR==5 &#123;print $0&#125;&#x27;</span> /etc/passwd</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br></pre></td></tr></table></figure>

<p><strong><code>awk</code>支持<code>printf</code>格式化输出</strong></p>
<table>
<thead>
<tr>
<th>格式符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>%s</td>
<td>字符串</td>
</tr>
<tr>
<td>%d</td>
<td>十进制数字</td>
</tr>
<tr>
<td>%f</td>
<td>浮点数</td>
</tr>
</tbody></table>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/34.png"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>grep</code>、<code>sed</code>、<code>awk</code>三剑客都是文本处理的好手，但各有侧重：</p>
<ul>
<li>grep 更适合单纯的查找或匹配文本</li>
<li>sed 更适合编辑匹配到的文本</li>
<li>awk 更适合格式化文本，对文本进行较复杂格式处理</li>
</ul>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>pytest-fixture使用总结</title>
    <url>/posts/9752a16f.html</url>
    <content><![CDATA[<h2 id="前言：测试前后的准备清理工作"><a href="#前言：测试前后的准备清理工作" class="headerlink" title="前言：测试前后的准备清理工作"></a>前言：测试前后的准备清理工作</h2><p>通常在测试过程中，都会包括三个步骤：测试前的准备(前置条件)-执行测试-测试后的清理。</p>
<p>在unittest框架中，通常使用setup/teardown来完成测试的前置和后置操作。</p>
<p>在pytest框架中，也有类似的方法来完成对应的操作，如使用 setup_method、setup_class、setup_module 来分别完成测试类方法、测试类，以及测试 module 的 setup；；使用 teardown_method、teardown_class、teardown_module 来分别完成测试类方法、测试类，以及测试 module 清理操作。</p>
<p>但是这种方式存在缺陷。 例如，在同一个测试类中，存在多个测试方法，假设每一个测试方法需要不同的 setup 或者 teardown 函数，此时该怎么办呢？</p>
<p>又如，这些前后置操作，能放到一个统一模块去管理么？</p>
<p>答案是肯定的，pytest提供了一种更高级的功能，<strong>fixture装饰器</strong>。</p>
<p>fixture装饰器可以非常方便的自定义各种前置后置方法供测试用例使用，而且可以通过<strong>conftest.py</strong>文件进行共享，供其他函数、模块、类或者整个项目使用。</p>
<h2 id="1、fixture语法"><a href="#1、fixture语法" class="headerlink" title="1、fixture语法"></a>1、fixture语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fixture(scope=<span class="string">&quot;function&quot;</span>, params=<span class="literal">None</span>, autouse=<span class="literal">False</span>, ids=<span class="literal">None</span>, name=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<p>fixture提供了5个参数。</p>
<h3 id="scope：控制fixture的作用域"><a href="#scope：控制fixture的作用域" class="headerlink" title="scope：控制fixture的作用域"></a>scope：控制fixture的作用域</h3><p>scpoe有4个级别，分别是：</p>
<p>function:在每一个function或者类方法中都会调用（默认）。</p>
<p>class:在每一个类中只调用一次。</p>
<p>module:在每一个.py 文件调用一次。</p>
<p>session:一个session调用一次，如运行整个项目有100条用例，那么本次用例执行过程中只会调用一次。</p>
<h3 id="params：一个可选的参数列表"><a href="#params：一个可选的参数列表" class="headerlink" title="params：一个可选的参数列表"></a>params：一个可选的参数列表</h3><p>params 以可选的参数列表形式存在。在测试函数中使用时，可通过 request.param 接收设置的返回值（即 params 列表里的值）。params 中有多少元素，在测试时，引用此 fixture 的函数就会调用几次。</p>
<h3 id="autouse：是否自动执行设置的-fixtures"><a href="#autouse：是否自动执行设置的-fixtures" class="headerlink" title="autouse：是否自动执行设置的 fixtures"></a>autouse：是否自动执行设置的 fixtures</h3><p>当 autouse 为 True 时，测试函数即使不调用 fixture 装饰器，定义的 fixture 函数也会被执行。</p>
<h3 id="ids：指定每个字符串-id"><a href="#ids：指定每个字符串-id" class="headerlink" title="ids：指定每个字符串 id"></a>ids：指定每个字符串 id</h3><p>当有多个 params 时，针对每一个 param，可以指定 id，这个 id 将变为测试用例名字的一部分。如果没有提供 id，则 id 将自动生成。</p>
<h3 id="name：fixture-的名称"><a href="#name：fixture-的名称" class="headerlink" title="name：fixture 的名称"></a>name：fixture 的名称</h3><p>name 是 fixtures 的名称， 它默认是你装饰的那个 fixture 函数的名称。可以通过 name 参数来更改这个 fixture 名称，更改后，如果这个 fixture 被调用，则使用更改后的名称即可。</p>
<h2 id="2、fixture-用法"><a href="#2、fixture-用法" class="headerlink" title="2、fixture 用法"></a>2、fixture 用法</h2><h3 id="通过函数名直接使用"><a href="#通过函数名直接使用" class="headerlink" title="通过函数名直接使用"></a>通过函数名直接使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@pytest.fixture()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span>():</span></span><br><span class="line">    print(<span class="string">f&#x27;调用fixture&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_demo</span>(<span class="params">demo</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;test&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>将fixture的名字通过参数直接传入测试方法即可。运行用例后，<code>demo()</code>方法会先于<code>test_demo()</code>执行。</p>
<h3 id="通过usefixtures装饰器使用"><a href="#通过usefixtures装饰器使用" class="headerlink" title="通过usefixtures装饰器使用"></a>通过usefixtures装饰器使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span>():</span></span><br><span class="line">    print(<span class="string">f&#x27;调用fixture&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.usefixtures(&#x27;demo&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_demo</span>(<span class="params">demo</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.usefixtures(&#x27;demo&#x27;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_demo_1</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_demo_2</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>这样写的话，<strong>fixture无法返回参数</strong>。</p>
<h3 id="多参数使用"><a href="#多参数使用" class="headerlink" title="多参数使用"></a>多参数使用</h3><p>由于fixture提供了<code>paramas</code>参数，因此fixture也可以实现参数化。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@pytest.fixture(params=[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span>(<span class="params">request</span>):</span></span><br><span class="line">    print(<span class="string">f&#x27;调用fixture：<span class="subst">&#123;request.param&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_demo</span>(<span class="params">demo</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;test&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PASSED                                             [ 33%]test</span><br><span class="line">调用fixture：b</span><br><span class="line">PASSED                                             [ 66%]test</span><br><span class="line">调用fixture：c</span><br><span class="line">PASSED                                             [100%]test</span><br></pre></td></tr></table></figure>

<p>可以看到，将会生成3条用例。</p>
<h3 id="autouse-参数隐式使用"><a href="#autouse-参数隐式使用" class="headerlink" title="autouse 参数隐式使用"></a>autouse 参数隐式使用</h3><p>以上方式实现了 fixtures 和测试函数的松耦合，但是仍然存在问题：每个测试函数都需要显式声明要用哪个 fixtures。</p>
<p>基于此，pytest 提供了<strong>autouse 参数</strong>，允许我们在不调用 fixture 装饰器的情况下使用定义的fixture。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@pytest.fixture(autouse=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span>():</span></span><br><span class="line">    print(<span class="string">f&#x27;调用fixture&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_demo</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;test&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">demo.py::test_demo 调用fixture</span><br><span class="line">PASSED                                                [100%]测试</span><br></pre></td></tr></table></figure>

<h3 id="多-fixture-笛卡尔积使用"><a href="#多-fixture-笛卡尔积使用" class="headerlink" title="多 fixture 笛卡尔积使用"></a>多 fixture 笛卡尔积使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture(params=[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fix1</span>(<span class="params">request</span>):</span></span><br><span class="line">    print(<span class="string">f&#x27;调用fix1:<span class="subst">&#123;request.param&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture(params=[1, 2])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fix2</span>(<span class="params">request</span>):</span></span><br><span class="line">    print(<span class="string">f&#x27;调用fix2:<span class="subst">&#123;request.param&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_demo</span>(<span class="params">fix1, fix2</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;-----我是分割线------&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>将会生成3*2=6条用例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">调用fix1:a</span><br><span class="line">调用fix2:1</span><br><span class="line">PASSED                                           [ 16%]-----我是分割线------</span><br><span class="line">调用fix1:a</span><br><span class="line">调用fix2:2</span><br><span class="line">PASSED                                           [ 33%]-----我是分割线------</span><br><span class="line">调用fix1:b</span><br><span class="line">调用fix2:1</span><br><span class="line">PASSED                                           [ 50%]-----我是分割线------</span><br><span class="line">调用fix1:b</span><br><span class="line">调用fix2:2</span><br><span class="line">PASSED                                           [ 66%]-----我是分割线------</span><br><span class="line">调用fix1:c</span><br><span class="line">调用fix2:1</span><br><span class="line">PASSED                                           [ 83%]-----我是分割线------</span><br><span class="line">调用fix1:c</span><br><span class="line">调用fix2:2</span><br><span class="line">PASSED                                           [100%]-----我是分割线------</span><br></pre></td></tr></table></figure>

<h3 id="fixture间嵌套使用"><a href="#fixture间嵌套使用" class="headerlink" title="fixture间嵌套使用"></a>fixture间嵌套使用</h3><p>不同的fixture间也可以嵌套使用，将<code>fix1</code>作为参数传入<code>fix2</code>中，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@pytest.fixture()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fix1</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;调用fix1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fix2</span>(<span class="params">fix1</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;调用fix2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_demo</span>(<span class="params">fix2</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;-----我是分割线------&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">demo.py::test_demo 调用fix1</span><br><span class="line">调用fix2</span><br><span class="line">PASSED                                                [100%]-----我是分割线------</span><br></pre></td></tr></table></figure>

<p>可以看到，当调用<code>fix2</code>时，会先调用fix1。</p>
<h3 id="使用-conftest-py-来共享-fixture"><a href="#使用-conftest-py-来共享-fixture" class="headerlink" title="使用 conftest.py 来共享 fixture"></a>使用 conftest.py 来共享 fixture</h3><p>日常工作测试中，我们常常需要在全局范围内使用同一个测试前置操作。例如，测试开始时首先进行登录操作，接着连接数据库。</p>
<p>这种情况下，我们就需要使用 <strong>conftest.py</strong>。在 conftest.py 中定义的 fixture 不需要进行 import，pytest 会自动查找使用。 pytest 查找 fixture 的顺序是首先查找测试类（Class），接着查找测试模块（Module），然后是 conftest.py 文件，最后是内置或者第三方插件。</p>
<h3 id="通过yield唤醒teardown"><a href="#通过yield唤醒teardown" class="headerlink" title="通过yield唤醒teardown"></a>通过yield唤醒teardown</h3><p>前面fixture已经帮我们实现了前置操作，那么后置如何实现呢？非常简单，通过关键字<strong>yield</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fix</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;我是前置条件&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    print(<span class="string">&#x27;我是后置条件&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_demo</span>(<span class="params">fix</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;-----我是分割线------&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">demo.py::test_demo 我是前置条件</span><br><span class="line">PASSED                                                [100%]-----我是分割线------</span><br><span class="line">我是后置条件</span><br></pre></td></tr></table></figure>

<p>通过yield，会讲该函数变为生成器，这里具体原理先不展开，简单来说，<strong>yield之前的前置条件，yield之后的为后置条件。</strong></p>
<h3 id="有返回值的fixture"><a href="#有返回值的fixture" class="headerlink" title="有返回值的fixture"></a>有返回值的fixture</h3><p>大部分情况下，我都会使用fixture来返回一些值来供测试用例使用，如登录的cookie、token、数据库的连接对象等，那么fixture的返回值又是如何传递给用例的呢？如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fix</span>():</span></span><br><span class="line">    a = <span class="number">1</span> + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_demo</span>(<span class="params">fix</span>):</span></span><br><span class="line">    <span class="comment"># 接收fix值传递给了变量x</span></span><br><span class="line">    x= fix</span><br><span class="line">    print(<span class="string">f&#x27;这是我接收到fix的变量：<span class="subst">&#123;x&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>当然，也可以是多个值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fix</span>():</span></span><br><span class="line">    a = <span class="number">1</span> + <span class="number">1</span></span><br><span class="line">    b = <span class="number">2</span> + <span class="number">2</span></span><br><span class="line">    c = <span class="number">3</span> + <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> a,b,c</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_demo</span>(<span class="params">fix</span>):</span></span><br><span class="line">    <span class="comment"># 接收fix值传递给了变量x,y,z</span></span><br><span class="line">    <span class="comment"># 如果只用一个变量接收，类型将会是元组</span></span><br><span class="line">    x,y,z = fix</span><br><span class="line">    print(<span class="string">f&#x27;这是我接收到fix的变量：<span class="subst">&#123;x&#125;</span><span class="subst">&#123;y&#125;</span><span class="subst">&#123;z&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>同理，<strong>yield</strong>也能返回值。</p>
<h3 id="pytest-mark-parametrize-和-pytest-fixture-结合使用"><a href="#pytest-mark-parametrize-和-pytest-fixture-结合使用" class="headerlink" title="pytest.mark.parametrize 和 pytest.fixture 结合使用"></a>pytest.mark.parametrize 和 pytest.fixture 结合使用</h3><p>现在有一个问题，如果fixture是做了参数化的，如何在用例中动态地给它传入参数呢？</p>
<p>在我日常工作中，会有这么一种场景：通常我会把数据库连接放到fixture中，但是不同case中用到的数据库可能不是同一个，这就导致我会根据不同的数据库配置信息，实例多个db连接对象，那么我该如何把不同的数据库配置信息，在用例层传入给fixture呢？总不可能每个数据库都创建一个fixture吧？来看看用fixture结合parametrize是如何优雅地实现。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture(scope=&#x27;class&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect_db</span>(<span class="params">request</span>):</span></span><br><span class="line">    db = HandleMysql(request.param)</span><br><span class="line">    <span class="keyword">yield</span> db</span><br><span class="line">    db.close()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span>:</span></span><br><span class="line">    <span class="comment"># db1,db2,db3是伪代码，表示数据库不同的连接配置信息</span></span><br><span class="line"><span class="meta">    @pytest.mark.parametrize(&#x27;connect_db&#x27;, [db_conf], indirect=True)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_demo</span>(<span class="params">self,connect_db</span>):</span></span><br><span class="line">        <span class="comment"># 接收fix值传递给了变量x</span></span><br><span class="line">        db = connect_db</span><br><span class="line">        print(<span class="string">f&#x27;这是我的数据库连接对象：<span class="subst">&#123;connect_db&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>首先，fixture做了参数化，那么就需要在fixture中接受变量，传入<strong>request</strong>这个内置fixture，然后传入的变量，通过request的<strong>param</strong>接收，这是需要再fixture内部做的操作。</p>
<p>然后，在用例层的**@pytest.mark.parametrize**中，将配置信息变量<code>db_conf</code>传入到<code>connect_db</code>这个fixture中，需要注意的是，这里必须设置参数<code>indirect=True</code>。</p>
<blockquote>
<p>当indirect为True的时候，变量为固件函数名称的，执行的时候会将变量（此例中即为connect_db）当做函数来执行。</p>
<p>当indirect为false的时候，变量为固件函数名称的，执行的时候会将变量当做一个参数来执行。</p>
</blockquote>
<p>ok，日常项目中，关于fixture的使用就如上所述了。</p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>pytest</tag>
      </tags>
  </entry>
  <entry>
    <title>python元类初探</title>
    <url>/posts/684670e.html</url>
    <content><![CDATA[<h3 id="一切皆为对象"><a href="#一切皆为对象" class="headerlink" title="一切皆为对象"></a>一切皆为对象</h3><p>在刚开始学Python面向对象时，就经常看到一句话：python中，一切皆为对象。当初对这句话的理解并不深，只能明白第一层，对象？不就是一个类的实例化么。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">&lt;__main__.A object at <span class="number">0x0000023DF09976D8</span>&gt;</span><br></pre></td></tr></table></figure>

<p>然而，随着对python进一步的学习探索，特别是了解了闭包、装饰器、魔术方法等后，才明白所有的数据类型也是对象，函数也是对象，方法也是对象，甚至，类也是对象！当使用<code>class</code>关键字，python解释器在执行的时候就会在内存中创建一个对象，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">print(A)</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">__main__</span>.<span class="title">A</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个对象的名字就叫<code>A</code>，这个类对象<code>A</code>拥有创建对象，即实例对象的能力。</p>
<p>那么类既然是对象，那类又是由谁创建的呢？答案就是：<strong>type</strong>。</p>
<h3 id="造物主type"><a href="#造物主type" class="headerlink" title="造物主type"></a>造物主type</h3><p><code>type()</code>函数是一个我们非常常用的函数，它可以帮助我们查看对象的类型，就像这样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(type(<span class="number">1</span>)) <span class="comment"># 输出：&lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line">print(type(<span class="string">&#x27;123&#x27;</span>)) <span class="comment"># 输出：&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line">print(type([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])) <span class="comment"># 输出：&lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line">print(type(&#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>&#125;)) <span class="comment"># 输出：&lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line">print(type((<span class="number">1</span>,))) <span class="comment"># 输出：&lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line">print(type(A)) <span class="comment"># 输出：&lt;class &#x27;type&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p>不过，有没有发现，再查看类对象<code>A</code>时，返回的类型是<code>type</code>！</p>
<p>再试试其它内置类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(type(int)) <span class="comment"># 输出：&lt;class &#x27;type&#x27;&gt;</span></span><br><span class="line">print(type(str)) <span class="comment"># 输出：&lt;class &#x27;type&#x27;&gt;</span></span><br><span class="line">print(type(list)) <span class="comment"># 输出：&lt;class &#x27;type&#x27;&gt;</span></span><br><span class="line">print(type(dict)) <span class="comment"># 输出：&lt;class &#x27;type&#x27;&gt;</span></span><br><span class="line">print(type(tuple)) <span class="comment"># 输出：&lt;class &#x27;type&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p>无一例外，内置类的类型也全部都是<code>type</code>。</p>
<p>没错，这个朴实无华，平平无奇的<code>type</code>其实是一个隐藏boss、造物主，它是所有类的类，所有的类都是<code>type</code>的实例对象。</p>
<h3 id="动态创建类"><a href="#动态创建类" class="headerlink" title="动态创建类"></a>动态创建类</h3><p><code>type</code>除了常用的查看对象类型的用法外，还有一种完全不同的用法，就是动态创建类。</p>
<p>它可以这样用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">type(<span class="string">&#x27;&#x27;</span>,(),&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>可以接收三个参数：</p>
<ul>
<li>第一个参数为类名</li>
<li>第二个参数为父类的名字（注意不是字符串）</li>
<li>第三个参数可以定义类的属性、方法（包括静态方法、类方法）</li>
</ul>
<p>我们来试试：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">static_func</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;this is a static method&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cls_func</span>(<span class="params">cls</span>):</span></span><br><span class="line">    <span class="keyword">return</span> cls.name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AFarther</span>:</span></span><br><span class="line">    a_father_name = <span class="string">&#x27;java&#x27;</span></span><br><span class="line"></span><br><span class="line">A = type(<span class="string">&#x27;A&#x27;</span>, (AFarther,), &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;func&#x27;</span>: func, <span class="string">&#x27;static_func&#x27;</span>: static_func, <span class="string">&#x27;cls_func&#x27;</span>: cls_func&#125;)</span><br><span class="line"></span><br><span class="line">print(A.__dict__)</span><br><span class="line">print(A().func())</span><br><span class="line">print(A().static_func())</span><br><span class="line">print(A().cls_func())</span><br><span class="line">print(A().a_father_name)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;func&#x27;</span>: &lt;function func at <span class="number">0x000001E7DD57C1E0</span>&gt;, <span class="string">&#x27;static_func&#x27;</span>: &lt;staticmethod object at <span class="number">0x000001E7DD962C18</span>&gt;, <span class="string">&#x27;cls_func&#x27;</span>: &lt;function cls_func at <span class="number">0x000001E7DD723D90</span>&gt;, <span class="string">&#x27;__module__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">python</span><br><span class="line">this <span class="keyword">is</span> a static method</span><br><span class="line">python</span><br><span class="line">java</span><br></pre></td></tr></table></figure>

<p>可以看到，通过<code>type(&#39;A&#39;, (AFarther,), &#123;&#39;name&#39;: &#39;python&#39;, &#39;func&#39;: func, &#39;static_func&#39;: static_func, &#39;cls_func&#39;: cls_func&#125;)</code>，实现了动态创建类，这个类的名字定义为<code>A</code>，它继承于类<code>AFather</code>，它的类属性为<code>name=&quot;python&quot;</code>，它的实例方法为<code>func</code>，静态方法为<code>static_func</code>，类方法为<code>cls_func</code>。</p>
<p>而这，其实就是当我们用关键字<code>class</code>定义类时，python在幕后帮我们做的事情，通过<strong>元类</strong>来实现类的创建。</p>
<h3 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h3><p>元类就是用来创建类的“造物主”，简单说就是类的类，而上面我们提到的<code>type就是</code>一个元类，python中所有的类都不过是<code>type</code>的实例对象而已，我们可以通过查看对象的<code>__class__</code>属性来溯源它是由谁实例而来：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">print(a.__class__) <span class="comment"># 输出： &lt;class &#x27;__main__.A&#x27;&gt;</span></span><br><span class="line">print(a.__class__.__class__) <span class="comment"># 输出： &lt;class &#x27;type&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面例子中，我们定义了一个类<code>A</code>，它的实例对象<code>a</code>，通过<code>a.__class__</code>可以看到，它有<code>A</code>实例而来，而<code>a.__class__.__class__</code>即可以看到<code>A</code>由谁实例而来，结果显示，它由<code>type</code>实例而来。</p>
<p>除了自定义的类对象是由<code>type</code>实例而来，我们再看看python内置的数据结构对象又是谁实例出来的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;-------int--------&#x27;</span>)</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">print(a.__class__)</span><br><span class="line">print(a.__class__.__class__)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;-------str--------&#x27;</span>)</span><br><span class="line">b = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">print(b.__class__)</span><br><span class="line">print(b.__class__.__class__)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;-------list--------&#x27;</span>)</span><br><span class="line">c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(c.__class__)</span><br><span class="line">print(c.__class__.__class__)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;-------dict--------&#x27;</span>)</span><br><span class="line">d = &#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>&#125;</span><br><span class="line">print(d.__class__)</span><br><span class="line">print(d.__class__.__class__)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;-------tuple--------&#x27;</span>)</span><br><span class="line">e = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">print(e.__class__)</span><br><span class="line">print(e.__class__.__class__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">-------int--------</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">int</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">type</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">-------<span class="title">str</span>--------</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">type</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">-------<span class="title">list</span>--------</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">list</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">type</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">-------<span class="title">dict</span>--------</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">dict</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">type</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">-------<span class="title">tuple</span>--------</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">tuple</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">type</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看到，每一种数据类型对象，其实也都是由元类<code>type</code>实例而来，<code>type</code>就是Python的内置元类，当然，我们也可以自己定义一个元类。</p>
<h3 id="自定义元类"><a href="#自定义元类" class="headerlink" title="自定义元类"></a>自定义元类</h3><p>因为<code>type</code>是Python的内置元类，所以我们如果想自定义一个元类，即创建一个新的类型，可以通过继承<code>type</code>来实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">type</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">metaclass=A</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line">print(type(B))</span><br><span class="line">print(b.__class__.__class__) </span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">__main__</span>.<span class="title">A</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">__main__</span>.<span class="title">A</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们定义了一个类<code>A</code>，它继承于<code>type</code>，那么它就是一个新的元类，它拥有了实例类对象的能力。当定义一个类<code>B</code>，并通过参数<code>metaclass</code>来指定它的元类为<code>A</code>，此时我们再查看类<code>B</code>的类型为新元类<code>A</code>；查看它是由谁实例而来，也是新元类<code>A</code>。</p>
<h3 id="先有鸡还是先有蛋？"><a href="#先有鸡还是先有蛋？" class="headerlink" title="先有鸡还是先有蛋？"></a>先有鸡还是先有蛋？</h3><p>查看<code>type</code>的源码可以看到：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">type</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    type(object_or_name, bases, dict)</span></span><br><span class="line"><span class="string">    type(object) -&gt; the object&#x27;s type</span></span><br><span class="line"><span class="string">    type(name, bases, dict) -&gt; a new type</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p><code>type</code>居然继承于<code>object</code>，不是所有的类都是由它创建的吗？</p>
<p>而看<code>object</code>的源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">object</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; The most base type &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>object</code>又是所有类的顶点、祖宗，所有的类都继承于它。</p>
<p>那么问题来了，到底是先有<code>type</code>还是先有<code>object</code>？这个问题就像是先有鸡还是先有蛋一样，我没有办法回答，我只能说，它们是在面向对象的体系中，两种不同的关系的顶点：</p>
<ul>
<li>父子关系：这种关系存在于<strong>某个类（subclass）是另一个类（superclass）的特别版本</strong>之中。通常描述为“子类是一种父类”。比如：蛇是一种爬行动物(Snake is a kind of reptile)。其中，蛇(snake)是子类,爬行动物(reptile)是父类。蛇拥有爬行动物的特征，同时，又拥有标志自己是一条蛇的特征。</li>
<li>类型实例关系：这种关系存在于两个对象之中，其中一个对象(实例)是另一个对象(类型)的具体实现。我有一条宠物蛇叫<strong>Squasher</strong>，那么<strong>Squasher</strong>就是蛇的一个实例。英文描述为：”Squasher is an instance of snake”。</li>
</ul>
<p>而<code>object</code>则是父子关系的顶点，所有的类，都继承于它。</p>
<p>而<code>type</code>则是类型实例关系的顶点，所有的对象，都是由它是来出来的。</p>
<p>一句话：<strong>object是一个type的实例，type继承自object</strong>。</p>
<p>元类、类、实例关系图：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/img/Snipaste_2020-12-13_21-51-40.png"></p>
<p>关于<code>type</code>和<code>object</code>关系的探讨，有两位网络上的大神我觉得分析的非常透彻和清晰，这里贴出来以供学习参考：</p>
<p><a href="https://www.cnblogs.com/vs-kaka/articles/11300808.html">《python中的type和object详解》</a></p>
<p><a href="https://www.zhihu.com/question/38791962">《Python 的 type 和 object 之间是怎么一种关系？》 </a></p>
<h3 id="元类的作用"><a href="#元类的作用" class="headerlink" title="元类的作用"></a>元类的作用</h3><p>元类的主要目的就是为了当创建类时能够自动地改变类。</p>
<p>比如假设一个简单的需求，在我定义一个类的时候，我希望它都能有一个默认的类属性。</p>
<p>用元类来实现以下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">type</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, class_name, parents_class, class_attr</span>):</span></span><br><span class="line">        cls.attr = <span class="string">&#x27;我是默认属性&#x27;</span></span><br><span class="line">        class_attr = &#123;<span class="string">&#x27;attr&#x27;</span>: cls.attr&#125;</span><br><span class="line">        <span class="keyword">return</span> type(class_name, parents_class, class_attr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">metaclass=A</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">metaclass=A</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(hasattr(B, <span class="string">&#x27;attr&#x27;</span>)) <span class="comment"># 输出：True</span></span><br><span class="line">print(hasattr(C, <span class="string">&#x27;attr&#x27;</span>)) <span class="comment"># 输出：True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>因为我们希望能控制对象的创建，所以重写了<code>__new__</code>，并且，由于创建的对象是类，所以需要继承元类<code>type</code>。这样，只要定义的类指定了<code>metaclass</code>为<code>A</code>，那么所有的类对象，都会有一个默认对象<code>attr</code>。</p>
<p>简单来说，就是我们在创建类的时候，自定义了它的行为。要达到这种效果，似乎装饰器也可以实现吧？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extended</span>(<span class="params">cls</span>):</span></span><br><span class="line">    cls.attr = <span class="string">&#x27;我是默认属性&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> cls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@extended</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@extended</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(hasattr(A, <span class="string">&#x27;attr&#x27;</span>))</span><br><span class="line">print(hasattr(B, <span class="string">&#x27;attr&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>同样都是扩展类的功能，装饰器也一样能实现，但是它们有一个明显区别就是，装饰器不会影响对象本身，而metaclass是拦截了对象的构造，直接对对象进行了改造。</p>
<p><strong>装饰器就像钢铁侠，通过外部装备来强化自己；而metaclass像美国队长，通过改变自身的基因序列让其能力超越了人类。</strong></p>
<p>现在，回到本文的主题<strong>元类</strong>这两个字上来，什么叫<strong>元类</strong>（<strong>metaclass</strong>）？从字面上来讲，“元”的意思是“本源”、“根本”的意思，那么就是所有元类的祖宗的意思咯？非也非也，如果是这样，<code>object</code>第一个不答应。而<strong>meta</strong>这个词，词根来自希腊语，有“超越”、“变形”的意思，所以实际上应该理解为超越类，变形类更为准确，而元类确实正如我们所说，它能让类对象拥有“超越变形”的能力。</p>
<p>只是，以我目前的水平，还无法真正领会到元类这强大的能力，正如Python大神<strong>Tim Peters</strong>所说：</p>
<p><strong>“元类就是深度的魔法，99%的用户应该根本不必为此操心。如果你想搞清楚究竟是否需要用到元类，那么你就不需要它。那些实际用到元类的人都非常清楚地知道他们需要做什么，而且根本不需要解释为什么要用元类。”</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20201213224046.png"></p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>元类</tag>
      </tags>
  </entry>
  <entry>
    <title>上下文管理器</title>
    <url>/posts/65e41272.html</url>
    <content><![CDATA[<h3 id="何谓上下文管理器"><a href="#何谓上下文管理器" class="headerlink" title="何谓上下文管理器"></a>何谓上下文管理器</h3><p>说到<strong>上下文</strong>，相信大家都还记得，在中学语文考试的阅读理解题上，我们经常会看到“联系上下文，解释xxx的意思”，这里的“上下文”指的是语言环境。</p>
<p>那么对应到代码中，其实也是一个意思，即<strong>程序所执行的环境状态</strong>。</p>
<p>那么<strong>管理器</strong>又怎么说呢？在我们写代码的时候，我们会把操作放在一个代码块中（比如读写文件），这样执行代码块时就可以保持一种运行状态，而当离开这个代码块时，就结束当前状态，去执行另一个操作，如果在这个代码块的运行状态还没结束时，此时又“越界”去做了另一个操作，上下文管理器就会做出相应的处理。</p>
<p>在我们做IO操作时（比如文件读写、数据库连接断开等操作），每一个操作都是会占用系统资源的，而且系统资源有限，如果使用这些资源后却一直不释放，那么久容易造成资源泄露，导致系统运行缓慢，甚至崩溃。</p>
<p>比如这样一个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10000000</span>): </span><br><span class="line">    f = open(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">&#x27;python&#x27;</span>) </span><br></pre></td></tr></table></figure>

<p>打开<code>test.txt</code>这个文件并写入一句话，执行<code>10000000</code>次，但是每次其实是没有去释放资源的（即关闭文件），这样就很容易造成资源泄露，导致报错<code>OSError</code>。</p>
<p>而更合理的做法应该是，每次打开写入完成后，就关闭文件去释放资源，所以为了解决这个问题，通过上下文管理器可以帮助我们使用完资源后去自动释放。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10000000</span>):</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f :</span><br><span class="line">        f.write(<span class="string">&#x27;python&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>那么我们想要自己实现一个上下文管理器，该怎么做呢？</p>
<h3 id="实现上下文管理器"><a href="#实现上下文管理器" class="headerlink" title="实现上下文管理器"></a>实现上下文管理器</h3><p>实现上下文管理器的方法，有两种，一种是通过魔术方法实现，一种是基于生成器实现。</p>
<h4 id="魔术方法实现"><a href="#魔术方法实现" class="headerlink" title="魔术方法实现"></a>魔术方法实现</h4><p>上下文管理器的实现，涉及到<strong>__enter__</strong>和<strong>__exit__</strong>两个魔术方法，我们自己来定义一个<code>HandleFile</code>类，来实现文件打开和自动关闭。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HandleFile</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, mode</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;调用__init__&#x27;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.mode = mode</span><br><span class="line">        self.file = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;调用__enter__&#x27;</span>)</span><br><span class="line">        self.file = open(self.name, self.mode)</span><br><span class="line">        <span class="keyword">return</span> self.file</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;调用__exit__&#x27;</span>)</span><br><span class="line">        self.file.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> HandleFile(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(<span class="string">&#x27;在文件中写入&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">调用__init__</span><br><span class="line">调用__enter__</span><br><span class="line">在文件中写入</span><br><span class="line">调用__exit__</span><br></pre></td></tr></table></figure>

<p>通过<code>with</code> 关键字激活上下文管理<code>HandleFile</code>后，<code>HandleFile(&#39;test.txt&#39;, &#39;w&#39;)</code>先初始化完成，然后自动执行<code>__enter__</code> 方法进入上下环境，<code>__enter__</code> 方法的返回值赋值给变量<code>f</code>，<code>f</code>在调用<code>write</code>方法完成写操作后，自动触发<code>__exit__</code>来关闭文件。</p>
<p>这两个魔术方法的详细使用，可以查看<a href="https://ancientone.cf/posts/da8f1b2e.html">《魔术方法总结》</a>一文中的对应小节，这里不再赘述。</p>
<h4 id="基于生成器实现"><a href="#基于生成器实现" class="headerlink" title="基于生成器实现"></a>基于生成器实现</h4><p>如果不想通过一个类来实现一个简单的上下文管理器，python提供了一个装饰器<code>contextlib.contextmanager</code>，通过它可以将一个函数变为上下文管理器。</p>
<p>我们来实现一个和魔术方法等价的上下文管理器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_file</span>(<span class="params">name, mode</span>):</span></span><br><span class="line">    <span class="keyword">try</span>: <span class="comment"># 相当于__enter__</span></span><br><span class="line">        f = open(name, mode)</span><br><span class="line">        <span class="keyword">yield</span> f</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        print(<span class="string">&#x27;出错了&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>: <span class="comment"># 相当于__exit__</span></span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> handle_file(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&#x27;python666&#x27;</span>)</span><br><span class="line">    print(<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">出错了</span><br></pre></td></tr></table></figure>

<p>在被装饰的函数中，必须有<code>yiled</code>关键字，<code>yiled</code>之前的代码就相当于<code>__enter__</code>，完成打开文件并将返回值传给<code>f</code>，<code>yiled</code>之后的关键字就相当于<code>__exit__</code>，等<code>with</code>代码块中的代码执行完成后，就去关闭文件。此外，通过<code>try-except</code> 实现了上下管理器的异常处理。所以，这个方法和魔术方法实现的上下文管理器，是完全等价的。</p>
<h3 id="在工作中的应用"><a href="#在工作中的应用" class="headerlink" title="在工作中的应用"></a>在工作中的应用</h3><h4 id="数据库连接断开"><a href="#数据库连接断开" class="headerlink" title="数据库连接断开"></a>数据库连接断开</h4><p>在做接口自动化时，数据库的连接断开，也可以通过上下文管理器来简化：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HandleMysql</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, hostname, port</span>):</span></span><br><span class="line">        self.hostname = hostname</span><br><span class="line">        self.port = port</span><br><span class="line">        self.connection = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.connection = pymysql.connect(self.hostname, self.port, charset=<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.connection</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span></span><br><span class="line">        self.connection.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> HandleMysql(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;80&#x27;</span>) <span class="keyword">as</span> db:</span><br><span class="line">    print(<span class="string">&#x27;执行数据库的增删查改操作&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="allure-step"><a href="#allure-step" class="headerlink" title="allure.step()"></a>allure.step()</h4><p>在<code>allure</code>中提供了一个<code>step()</code>方法，通过这个方法，可以将测试步骤展现在测试报告中。<code>step</code> 有两种用法，一种通过装饰器调用，一种则是通过上下文管理器使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># @allure.step(&#x27;step1:注册&#x27;) 方法一</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">case_register</span>(<span class="params">self, data</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    注册业务场景</span></span><br><span class="line"><span class="string">    :param data:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> allure.step(<span class="string">&#x27;step1:注册&#x27;</span>): <span class="comment"># 方法二</span></span><br><span class="line">        data = self.template(data, &#123;<span class="string">&#x27;mobile_phone&#x27;</span>: self.random_phone()&#125;)</span><br><span class="line">        res = self.register_api(**data).json()</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<p>我们点进<code>step</code>方法查看源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">step</span>(<span class="params">title</span>):</span></span><br><span class="line">    <span class="keyword">if</span> callable(title):</span><br><span class="line">        <span class="keyword">return</span> StepContext(title.__name__, &#123;&#125;)(title)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> StepContext(title, &#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>可以看到返回的是<code>StepContext()</code>对象，继续点进去：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StepContext</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, title, params</span>):</span></span><br><span class="line">        self.title = title</span><br><span class="line">        self.params = params</span><br><span class="line">        self.uuid = uuid4()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        plugin_manager.hook.start_step(uuid=self.uuid, title=self.title, params=self.params)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span></span><br><span class="line">        plugin_manager.hook.stop_step(uuid=self.uuid, title=self.title, exc_type=exc_type, exc_val=exc_val,</span><br><span class="line">                                      exc_tb=exc_tb)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, func</span>):</span></span><br><span class="line"><span class="meta">        @wraps(func)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">impl</span>(<span class="params">*a, **kw</span>):</span></span><br><span class="line">            __tracebackhide__ = <span class="literal">True</span></span><br><span class="line">            params = func_parameters(func, *a, **kw)</span><br><span class="line">            args = list(map(<span class="keyword">lambda</span> x: represent(x), a))</span><br><span class="line">            <span class="keyword">with</span> StepContext(self.title.format(*args, **params), params):</span><br><span class="line">                <span class="keyword">return</span> func(*a, **kw)</span><br><span class="line">        <span class="keyword">return</span> impl</span><br></pre></td></tr></table></figure>

<p>可以发现，其实它就是通过<code>__enter__</code>和<code>__exit__</code>来实现的上下文管理器。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>上下文管理器通常和 with 语句一起使用，大大提高了程序的简洁度和复用率。在文件的打开关闭和数据库的连接断开等场景中，可以确保用过的资源得到迅速释放，使程序安全性更高。</p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>上下文管理器</tag>
      </tags>
  </entry>
  <entry>
    <title>基于docker+grafana+influxdb的性能监控系统搭建</title>
    <url>/posts/59d444a5.html</url>
    <content><![CDATA[<p>之前压测一直用的是jmeter自带的聚合报告来分析结果，但是对tps,qps等性能指标进行页面可视化显示效果不是很好，so，引入了grafana+influxdb，会有一个非常炫酷的可视化页面和全面的视图分析。</p>
<p>在搭建之前，先简单了解下grafana和influxdb是什么。</p>
<h2 id="influxdb简介"><a href="#influxdb简介" class="headerlink" title="influxdb简介"></a>influxdb简介</h2><p><a href="https://github.com/influxdata/influxdb">Influx DB</a>是一个开源时间序列数据库。那么问题来了，什么叫时序数据库？想详细了解可以查看这篇<a href="https://www.sohu.com/a/237660940_130419">文章</a>。</p>
<p><strong>influxdb有三个特性</strong>：</p>
<ol>
<li>Time Series （时间序列）：可以使用与时间有关的相关聚合函数</li>
<li>Metrics（度量）：可以实时对大量数据进行计算</li>
<li>Eevents（事件）：它支持任意的事件数据</li>
</ol>
<p><strong>它的核心概念</strong>（以mysql作为参照）：</p>
<ol>
<li>database相当于mysql中的database</li>
<li>measurement相当于mysql中的表</li>
<li>point相当于mysql中的行</li>
<li>tag相当于mysql中的索引，只支持字符串类型</li>
<li>field相当于mysql中的列，支持多种类型</li>
<li>retention policy保存策略，这是influxdb特有的属性，rp指定数据在influxdb中的保存时间，时间已过，influxdb会自动清除数据。influxdb不支持修改语句，虽然有删除语句，但是不建议使用</li>
<li>continuous queries 特色功能之一，相当于定时任务。</li>
</ol>
<p><strong>一些基本语法</strong>（其实和mysql差不多，注意table是measurement）：</p>
<ol>
<li>create database “db_name” #创建数据库 </li>
<li>show databases #显示所有的数据库 </li>
<li>drop database “db_name” #删除数据库 </li>
<li>use db_name #使用数据库 </li>
<li>show measurements #显示该数据库中所有的表 </li>
<li>insert test,host=127.0.0.1,monitor_name=test count=1 #创建表，直接在插入数据的时候指定表名 </li>
<li>drop measurement “measurement_name”  #删除表 </li>
<li>select * from access_list  #查询access_list表</li>
</ol>
<p><strong><em>它具有的以上特点让其与数据实时监控形成完美契合。成为开发监控系统的首选数据库之一。</em></strong></p>
<h2 id="grafana简介"><a href="#grafana简介" class="headerlink" title="grafana简介"></a>grafana简介</h2><p><a href="https://github.com/grafana/grafana">grafana</a>是一款采用 go 语言编写的开源应用，主要用于大规模指标数据的可视化展现，是网络架构和应用分析中最流行的<strong>时序数据展示</strong>工具，目前已经支持绝大部分常用的时序数据库。</p>
<ol>
<li>面板：包含图形、singlestat 、表、热图、提醒清单，文本、仪表板列表</li>
<li>仪表板功能：变量（variables）、注释（animation）、文件夹、播放列表、搜索、分享、时间范围、进出口、脚本仪表板，JSON模型等</li>
<li>数据源：Graphite、Promthus、influxDB、mysql等</li>
<li>警报：引擎规则、度量、通知</li>
</ol>
<p>更多页面详细介绍，可以查看<a href="https://grafana.com/docs/grafana/latest/getting-started">官方文档</a>。</p>
<p>话不多说，下面我们开始部署~</p>
<h2 id="部署流程"><a href="#部署流程" class="headerlink" title="部署流程"></a>部署流程</h2><p>我们采用方便快速的docker进行部署。</p>
<h3 id="docker分别拉取grafana和influxdb镜像"><a href="#docker分别拉取grafana和influxdb镜像" class="headerlink" title="docker分别拉取grafana和influxdb镜像"></a>docker分别拉取grafana和influxdb镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull influxdb:1.7.10</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull grafana:6.6.2</span><br></pre></td></tr></table></figure>

<h3 id="创建一个自定义网络，将两个容器加入到这个网络中，那么这两个容器就能通过名字互相通信"><a href="#创建一个自定义网络，将两个容器加入到这个网络中，那么这两个容器就能通过名字互相通信" class="headerlink" title="创建一个自定义网络，将两个容器加入到这个网络中，那么这两个容器就能通过名字互相通信"></a>创建一个自定义网络，将两个容器加入到这个网络中，那么这两个容器就能通过名字互相通信</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network create grafana</span><br></pre></td></tr></table></figure>

<h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name=influxdb --network grafana -p 8086:8086 -v   <span class="variable">$&#123;PWD&#125;</span>/influxdb/:/var/liv/influxdb/ influxdb:1.7.10</span><br></pre></td></tr></table></figure>

<p><code>$&#123;PWD&#125;/influxdb/:/var/liv/influxdb/</code>将容器里/var/liv/influxdb/目录下挂载到宿主机的${PWD}/influxdb/的目录下</p>
<h3 id="进入influxdb容器内，创建一个数据库"><a href="#进入influxdb容器内，创建一个数据库" class="headerlink" title="进入influxdb容器内，创建一个数据库"></a>进入influxdb容器内，创建一个数据库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it influxdb influx</span><br><span class="line"><span class="comment"># 进入容器后，创建一个名为jmeter的数据库</span></span><br><span class="line">create database jmeter;</span><br></pre></td></tr></table></figure>

<h3 id="查看两个容器已经启动"><a href="#查看两个容器已经启动" class="headerlink" title="查看两个容器已经启动"></a>查看两个容器已经启动</h3><p><img src= "/img/loading.gif" data-lazy-src="/posts/59d444a5/image-20200825145515315.png"></p>
<h3 id="登录grafana网站进行配置-默认账号密码为admin-admin"><a href="#登录grafana网站进行配置-默认账号密码为admin-admin" class="headerlink" title="登录grafana网站进行配置(默认账号密码为admin,admin)"></a>登录grafana网站进行配置(默认账号密码为admin,admin)</h3><p><img src= "/img/loading.gif" data-lazy-src="/posts/59d444a5/image-20200825104727119.png"></p>
<h3 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h3><p><img src= "/img/loading.gif" data-lazy-src="/posts/59d444a5/image-20200825104813179.png"></p>
<p><strong><em>jmeter支持两种:graphite和influxdb</em></strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="/posts/59d444a5/image-20200825104934731.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="/posts/59d444a5/image-20200825105006045.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="/posts/59d444a5/image-20200825105025396.png"></p>
<p><strong><em>数据同步时间5秒，jmeter隔5秒写入数据到db中，这里设置grafana间隔5秒读取db中的数据。</em></strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="/posts/59d444a5/image-20200825105038733.png"></p>
<h3 id="面板配置"><a href="#面板配置" class="headerlink" title="面板配置"></a>面板配置</h3><p><img src= "/img/loading.gif" data-lazy-src="/posts/59d444a5/image-20200825145131270.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="/posts/59d444a5/image-20200825145204904.png"></p>
<p><strong><em>导入jmeter的面板地址： <a href="https://grafana.com/grafana/dashboards/5496">https://grafana.com/grafana/dashboards/5496</a></em></strong></p>
<p><strong><em>也可以下载后导入json文件。</em></strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="/posts/59d444a5/image-20200825105457833.png"></p>
<h3 id="jmeter配置"><a href="#jmeter配置" class="headerlink" title="jmeter配置"></a>jmeter配置</h3><p><img src= "/img/loading.gif" data-lazy-src="/posts/59d444a5/image-20200825105610185.png"></p>
<h3 id="配置完成，发起接口请求即可在grafana实时显示接口相关图表"><a href="#配置完成，发起接口请求即可在grafana实时显示接口相关图表" class="headerlink" title="配置完成，发起接口请求即可在grafana实时显示接口相关图表"></a>配置完成，发起接口请求即可在grafana实时显示接口相关图表</h3><h2 id="数据流转"><a href="#数据流转" class="headerlink" title="数据流转"></a>数据流转</h2><p>最后，我们来捋一捋，从jmeter开始发起请求到最后在grafana上的数据展示，响应数据是如何进行流转的。</p>
<h3 id="jmeter"><a href="#jmeter" class="headerlink" title="jmeter"></a>jmeter</h3><p>jmeter使用命令行发起接口请求后，会产生一个**.jtl**的文件，里面记录着每个请求的一些线程数、响应码、响应时间等信息。</p>
<p><img src= "/img/loading.gif" data-lazy-src="/posts/59d444a5/image-20200825112742837.png"></p>
<h3 id="influxdb"><a href="#influxdb" class="headerlink" title="influxdb"></a>influxdb</h3><p>在jmeter中添加了后端监听器，并选择了通过inlufxdb实现后端监听，因此，步骤1中的响应数据，会写入到influxdb的数据库中。</p>
<p><img src= "/img/loading.gif" data-lazy-src="/posts/59d444a5/image-20200825113234453.png"></p>
<p>进入influxdb容器内，查看数据</p>
<p><img src= "/img/loading.gif" data-lazy-src="/posts/59d444a5/image-20200825113841230.png"></p>
<p>使用<code>select * from jmeter</code>查看数据</p>
<p><img src= "/img/loading.gif" data-lazy-src="/posts/59d444a5/image-20200825113901681.png"></p>
<p>记录了每个请求的详细响应信息。</p>
<h3 id="grafana"><a href="#grafana" class="headerlink" title="grafana"></a>grafana</h3><p>由于我们配置的数据源是influxdb，因此面板展示的所有数据其实都是从influxdb的<strong>jmeter</strong>这个数据库中拿的。</p>
<p><img src= "/img/loading.gif" data-lazy-src="/posts/59d444a5/image-20200825105006045.png"></p>
<p><strong>so，整个数据流转，即jmeter产生jtl—&gt;存储到influxdb—&gt;grafana从influxdb拿数据。</strong></p>
]]></content>
      <categories>
        <category>实战</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>grafana</tag>
        <tag>influxdb</tag>
      </tags>
  </entry>
  <entry>
    <title>解决pymongo时区问题</title>
    <url>/posts/cd8f63bc.html</url>
    <content><![CDATA[<h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>最近在做接口自动化框架，其中有涉及到接口返回值与MongoDB中的数据校验，所以用到了pymongo这个库。在使用过程中，踩了一个大坑：当我根据日期去筛选数据的时候，发现接口返回的数据量和mongodb中记录的数据量始终不一致。</p>
<h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>先看三组数据（同一条数据）：</p>
<p>1.数据库连接工具Navicat中的记录</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;_id&quot;</span>: ObjectId(<span class="string">&quot;5f646902ee75270c044f15d2&quot;</span>),</span><br><span class="line">    <span class="attr">&quot;Version&quot;</span>: <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;TypeName&quot;</span>: <span class="string">&quot;运行&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;HappenTime&quot;</span>: ISODate(<span class="string">&quot;2020-03-18T07:55:03.605Z&quot;</span>),</span><br><span class="line">    <span class="attr">&quot;AppName&quot;</span>: <span class="string">&quot;vipservermailG1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;AppFriendlyName&quot;</span>: <span class="string">&quot;邮件服务&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.数据库连接工具MongoDB Compass中的记录</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;    </span><br><span class="line">    <span class="attr">&quot;_id&quot;</span>:<span class="string">&quot;5f646902ee75270c044f15d2&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;Version&quot;</span>:<span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;TypeName&quot;</span>:<span class="string">&quot;运行&quot;</span></span><br><span class="line">     <span class="string">&quot;HappenTime&quot;</span>:<span class="number">2020</span><span class="number">-03</span><span class="number">-18</span> <span class="number">15</span>:<span class="number">55</span>:<span class="number">03.605</span>,</span><br><span class="line">     <span class="attr">&quot;AppName&quot;</span>:<span class="string">&quot;vipservermailG1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;AppFriendlyName&quot;</span>:<span class="string">&quot;邮件服务&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.通过pymongo查出的数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&#x27;_id&#x27;</span>: ObjectId(<span class="string">&#x27;5f646902ee75270c044f15d2&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;Version&#x27;</span>: <span class="string">&#x27;1.0&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;TypeName&#x27;</span>: <span class="string">&#x27;运行&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;HappenTime&#x27;</span>: datetime.datetime(<span class="number">2020</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">7</span>, <span class="number">55</span>, <span class="number">3</span>, <span class="number">605000</span>), </span><br><span class="line">    <span class="string">&#x27;AppName&#x27;</span>: <span class="string">&#x27;vipservermailG1&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;AppFriendlyName&#x27;</span>: <span class="string">&#x27;邮件服务&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我发现同一条数据，在两个不同的数据库连接工具中日期”HappenTime”居然不一样，这个ISODate是什么鬼？查阅一番资料后才搞明白，原来mongo中的date类型以UTC（Coordinated Universal Time）存储，即格林尼治标准时间，而中国是在东八区，所以系统时间是加了时区的，即UTC+0800时间，<strong>两者正好相差8个小时</strong>。</p>
<blockquote>
<p>“2020-03-18T07:55:03.605Z”这种带T带Z的时间即为ISODate，它定义了互联网上日期/时间的偏移量表示。</p>
<p>同一时刻，不同时区的表示方法：</p>
<p>UTC时间：2020-03-18T07:55:03.605Z</p>
<p>CST时间（即东八区北京时间）：2020-03-18T07:55:03.605+08:00</p>
</blockquote>
<p>在接口查询数据库时，是以系统时间去查询的，然而从上面第三组数据可以看出，在pymongo去查询数据时，会将ISODate转化为Python的datetime.datetime对象，时间仍然是UTC时间，即没有加时区。所以才会出现两边数据不一致的情况。</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>在搞懂问题根本原因后，那么解决方法也就非常明确了，在查询数据库时需要加上时区，两边时间保证一致即可。</p>
<p>pymongo也提供了非常简便地加时区的方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">import</span> pytz</span><br><span class="line"></span><br><span class="line">tzinfo = pytz.timezone(<span class="string">&#x27;Asia/Shanghai&#x27;</span>) <span class="comment"># 时区</span></span><br><span class="line">client = pymongo.MongoClient(</span><br><span class="line">    host=<span class="string">&#x27;1.1.1.1&#x27;</span>, </span><br><span class="line">    port=<span class="number">10</span>, </span><br><span class="line">    username=<span class="string">&#x27;admin&#x27;</span>, </span><br><span class="line">    password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    tz_aware=<span class="literal">True</span>, <span class="comment"># 设置为True</span></span><br><span class="line">    tzinfo=tzinfo  <span class="comment"># 传入时区信息</span></span><br><span class="line">)</span><br><span class="line">db = client[<span class="string">&#x27;log&#x27;</span>]</span><br><span class="line">collection = db[<span class="string">&#x27;systemruning&#x27;</span>]</span><br><span class="line">data = collection.find(&#123;<span class="string">&#x27;AppName&#x27;</span>:<span class="string">&#x27;vipservermailG1&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>再次查询时，时间已变为东八区时间。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&#x27;_id&#x27;</span>: ObjectId(<span class="string">&#x27;5f646902ee75270c044f15d2&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;Version&#x27;</span>: <span class="string">&#x27;1.0&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;TypeName&#x27;</span>: <span class="string">&#x27;运行&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;HappenTime&#x27;</span>: datetime.datetime(<span class="number">2020</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">15</span>, <span class="number">55</span>, <span class="number">3</span>, <span class="number">605000</span>),  <span class="comment"># 加了8小时</span></span><br><span class="line">    <span class="string">&#x27;AppName&#x27;</span>: <span class="string">&#x27;vipservermailG1&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;AppFriendlyName&#x27;</span>: <span class="string">&#x27;邮件服务&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ok，问题完美解决，不过既然涉及到了时区相关的问题，就顺便补一下这方面的知识，从源头上彻底了解一下时间的相关概念，以后再遇到类似的问题会游刃有余。</p>
<h3 id="GMT"><a href="#GMT" class="headerlink" title="GMT"></a>GMT</h3><p>GMT（Greenwich Mean Time）， 格林威治平时（也称格林威治时间）。</p>
<p>它规定太阳每天经过位于英国伦敦郊区的皇家格林威治天文台的时间为中午12点。</p>
<h3 id="UTC"><a href="#UTC" class="headerlink" title="UTC"></a>UTC</h3><p>UTC（Coodinated Universal Time），协调世界时，又称世界统一时间、世界标准时间、国际协调时间。由于英文（CUT）和法文（TUC）的缩写不同，作为妥协，简称UTC。</p>
<p>UTC 是现在全球通用的时间标准，全球各地都同意将各自的时间进行同步协调。UTC 时间是经过平均太阳时（以格林威治时间GMT为准）、地轴运动修正后的新时标以及以秒为单位的国际原子时所综合精算而成。</p>
<h3 id="UTC-vs-GMT"><a href="#UTC-vs-GMT" class="headerlink" title="UTC vs GMT"></a>UTC vs GMT</h3><p>GMT是前世界标准时，UTC是现世界标准时。</p>
<p>UTC 比 GMT更精准，以原子时计时，适应现代社会的精确计时。</p>
<p>但在不需要精确到秒的情况下，二者可以视为等同。</p>
<p>每年格林尼治天文台会发调时信息，基于UTC。</p>
<h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><p>时间戳是一个数字，定义为格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总秒数。<strong>注意，同一时刻，不同时区获得的时间戳是相同的。</strong>以前很多用来记录时间的字段，在数据库中往往不会存储为Datetime类型，而是直接存储为无符号整形，存放时间戳的值。</p>
<p>Python获取时间戳的代码为</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">import time</span><br><span class="line">int(time.time())</span><br></pre></td></tr></table></figure>

<h3 id="本地时间"><a href="#本地时间" class="headerlink" title="本地时间"></a>本地时间</h3><p>当前时区的本地时间</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">import datetime</span><br><span class="line">datetime.datetime.now()</span><br></pre></td></tr></table></figure>

<p>上面的输出值为</p>
<blockquote>
<p>2020-03-20 18:50:03.23743</p>
</blockquote>
<h3 id="标准时间"><a href="#标准时间" class="headerlink" title="标准时间"></a>标准时间</h3><p>本地时间只包括当前的时间，不包含任何时区信息。同一时刻，东八区的本地时间比零时区的本地时间快了8个小时。在不同时区之间交换时间数据，除了用纯数字的时间戳，还有一种更方便人类阅读的表示方式：标准时间的偏移量表示方法。</p>
<p>RFC3339详细定义了互联网上日期/时间的偏移量表示：</p>
<blockquote>
<p>2020-03-20T00:00:00.00Z</p>
</blockquote>
<p>这个代表了UTC时间的2017年12月08日零时</p>
<blockquote>
<p>2020-03-20T00:08:00.00+08:00</p>
</blockquote>
<p>这个代表了同一时刻的，东八区北京时间（CST）表示的方法</p>
<p>上面两个时间的时间戳是等价的。两个的区别，就是在本地时间后面增加了时区信息。Z表示零时区。+08:00表示UTC时间增加8小时。</p>
<p>这种表示方式容易让人疑惑的点是从标准时间换算UTC时间。以CST转换UTC为例，没有看文档的情况下，根据 +08:00 的结尾，很容易根据直觉在本地时间再加上8小时。正确的计算方法是本地时间减去多增加的8小时。+08:00减去8小时才是UTC时间，-08:00加上8小时才是UTC时间。</p>
<h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h3><p><strong>champyin</strong>：<a href="%5Bhttps://champyin.com/2020/04/24/%E5%BD%BB%E5%BA%95%E5%BC%84%E6%87%82GMT%E3%80%81UTC%E3%80%81%E6%97%B6%E5%8C%BA%E5%92%8C%E5%A4%8F%E4%BB%A4%E6%97%B6%5D(https://link.zhihu.com/?target=https://champyin.com/2020/04/24/%E5%BD%BB%E5%BA%95%E5%BC%84%E6%87%82GMT%E3%80%81UTC%E3%80%81%E6%97%B6%E5%8C%BA%E5%92%8C%E5%A4%8F%E4%BB%A4%E6%97%B6)">彻底弄懂GMT、UTC、时区和夏令时</a></p>
<p><strong>柳纯</strong>：<a href="https://ldsink.com/articles/date-and-time-on-the-internet/">互联网上的日期和时间</a></p>
]]></content>
      <categories>
        <category>踩坑</category>
        <category>总结</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
        <tag>pymongo</tag>
      </tags>
  </entry>
  <entry>
    <title>docker部署django项目</title>
    <url>/posts/5cd8a7d.html</url>
    <content><![CDATA[<h3 id="部署之前"><a href="#部署之前" class="headerlink" title="部署之前"></a>部署之前</h3><p>当我们在本地开发完一个<code>django</code>项目后，如果需要供其他人来访问，我们则必须将其部署到服务器上（一般是<code>linux</code>），而要提供外部服务，则需要服务器能提供<strong>静态文件服务</strong>、<strong>动态资源处理</strong>等服务，而在我们调试阶段使用的<code>runserver</code>，则无法提供这些功能。</p>
<p>因此，我们需要静态文件服务器(nginx)以及应用服务器（gunicorn、uwsgi服务器）。</p>
<p>这里以<code>nginx</code>，<code>gunicorn</code>为例。</p>
<p>先看一张关系图：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/img/%E6%9E%B6%E6%9E%84%E5%9B%BE.png"></p>
<p>如图所示，当浏览器发起一个请求，<strong>nginx</strong>服务器会先判断，该请求是否需要静态文件(即<code>html</code>、<code>css</code>、<code>js</code>等文件)，如果需要就直接返回给前端静态文件，如果还需要一些动态生成的数据，那么这个时候<strong>nginx</strong>表示它自己处理不了了，但是它知道<strong>gunicorn</strong>服务器能处理，此时，便会将该请求<strong>反向代理</strong>到<strong>gunicorn</strong>应用服务器上，<code>gunicorn</code>收到该请求后，会将其请求报文（请求头、请求行、请求体）封装好，发送给<strong>django</strong>框架来处理，<code>django</code>拿到这个请求后，将其封装为<code>HttpRequest</code>类，然后去查找路由表，匹配上路由后，调用对应的视图，再根据请求方法，调用对应的实例方法，来完成对数据的处理。数据处理完成后，将响应结果返回给<strong>gunicorn</strong>，<strong>gunicorn</strong>拿到响应结果将其封装（响应头、响应行、响应体）发送给<strong>nginx</strong>，最后在由<strong>nginx</strong>返回到前端展示。</p>
<p>因此，我们需要在linux服务器上安装配置<strong>gunicorn</strong>、<strong>nginx</strong>，这里我们采用<code>docker</code>部署的方式。</p>
<h3 id="部署准备"><a href="#部署准备" class="headerlink" title="部署准备"></a>部署准备</h3><p>首先，我们的目标是要准备3个容器：</p>
<ul>
<li>nginx容器：提供前、后端（在线接口文档平台）静态文件服务以及反向代理到应用服务器。</li>
<li>gunicorn容器：应用服务器，后端代码需要放在容器中。</li>
<li>mysql容器：数据库。</li>
</ul>
<h4 id="nginx容器"><a href="#nginx容器" class="headerlink" title="nginx容器"></a>nginx容器</h4><h5 id="1、修改前端代码"><a href="#1、修改前端代码" class="headerlink" title="1、修改前端代码"></a>1、修改前端代码</h5><p><em>api.js</em></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/img/66.png"></p>
<p>将后端地址改为服务器地址。</p>
<h5 id="2、生成静态文件"><a href="#2、生成静态文件" class="headerlink" title="2、生成静态文件"></a>2、生成静态文件</h5><p>执行命令<code>npm run build</code>，将vue的组件转换为静态js文件，执行之后，会生成一个<code>dist</code>目录：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/img/67.png"></p>
<p>将该目录拷贝出并放到<code>nginx_docker</code>文件夹下（本地新建一个）。</p>
<h5 id="3、修改后端代码"><a href="#3、修改后端代码" class="headerlink" title="3、修改后端代码"></a>3、修改后端代码</h5><p><em>settings.py</em></p>
<p>关闭调试模式</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/img/1.jpg"></p>
<p>修改数据库连接信息，将数据库名改为mysql容器的名字<code>db</code>（因为容器在桥接模式下，可以互相通过名称进行通信）。</p>
<p><img src= "/img/loading.gif" data-lazy-src="/posts/5cd8a7d/Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210224172713452.png" alt="image-20210224172713452"></p>
<p>执行<code>pip freeze &gt; requirements.txt</code>将项目依赖包导出。</p>
<h5 id="4、收集静态文件"><a href="#4、收集静态文件" class="headerlink" title="4、收集静态文件"></a>4、收集静态文件</h5><p>由于需要提供在线接口文档平台，所以还需要收集后端的静态文件。</p>
<p>在项目根目录下创建一个<code>static</code>目录，然后在<code>setting.py</code>中指明static文件配置：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/img/69.png"></p>
<p>然后命令行执行<code>python manage.py collectstatic</code>收集静态文件，收集成功后，将<code>static</code>目录下的<code>rest_framwork</code>拷贝到<strong>步骤2</strong>中生成的<code>dist</code>目录下的<code>static</code>目录下，如图：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/img/70.png"></p>
<h5 id="5、修改nginx配置文件"><a href="#5、修改nginx配置文件" class="headerlink" title="5、修改nginx配置文件"></a>5、修改nginx配置文件</h5><p>首先修改<code>nginx</code>业务配置</p>
<p><em>default.conf</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 定义反向代理服务器</span><br><span class="line">upstream app_server &#123;</span><br><span class="line">    server django_app:8000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">         # 提供后端服务</span><br><span class="line">         listen  8000;</span><br><span class="line">         # 指定后端接口api的域名</span><br><span class="line">         server_name 121.5.140.33;</span><br><span class="line">         </span><br><span class="line">         # 接口文件平台</span><br><span class="line">         # 指定&#x2F;static&#x2F;路由</span><br><span class="line">         location &#x2F;static &#123;</span><br><span class="line">            alias &#x2F;var&#x2F;www&#x2F;html&#x2F;static;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        # 指定路由条目</span><br><span class="line">         location &#x2F; &#123;</span><br><span class="line">            try_files $uri @proxy_to_app;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location @proxy_to_app &#123;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">            proxy_set_header Host $http_host;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;app_server;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    # 提供前端服务</span><br><span class="line">    # 指定监听的端口</span><br><span class="line">    listen       80;</span><br><span class="line">    # 指定使用的域名</span><br><span class="line">    server_name  121.5.140.33;</span><br><span class="line"></span><br><span class="line">    # 指定静态文件的根路径</span><br><span class="line">    root   &#x2F;var&#x2F;www&#x2F;html;</span><br><span class="line"></span><br><span class="line">    # 指定日志文件</span><br><span class="line">    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;</span><br><span class="line">    error_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;</span><br><span class="line"></span><br><span class="line">    # 指定路由条目</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        try_files $uri $uri&#x2F; &#x2F;index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page  404              &#x2F;404.html;</span><br><span class="line">    location &#x3D; &#x2F;404.html &#123;</span><br><span class="line">        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">    location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ &#x2F;\.ht &#123;</span><br><span class="line">        deny  all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了保证<code>nginx</code>服务挂掉后能自动重启，所以使用了守护进程<code>supervisord</code>，在<code>supervisord.conf</code>文件中添加监听<code>nginx</code>服务的配置。</p>
<p><em>supervisord.conf</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[unix_http_server]</span><br><span class="line">file&#x3D;&#x2F;tmp&#x2F;supervisor.sock   ; (the path to the socket file)</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile&#x3D;&#x2F;tmp&#x2F;supervisord.log ; (main log file;default $CWD&#x2F;supervisord.log)</span><br><span class="line">logfile_maxbytes&#x3D;5MB        ; (max main logfile bytes b4 rotation;default 50MB)</span><br><span class="line">pidfile&#x3D;&#x2F;tmp&#x2F;supervisord.pid ; (supervisord pidfile;default supervisord.pid)</span><br><span class="line">user&#x3D;root</span><br><span class="line">nodaemon&#x3D;true</span><br><span class="line">stdout_logfile&#x3D;&#x2F;dev&#x2F;stdout</span><br><span class="line">stdout_logfile_maxbytes&#x3D;0</span><br><span class="line"></span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.rpcinterface_factory&#x3D;supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl&#x3D;unix:&#x2F;&#x2F;&#x2F;tmp&#x2F;supervisor.sock ; use a unix:&#x2F;&#x2F; URL  for a unix socket</span><br><span class="line"></span><br><span class="line">[program:nginx]</span><br><span class="line">command&#x3D;&#x2F;usr&#x2F;sbin&#x2F;nginx</span><br><span class="line">stdout_logfile&#x3D;&#x2F;dev&#x2F;stdout</span><br><span class="line">stdout_logfile_maxbytes&#x3D;0</span><br><span class="line">stdout_events_enabled&#x3D;true</span><br><span class="line">stderr_events_enabled&#x3D;true</span><br></pre></td></tr></table></figure>

<p>nginx主配置文件<em>nginx.conf</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;</span><br><span class="line">pid        &#x2F;run&#x2F;nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       &#x2F;etc&#x2F;nginx&#x2F;mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line"></span><br><span class="line">    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    index   index.html index.htm;</span><br><span class="line">    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将上述三个配置文件放到一个文件夹<code>configs</code>中（在本地新建一个）。</p>
<h5 id="6、编写Dockerfile"><a href="#6、编写Dockerfile" class="headerlink" title="6、编写Dockerfile"></a>6、编写Dockerfile</h5><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/img/71.png"></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:latest</span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">&#x27;AcientOne&#x27;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> description=<span class="string">&#x27;Install nginx&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i <span class="string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apk/repositories &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk update &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk add --allow-untrusted ca-certificates bash curl iputils supervisor nginx &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk upgrade &amp;&amp; \ </span></span><br><span class="line">    rm -rf /var/cache/apk/* &amp;&amp; \</span><br><span class="line">    mkdir /tmp/nginx &amp;&amp; \</span><br><span class="line">    mkdir -p /var/www/html &amp;&amp; \</span><br><span class="line">    chown -R nginx:nginx /var/www/html</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> dist/ /var/www/html/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> configs/default.conf /etc/nginx/conf.d/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> configs/nginx.conf /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> configs/supervisord.conf /etc/supervisord.conf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /var/<span class="built_in">log</span>/nginx/</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span> <span class="number">8000</span> <span class="number">443</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;supervisord&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>最后，nginx容器构建所需文件目录如下：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/img/72.png"></p>
<h4 id="gunicorn容器"><a href="#gunicorn容器" class="headerlink" title="gunicorn容器"></a>gunicorn容器</h4><h5 id="1、编写gunicorn-config-py配置文件"><a href="#1、编写gunicorn-config-py配置文件" class="headerlink" title="1、编写gunicorn_config.py配置文件"></a>1、编写gunicorn_config.py配置文件</h5><p><em>gunicorn_config.py</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 应用服务器监听的端口</span></span><br><span class="line">bind = <span class="string">&#x27;0.0.0.0:8000&#x27;</span></span><br><span class="line"><span class="comment"># 修改后端代码后会立即刷新</span></span><br><span class="line">reload = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 注意这里/usr/src/app/logs/目录是和Dockerfile中映射出去的目录有依赖的</span></span><br><span class="line">pidfile = <span class="string">&#x27;/usr/src/app/logs/gunicorn.pid&#x27;</span></span><br><span class="line">accesslog = <span class="string">&#x27;/usr/src/app/logs/gunicorn_acess.log&#x27;</span></span><br><span class="line">errorlog = <span class="string">&#x27;/usr/src/app/logs/gunicorn_error.log&#x27;</span></span><br></pre></td></tr></table></figure>

<h5 id="2、编写启动脚本docker-entrypoint-sh"><a href="#2、编写启动脚本docker-entrypoint-sh" class="headerlink" title="2、编写启动脚本docker-entrypoint.sh"></a>2、编写启动脚本docker-entrypoint.sh</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在<span class="built_in">set</span> -e之后出现的代码，一旦出现了返回值非零，整个脚本就会立即退出</span></span><br><span class="line">set -e</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行迁移</span></span><br><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建超级用户</span></span><br><span class="line">echo &quot;from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_superuser(&#x27;test&#x27;, &#x27;test@qq.com&#x27;, &#x27;test123&#x27;)&quot; | python manage.py shell &amp;&gt; /dev/null</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动gunicorn服务，指定gunicorn配置文件和后端项目中的wsgi文件</span></span><br><span class="line">/usr/local/bin/gunicorn -c /usr/src/app/configs/gunicorn_config.py ancient_test.wsgi</span><br></pre></td></tr></table></figure>

<h5 id="3、编写Dockerfile"><a href="#3、编写Dockerfile" class="headerlink" title="3、编写Dockerfile"></a>3、编写Dockerfile</h5><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3</span>-alpine</span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">&#x27;AncientOne&#x27;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> description=<span class="string">&#x27;deploying django project&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到容器/usr/src/app目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/app</span></span><br><span class="line"><span class="comment"># 将后端项目代码拷贝到容器/usr/src/app/ancient_test/目录下</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./ancient_test ./ancient_test/</span></span><br><span class="line"><span class="comment"># 将gunicorn配置文件拷贝到容器/usr/src/app/configs/目录下</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./gunicorn_config.py ./configs/</span></span><br><span class="line"><span class="comment"># 将启动脚本拷贝到容器/usr/src/app/docker-entrypoint.sh文件中</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./docker-entrypoint.sh /docker-entrypoint.sh</span></span><br><span class="line"><span class="comment"># 需要安装Python依赖包，切换到/usr/src/app/ancient_test/后端项目根目录下</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> ancient_test/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i <span class="string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apk/repositories &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk update &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="comment"># 安装mysqlclient必须安装mariadb-connector</span></span></span><br><span class="line">    apk <span class="keyword">add</span><span class="bash"> --allow-untrusted build-base mariadb-connector-c-dev curl iputils &amp;&amp; \</span></span><br><span class="line"><span class="bash">    pip install --no-cache-dir -i https://pypi.douban.com/simple -r requirements.txt &amp;&amp; \</span></span><br><span class="line"><span class="bash">    pip install -i https://pypi.douban.com/simple gunicorn &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk add ca-certificates bash &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk update &amp;&amp; apk upgrade &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="comment"># 删除安装包缓存文件</span></span></span><br><span class="line">    rm -rf /var/cache/apk/* &amp;&amp; \</span><br><span class="line">    <span class="comment"># 修改启动脚本权限</span></span><br><span class="line">    chmod u+x /docker-entrypoint.sh</span><br><span class="line"><span class="comment"># 映射出日志目录和项目目录</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /usr/src/app/logs/</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /usr/src/app/ancient_test/</span></span><br><span class="line"><span class="comment"># 指定映射端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br><span class="line"><span class="comment"># 容器启动后，运行启动脚本来创建超级用户和启动gunicorn服务</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;/docker-entrypoint.sh&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>最后，<code>gunicorn</code>容器构建所需的文件如下：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/img/74.png"></p>
<p>然后将<em>DjangoDeploy</em>目录上传到linux服务器上，准备部署。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/img/75.png"></p>
<h3 id="docker单容器启动"><a href="#docker单容器启动" class="headerlink" title="docker单容器启动"></a>docker单容器启动</h3><p>在所有容器构建前，先要创建一个容器桥接网络，让三个容器之间能互相通信。</p>
<p>为什么需要互相通信？</p>
<p>因为三个容器之间的关系是：前端访问–&gt;nginx容器提供该服务（静态文件）–&gt;如果需要数据，则反向代理给gunicorn服务–&gt;gunicorn服务从数据库服务器拿数据。</p>
<p>而由于是桥接网络，所以三个容器之间可以通过容器名称互相访问，这里重命名三个容器的名称为：</p>
<ul>
<li>nginx容器名：web</li>
<li>gunicore容器名：django_app</li>
<li>mysql容器名:db</li>
</ul>
<p><strong>需要注意的是，容器之间有依赖关系，所以容器的启动是有顺序的，mysql容器-&gt;gunicore容器-&gt;nginx容器。</strong></p>
<p>1、执行命令创建网络，网络名为：django_app_net。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network create django_app_net</span><br></pre></td></tr></table></figure>

<p>2、启动mysql容器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name db -v mysql_db:/var/lib/mysql --restart=always -e MYSQL_ROOT_PASSWORD=xxxx -e MYSQL_DATABASE=ancient -d --network django_app_net mariadb --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure>

<p>注：没有mariadb镜像会在容器启动前自动拉取。</p>
<p>若要进入数据库容器内部，执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it --network django_app_net --rm mariadb mysql -hdb -uxx -pxx -A ancient</span><br></pre></td></tr></table></figure>

<p>3、构建gunicorn镜像</p>
<p>先进入gunicorn的<code>Dockerfile</code>所在目录下，然后执行构建命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t ancientone/django_app:v1 .</span><br></pre></td></tr></table></figure>

<p>4、构建nginx镜像</p>
<p>先进入nginx的<code>Dockerfile</code>所在目录下，然后执行构建命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t ancientone/front_end:v1 .</span><br></pre></td></tr></table></figure>

<p>5、启动gunicorn容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name django_app -v logs:/usr/src/app/logs/ -v django_code:/usr/src/app/ancient_test/ --restart=always -d --network django_app_net -p 8080:8000 ancientone/django_app:v1</span><br></pre></td></tr></table></figure>

<p>6、启动nginx容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name web -v logs:/var/<span class="built_in">log</span>/nginx/ -p 8444:80 -p 8440:8000 --restart=always -d --network django_app_net ancientone/front_end:v1</span><br></pre></td></tr></table></figure>

<p>容器启动完成后，分别访问前后端，验证是否正常。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/img/3.jpg"></p>
<p>如图，表示前后端已能正常提供访问。</p>
<h3 id="docker-compose批量启动"><a href="#docker-compose批量启动" class="headerlink" title="docker-compose批量启动"></a>docker-compose批量启动</h3><p>上面的容器启动方法，需要一个个的去启动，略显繁琐，有没有办法能批量启动呢？当然可以，使用<code>docker-compose</code>。</p>
<h4 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h4><p>分别执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.28.1/docker-compose-(uname -s) -(uname -m)&quot;</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>

<h4 id="编写docker-compose-yml"><a href="#编写docker-compose-yml" class="headerlink" title="编写docker-compose.yml"></a>编写docker-compose.yml</h4><p><em>docker-compose.yml</em></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定版本信息</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义服务（容器）</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">   <span class="comment"># 具体服务（容器）</span></span><br><span class="line">   <span class="comment"># 具体容器名为：docker-compose.yaml所在目录名小写_服务名_索引号</span></span><br><span class="line">   <span class="attr">db:</span></span><br><span class="line">     <span class="comment"># 指定镜像</span></span><br><span class="line">     <span class="attr">image:</span> <span class="string">mariadb</span></span><br><span class="line">     <span class="attr">command:</span> <span class="string">--character-set-server=utf8mb4</span> <span class="string">--collation-server=utf8mb4_unicode_ci</span></span><br><span class="line">     <span class="comment"># 指定数据持久化映射</span></span><br><span class="line">     <span class="attr">volumes:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">mysql_db:/var/lib/mysql</span></span><br><span class="line">     <span class="comment"># 容器重启策略</span></span><br><span class="line">     <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">     <span class="comment"># 指定环境变量</span></span><br><span class="line">     <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">ancient</span></span><br><span class="line">     <span class="comment"># 指定加入的网络</span></span><br><span class="line">     <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">django_app_net</span></span><br><span class="line"></span><br><span class="line">   <span class="attr">django_app:</span></span><br><span class="line">     <span class="comment"># 依赖于容器db，db正常启动后才能启动该容器</span></span><br><span class="line">     <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">     <span class="comment"># 可以使用build来指定Dockerfile所在的目录</span></span><br><span class="line">     <span class="attr">build:</span> <span class="string">./django_app_docker</span></span><br><span class="line">     <span class="comment"># 指定自动构建之后的容器名称</span></span><br><span class="line">     <span class="attr">image:</span> <span class="string">ancientone/django_app:v1</span></span><br><span class="line">     <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">     <span class="attr">volumes:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">logs:/usr/src/app/logs/</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">django_code:/usr/src/app/ancient_test/</span></span><br><span class="line">     <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">django_app_net</span></span><br><span class="line"></span><br><span class="line">   <span class="attr">web:</span></span><br><span class="line">     <span class="comment"># 依赖于容器django_app，django_app正常启动后才能启动该容器</span></span><br><span class="line">     <span class="attr">depends_on:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">django_app</span></span><br><span class="line">     <span class="attr">build:</span> <span class="string">./nginx_docker</span></span><br><span class="line">     <span class="attr">image:</span> <span class="string">ancientone/front_end:v1</span></span><br><span class="line">     <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">     <span class="comment"># 指定端口映射</span></span><br><span class="line">     <span class="attr">ports:</span></span><br><span class="line">       <span class="comment"># 用于前端</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">&quot;8444:80&quot;</span></span><br><span class="line">       <span class="comment"># 用于后端接口文档平台</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">&quot;8440:8000&quot;</span></span><br><span class="line">     <span class="attr">volumes:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">logs:/var/log/nginx/</span></span><br><span class="line">     <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">django_app_net</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定网络      </span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="comment"># 网络名</span></span><br><span class="line">  <span class="attr">django_app_net:</span></span><br><span class="line">  <span class="comment"># one_net:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定数据卷</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">    <span class="attr">mysql_db:</span></span><br><span class="line">    <span class="attr">django_code:</span></span><br><span class="line">    <span class="attr">logs:</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>将<code>docker-compose.yml</code>文件放到<code>DjangoDeploy</code>目录下，然后执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p><em>注：-d表示容器后台运行</em></p>
<p>启动后，会自动去构建镜像-启动容器，等待它自动执行完即可。</p>
<p>如果要停止所有启动的容器，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose down -v</span><br></pre></td></tr></table></figure>

<p><em>注：-v表示删除数据卷</em></p>
<h3 id="shell脚本一键启动"><a href="#shell脚本一键启动" class="headerlink" title="shell脚本一键启动"></a>shell脚本一键启动</h3><p>继续偷懒，写个shell脚本来一键启动项目。</p>
<p><em>start.sh</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Author: AncientOne</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Description: start run script</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> to project directory.</span></span><br><span class="line">PROJECT_DIR=&quot;/root/DeployDjango&quot;</span><br><span class="line"></span><br><span class="line">function start_run</span><br><span class="line">&#123;</span><br><span class="line">    cd &quot;$&#123;PROJECT_DIR&#125;&quot;</span><br><span class="line">    docker-compose up -d &amp;&gt; /dev/null</span><br><span class="line">    echo -e &quot;构建中，请等待1分钟...&quot;</span><br><span class="line">    sleep 1m &amp;&gt; /dev/null</span><br><span class="line">    echo -e &quot;开始导入测试数据&quot;</span><br><span class="line">    bash import_test_data.sh &amp;&gt; /dev/null</span><br><span class="line">    echo -e &quot;构建完成！&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function main</span><br><span class="line">&#123;</span><br><span class="line">    cd &quot;$&#123;PROJECT_DIR&#125;&quot;</span><br><span class="line">    docker ps -a | grep -E &#x27;deploydjango_.*&#x27; &amp;&gt; /dev/null</span><br><span class="line">    if [[ $? -eq 0 ]]</span><br><span class="line">    then</span><br><span class="line">        echo -e &quot;项目已经启动!&quot;</span><br><span class="line">        read -p &quot;要重启项目吗? (y/n) &quot; confirm</span><br><span class="line">        if [[ &quot;$&#123;confirm,,&#125;&quot; == &quot;n&quot; ]]; then</span><br><span class="line">            echo -e &quot;无需重启项目!\nBye!&quot;</span><br><span class="line">            exit 0</span><br><span class="line">        fi</span><br><span class="line">        echo -e &quot;准备重启项目...&quot;</span><br><span class="line"></span><br><span class="line">        # uninstalled this project</span><br><span class="line">        echo -e &quot;正在卸载项目...&quot;</span><br><span class="line">        docker-compose down &amp;&gt; /dev/null</span><br><span class="line">        echo -e &quot;正在删除数据卷...&quot;</span><br><span class="line">        docker volume rm -f `docker volume ls | awk &#x27;/deploydjango_.*/&#123;print $2&#125;&#x27;` &amp;&gt; /dev/null</span><br><span class="line">        echo -e &quot;开始重启项目...&quot;</span><br><span class="line">        start_run</span><br><span class="line">    else</span><br><span class="line">        echo -e &quot;准备启动项目...&quot;</span><br><span class="line">        start_run</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em>import_test_data.sh</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Author: AncientOne</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Description: import <span class="built_in">test</span> data into db container</span></span><br><span class="line"></span><br><span class="line">container_name=&quot;db&quot;</span><br><span class="line">new_container_name=&quot;deploydjango_$&#123;container_name&#125;_1&quot;</span><br><span class="line">db_username=&quot;root&quot;</span><br><span class="line">db_password=&quot;root&quot;</span><br><span class="line">db_name=&quot;ancient&quot;</span><br><span class="line">docker exec -i $&#123;new_container_name&#125; sh -c &quot;exec mysql -u$&#123;db_username&#125; -p&#x27;$&#123;db_password&#125;&#x27; -A $&#123;db_name&#125;&quot; &lt; $PWD/datas/01_tb_projects.sql</span><br><span class="line">docker exec -i $&#123;new_container_name&#125; sh -c &quot;exec mysql -u$&#123;db_username&#125; -p&#x27;$&#123;db_password&#125;&#x27; -A $&#123;db_name&#125;&quot; &lt; $PWD/datas/02_tb_interfaces.sql</span><br><span class="line">docker exec -i $&#123;new_container_name&#125; sh -c &quot;exec mysql -u$&#123;db_username&#125; -p&#x27;$&#123;db_password&#125;&#x27; -A $&#123;db_name&#125;&quot; &lt; $PWD/datas/03_tb_testcases.sql</span><br><span class="line">docker exec -i $&#123;new_container_name&#125; sh -c &quot;exec mysql -u$&#123;db_username&#125; -p&#x27;$&#123;db_password&#125;&#x27; -A $&#123;db_name&#125;&quot; &lt; $PWD/datas/04_tb_configures.sql</span><br><span class="line">docker exec -i $&#123;new_container_name&#125; sh -c &quot;exec mysql -u$&#123;db_username&#125; -p&#x27;$&#123;db_password&#125;&#x27; -A $&#123;db_name&#125;&quot; &lt; $PWD/datas/05_tb_testsuits.sql</span><br><span class="line">docker exec -i $&#123;new_container_name&#125; sh -c &quot;exec mysql -u$&#123;db_username&#125; -p&#x27;$&#123;db_password&#125;&#x27; -A $&#123;db_name&#125;&quot; &lt; $PWD/datas/06_tb_reports.sql</span><br><span class="line">docker exec -i $&#123;new_container_name&#125; sh -c &quot;exec mysql -u$&#123;db_username&#125; -p&#x27;$&#123;db_password&#125;&#x27; -A $&#123;db_name&#125;&quot; &lt; $PWD/datas/07_tb_debugtalks.sql</span><br><span class="line">docker exec -i $&#123;new_container_name&#125; sh -c &quot;exec mysql -u$&#123;db_username&#125; -p&#x27;$&#123;db_password&#125;&#x27; -A $&#123;db_name&#125;&quot; &lt; $PWD/datas/08_tb_envs.sql</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将上述两个脚本放到部署目录<code>Deploydjango</code>下，直接<code>sh start.sh</code>启动。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/img/4.jpg"></p>
<p>大功告成，welldone~</p>
]]></content>
      <categories>
        <category>实战</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>shell</tag>
        <tag>django</tag>
        <tag>nginx</tag>
        <tag>gunicorn</tag>
      </tags>
  </entry>
  <entry>
    <title>shell基础</title>
    <url>/posts/82c8cab7.html</url>
    <content><![CDATA[<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="head"><a href="#head" class="headerlink" title="head"></a>head</h4><p>head 命令可用于查看文件的开头部分的内容，有一个常用的参数 <strong>-n</strong> 用于显示行数，默认为 10，即显示 10 行的内容。</p>
<p>命令格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">head [参数] [文件]</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<ul>
<li>-q 隐藏文件名</li>
<li>-v 显示文件名</li>
<li>-c&lt;数目&gt; 显示字节数</li>
<li>-n&lt;行数&gt; 显示行号</li>
</ul>
<p>例</p>
<p>查看/etc/passwd 文件前10行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">head /etc/passwd</span><br></pre></td></tr></table></figure>

<p>查看/etc/passwd 文件前5行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">head -n5 /etc/passwd</span><br></pre></td></tr></table></figure>

<p>查看/etc/passwd文件前20个字节</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">head -c20 /etc/passwd</span><br></pre></td></tr></table></figure>

<h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h4><p>tail 命令可用于查看文件的末尾内容,有一个常用的参数 <strong>-n</strong> 用于显示行数，默认为 10，即显示 10 行的内容。</p>
<p>命令格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail [参数] [文件]</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<ul>
<li>-f 循环读取</li>
<li>-q 不显示处理信息</li>
<li>-v 显示详细的处理信息</li>
<li>-c&lt;数目&gt; 显示的字节数</li>
<li>-n&lt;行数&gt; 显示文件的尾部 n 行内容</li>
<li>–pid=PID 与-f合用,表示在进程ID,PID死掉之后结束</li>
<li>-q, –quiet, –silent 从不输出给出文件名的首部</li>
<li>-s, –sleep-interval=S 与-f合用,表示在每次反复的间隔休眠S秒</li>
</ul>
<p>例</p>
<p>查看test.log文件后10行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail test.log</span><br></pre></td></tr></table></figure>

<p>查看test.log文件后5行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -n5 test.log</span><br></pre></td></tr></table></figure>

<p>查看test.log的实时增长情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -f test.log</span><br></pre></td></tr></table></figure>

<p>此命令显示test.log 文件的最后 10 行。当将某些行添加至 test.log 文件时，tail 命令会继续显示这些行。</p>
<h4 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h4><p>取出文本指定的列，默认以空格或table键进行分割</p>
<p>参数：</p>
<ul>
<li>-d 指定分割符</li>
<li>-f 指定获取的列号</li>
</ul>
<p>例</p>
<p><em>test.txt</em></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/1.png"></p>
<p>取出test.txt文件中的第二列</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cut -f2 test.txt</span><br></pre></td></tr></table></figure>

<h4 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h4><p>去除重复的内容。</p>
<p>参数：</p>
<ul>
<li>-d 仅输出有重复的元素</li>
<li>-c 输出重复元素的个数</li>
</ul>
<p><em>test.txt</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat test.txt </span><br><span class="line">annie</span><br><span class="line">annie</span><br><span class="line">luna</span><br><span class="line">luna</span><br><span class="line">luna</span><br><span class="line">milo</span><br></pre></td></tr></table></figure>

<p>去除重复元素</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ uniq test.txt</span><br><span class="line">annie</span><br><span class="line">luna</span><br><span class="line">milo</span><br></pre></td></tr></table></figure>

<p>输出有重复的元素</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ uniq -d test.txt </span><br><span class="line">annie</span><br><span class="line">luna</span><br></pre></td></tr></table></figure>

<p>输出元素重复的个数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ uniq -c test.txt </span><br><span class="line">      2 annie</span><br><span class="line">      3 luna</span><br><span class="line">      1 milo</span><br></pre></td></tr></table></figure>

<h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>sort 命令将以默认的方式将文本文件的第一列以ASCII 码的次序排列，并将结果输出到标准输出。</p>
<p>参数：</p>
<ul>
<li>-r 倒序</li>
</ul>
<p>例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat test.txt </span><br><span class="line">luna</span><br><span class="line">annie</span><br><span class="line">milo</span><br><span class="line">bob</span><br><span class="line">asher</span><br></pre></td></tr></table></figure>

<p>使用sort对文件内容排序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sort test.txt </span><br><span class="line">annie</span><br><span class="line">asher</span><br><span class="line">bob</span><br><span class="line">luna</span><br><span class="line">milo</span><br></pre></td></tr></table></figure>

<p>对文件内容按照倒序排列</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sort -r test.txt </span><br><span class="line">milo</span><br><span class="line">luna</span><br><span class="line">bob</span><br><span class="line">asher</span><br><span class="line">annie</span><br></pre></td></tr></table></figure>

<h4 id="wc-word-count"><a href="#wc-word-count" class="headerlink" title="wc(word count)"></a>wc(word count)</h4><p>计算文件的Byte数、字数、或是列数。</p>
<p>参数</p>
<ul>
<li>-c或–bytes或–chars 只显示Bytes数。</li>
<li>-l或–lines 显示行数。</li>
<li>-w或–words 只显示字数。</li>
</ul>
<p>例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat test.txt </span><br><span class="line">luna</span><br><span class="line">annie</span><br><span class="line">milo</span><br><span class="line">bob</span><br><span class="line">asher</span><br></pre></td></tr></table></figure>

<p>统计test.txt文件的行数、单词数、字节数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wc test.txt </span><br><span class="line">5  5 26 test.txt</span><br></pre></td></tr></table></figure>

<p>只统计test.txt文件的行数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wc -l test.txt </span><br><span class="line">5 test.txt</span><br></pre></td></tr></table></figure>

<p>只统计test.txt文件的单词数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wc -w test.txt </span><br><span class="line">5 test.txt</span><br></pre></td></tr></table></figure>

<p>只统计test.txt文件的行数的字节数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wc -c test.txt </span><br><span class="line">26 test.txt</span><br></pre></td></tr></table></figure>

<p><em>注：</em></p>
<p>更多linux命令可以参考：<a href="https://www.runoob.com/linux/linux-command-manual.html">linux命令大全</a></p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><h5 id="查看全局变量"><a href="#查看全局变量" class="headerlink" title="查看全局变量"></a>查看全局变量</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ env</span><br><span class="line">XDG_SESSION_ID=16536</span><br><span class="line">TERM_PROGRAM=vscode</span><br><span class="line">HOSTNAME=VM-0-2-centos</span><br><span class="line">TERM=xterm-256color</span><br><span class="line">SHELL=/bin/bash</span><br><span class="line">HISTSIZE=3000</span><br></pre></td></tr></table></figure>

<h5 id="定义全局变量"><a href="#定义全局变量" class="headerlink" title="定义全局变量"></a>定义全局变量</h5><ul>
<li><p>方法一：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">test_var=12345 <span class="comment"># 变量名=变量值</span></span><br><span class="line"><span class="built_in">export</span> test_var <span class="comment"># export 变量名</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> test_var=12345 <span class="comment"># export 变量名=变量值</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>通过<code>export</code>定义全局变量后，可在<code>env</code>中查看到。</p>
<p>需要注意的是，<code>export</code>定义的全局变量是<strong>临时</strong>的，即退出终端或换个shell就没有了。</p>
<p>如果想要定义永久的全局变量，有两种方法：</p>
<ul>
<li><p>方法一：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/2.png"></p>
<p>shell启动的时候会先启动这两个文件，因此可以在这个文件里写入export var=xxx来定义全局变量，这样每个终端打开后都会执行这句来定义全局变量。</p>
</li>
<li><p>方法二：</p>
<p>在<code>/etc/profile</code>文件中写入export var=xxx来定义全局变量。</p>
</li>
</ul>
<h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>局部变量定义的四种方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式一：变量名=变量值，变量值必须是一个整体，中间没有特殊字符，等号两侧不能有空格</span></span><br><span class="line">a=1</span><br><span class="line"><span class="comment"># 方式二：变量名=&#x27;变量值&#x27;,引号内是什么内容就输出什么内容</span></span><br><span class="line">a=<span class="string">&#x27;test test&#x27;</span> </span><br><span class="line"><span class="comment"># 方式三：同上</span></span><br><span class="line">a=<span class="string">&quot;test test&quot;</span></span><br><span class="line"><span class="comment"># 方式四：变量名=$(linux命令)</span></span><br><span class="line">a=$(ls)</span><br></pre></td></tr></table></figure>

<p>在<code>shell</code>脚本中无法使用局部变量：</p>
<p>定义一个局部变量<code>x</code>并在脚本<code>test.sh</code>中引用了变量<code>x</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ x=<span class="string">&#x27;这是一个局部变量&#x27;</span></span><br></pre></td></tr></table></figure>

<p><em>test.sh</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="comment"># Description: 测试局部变量</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;测试局部变量：<span class="variable">$x</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>运行脚本，无法引用变量<code>x</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sh test.sh</span><br><span class="line">测试局部变量：</span><br></pre></td></tr></table></figure>

<p>若将<code>x</code>定义为全局变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> x=<span class="string">&#x27;这是一个局部变量&#x27;</span></span><br><span class="line">$ sh test.sh</span><br><span class="line">测试局部变量：这是一个局部变量</span><br></pre></td></tr></table></figure>

<p><code>x</code>引用成功。</p>
<h4 id="引用变量"><a href="#引用变量" class="headerlink" title="引用变量"></a>引用变量</h4><p>通过<code>$变量名</code>来引用变量。</p>
<p><strong>注意</strong>：</p>
<p><code>&#39;&#39;单引号</code>和<code>&quot;&quot;双引号</code>引用变量是有区别的：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/3.png"></p>
<h4 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h4><table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><strong>$0</strong></td>
<td>获取当前执行的shell脚本文件名，包括脚本路径</td>
</tr>
<tr>
<td><strong>$n</strong></td>
<td>获取当前执行的shell脚本的第n个参数值，n=1~9，如果n大于9就要用大括号括起来${10}</td>
</tr>
<tr>
<td><strong>$#</strong></td>
<td>获取当前shell命令行中的参数总个数</td>
</tr>
<tr>
<td><strong>$?</strong></td>
<td>获取执行上一个指令的返回值（0为成功，非0为失败）</td>
</tr>
<tr>
<td>*<em>$**</em></td>
<td>获取所有参数</td>
</tr>
</tbody></table>
<p>例</p>
<p><em>test.sh</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Description: 内置变量示例说明</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;当前脚本名：<span class="variable">$0</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第一个参数：<span class="variable">$1</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第二个参数：<span class="variable">$2</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第三个参数：<span class="variable">$3</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第四个参数：<span class="variable">$4</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第五个参数：<span class="variable">$5</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第六个参数：<span class="variable">$6</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第七个参数：<span class="variable">$7</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第八个参数：<span class="variable">$8</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第九个参数：<span class="variable">$9</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第十个参数：<span class="variable">$&#123;10&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;当前脚本的参数总数：<span class="variable">$#</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;当前脚本的参数分别是：$*&quot;</span></span><br></pre></td></tr></table></figure>

<p>执行<code>test.sh</code>脚本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sh test.sh 10 20 30 40 50 60 70 80 90 100</span><br><span class="line">当前脚本名：test.sh</span><br><span class="line">第一个参数：10</span><br><span class="line">第二个参数：20</span><br><span class="line">第三个参数：30</span><br><span class="line">第四个参数：40</span><br><span class="line">第五个参数：50</span><br><span class="line">第六个参数：60</span><br><span class="line">第七个参数：70</span><br><span class="line">第八个参数：80</span><br><span class="line">第九个参数：90</span><br><span class="line">第十个参数：100</span><br><span class="line">当前脚本的参数总数：10</span><br><span class="line">当前脚本的参数分别是：10 20 30 40 50 60 70 80 90 100</span><br></pre></td></tr></table></figure>

<h3 id="shell基本运算符"><a href="#shell基本运算符" class="headerlink" title="shell基本运算符"></a>shell基本运算符</h3><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><p>定义变量<code>a</code>=10，变量<code>b</code>=20</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">说明</th>
<th align="left">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">+</td>
<td align="left">加法</td>
<td align="left"><code>expr $a + $b</code> 结果为 30。</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">减法</td>
<td align="left"><code>expr $a - $b</code> 结果为 -10。</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left">乘法</td>
<td align="left"><code>expr $a \* $b</code> 结果为  200。</td>
</tr>
<tr>
<td align="left">/</td>
<td align="left">除法</td>
<td align="left"><code>expr $b / $a</code> 结果为 2。</td>
</tr>
<tr>
<td align="left">%</td>
<td align="left">取余</td>
<td align="left"><code>expr $b % $a</code> 结果为 0。</td>
</tr>
<tr>
<td align="left">=</td>
<td align="left">赋值</td>
<td align="left">a=$b 将把变量 b 的值赋给 a。</td>
</tr>
<tr>
<td align="left">==</td>
<td align="left">相等。用于比较两个数字，相同则返回 true。</td>
<td align="left">[ $a == $b ] 返回 false。</td>
</tr>
<tr>
<td align="left">!=</td>
<td align="left">不相等。用于比较两个数字，不相同则返回 true。</td>
<td align="left">[ $a != $b ] 返回 true。</td>
</tr>
</tbody></table>
<p><strong>特别注意:</strong> 在进行乘法运算的时候，由于<code>*</code>有特殊含义，所以必须加上<code>\</code>进行转义，<code>\*</code>才能实现乘法运算。<code>expr</code>出现<code>&gt;</code>、<code>&lt;</code>要用<code>\</code>转义，不转义会被当做重定向符。</p>
<p>另外，算术表达式有两种写法：</p>
<ul>
<li><p>$((算术表达式))</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-2-centos ~] a=10</span><br><span class="line">[root@VM-0-2-centos ~] b=20</span><br><span class="line">[root@VM-0-2-centos ~] <span class="built_in">echo</span> $((a+b)) <span class="comment"># 变量可以不加$</span></span><br><span class="line">30</span><br><span class="line">[root@VM-0-2-centos ~] <span class="built_in">echo</span> $((<span class="variable">$a</span>+<span class="variable">$b</span>))</span><br><span class="line">30</span><br></pre></td></tr></table></figure>
</li>
<li><p>expr 算术表达式</p>
<p>如上列表所示。</p>
</li>
</ul>
<h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p>
<p>定义变量<code>a</code>=10，变量<code>b</code>=20</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">说明</th>
<th align="left">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-eq</td>
<td align="left">检测两个数是否相等，相等返回 true。</td>
<td align="left">[ $a -eq $b ] 返回 false。</td>
</tr>
<tr>
<td align="left">-ne</td>
<td align="left">检测两个数是否不相等，不相等返回 true。</td>
<td align="left">[ $a -ne $b ] 返回 true。</td>
</tr>
<tr>
<td align="left">-gt</td>
<td align="left">检测左边的数是否大于右边的，如果是，则返回 true。</td>
<td align="left">[ $a -gt $b ] 返回 false。</td>
</tr>
<tr>
<td align="left">-lt</td>
<td align="left">检测左边的数是否小于右边的，如果是，则返回 true。</td>
<td align="left">[ $a -lt $b ] 返回 true。</td>
</tr>
<tr>
<td align="left">-ge</td>
<td align="left">检测左边的数是否大于等于右边的，如果是，则返回 true。</td>
<td align="left">[ $a -ge $b ] 返回 false。</td>
</tr>
<tr>
<td align="left">-le</td>
<td align="left">检测左边的数是否小于等于右边的，如果是，则返回 true。</td>
<td align="left">[ $a -le $b ] 返回 true。</td>
</tr>
</tbody></table>
<h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>定义变量<code>a</code>=10，变量<code>b</code>=20</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">说明</th>
<th align="left">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&amp;&amp;</td>
<td align="left">逻辑的 AND</td>
<td align="left">[[ $a -lt 100 &amp;&amp; $b -gt 100 ]] 返回 false</td>
</tr>
<tr>
<td align="left">||</td>
<td align="left">逻辑的 OR</td>
<td align="left">[[ $a -lt 100 || $b -gt 100 ]] 返回 true</td>
</tr>
</tbody></table>
<h4 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h4><p>定义变量<code>a</code>=10，变量<code>b</code>=20</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">说明</th>
<th align="left">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">!</td>
<td align="left">非运算，表达式为 true 则返回 false，否则返回 true。</td>
<td align="left">[ ! false ] 返回 true。</td>
</tr>
<tr>
<td align="left">-o</td>
<td align="left">或运算，有一个表达式为 true 则返回 true。</td>
<td align="left">[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td>
</tr>
<tr>
<td align="left">-a</td>
<td align="left">与运算，两个表达式都为 true 才返回 true。</td>
<td align="left">[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td>
</tr>
</tbody></table>
<h4 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h4><p>定义<code>a=&quot;test&quot;</code>，<code>b=&quot;test1&quot;</code></p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">说明</th>
<th align="left">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">=</td>
<td align="left">检测两个字符串是否相等，相等返回 true。</td>
<td align="left">[ $a = $b ] 返回 false。</td>
</tr>
<tr>
<td align="left">!=</td>
<td align="left">检测两个字符串是否不相等，不相等返回 true。</td>
<td align="left">[ $a != $b ] 返回 true。</td>
</tr>
<tr>
<td align="left">-z</td>
<td align="left">检测字符串长度是否为0，为0返回 true。</td>
<td align="left">[ -z $a ] 返回 false。</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">检测字符串长度是否不为 0，不为 0 返回 true。</td>
<td align="left">[ -n “$a” ] 返回 true。</td>
</tr>
<tr>
<td align="left">$</td>
<td align="left">检测字符串是否为空，不为空返回 true。</td>
<td align="left">[ $a ] 返回 true。</td>
</tr>
</tbody></table>
<h4 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h4><table>
<thead>
<tr>
<th align="left">操作符</th>
<th align="left">说明</th>
<th align="left">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-b file</td>
<td align="left">检测文件是否是块设备文件，如果是，则返回 true。</td>
<td align="left">[ -b $file ] 返回 false。</td>
</tr>
<tr>
<td align="left">-c file</td>
<td align="left">检测文件是否是字符设备文件，如果是，则返回 true。</td>
<td align="left">[ -c $file ] 返回 false。</td>
</tr>
<tr>
<td align="left"><strong>-d file</strong></td>
<td align="left"><strong>检测文件是否是目录，如果是，则返回 true。</strong></td>
<td align="left"><strong>[ -d $file ] 返回 false。</strong></td>
</tr>
<tr>
<td align="left"><strong>-f file</strong></td>
<td align="left"><strong>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</strong></td>
<td align="left"><strong>[ -f $file ] 返回 true。</strong></td>
</tr>
<tr>
<td align="left">-g file</td>
<td align="left">检测文件是否设置了 SGID 位，如果是，则返回 true。</td>
<td align="left">[ -g $file ] 返回 false。</td>
</tr>
<tr>
<td align="left">-k file</td>
<td align="left">检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td>
<td align="left">[ -k $file ] 返回 false。</td>
</tr>
<tr>
<td align="left">-p file</td>
<td align="left">检测文件是否是有名管道，如果是，则返回 true。</td>
<td align="left">[ -p $file ] 返回 false。</td>
</tr>
<tr>
<td align="left">-u file</td>
<td align="left">检测文件是否设置了 SUID 位，如果是，则返回 true。</td>
<td align="left">[ -u $file ] 返回 false。</td>
</tr>
<tr>
<td align="left">-r file</td>
<td align="left">检测文件是否可读，如果是，则返回 true。</td>
<td align="left">[ -r $file ] 返回 true。</td>
</tr>
<tr>
<td align="left">-w file</td>
<td align="left">检测文件是否可写，如果是，则返回 true。</td>
<td align="left">[ -w $file ] 返回 true。</td>
</tr>
<tr>
<td align="left"><strong>-x file</strong></td>
<td align="left"><strong>检测文件是否可执行，如果是，则返回 true。</strong></td>
<td align="left"><strong>[ -x $file ] 返回 true</strong>。</td>
</tr>
<tr>
<td align="left">-s file</td>
<td align="left">检测文件是否为空（文件大小是否大于0），不为空返回 true。</td>
<td align="left">[ -s $file ] 返回 true。</td>
</tr>
<tr>
<td align="left"><strong>-e file</strong></td>
<td align="left"><strong>检测文件（包括目录）是否存在，如果是，则返回 true。</strong></td>
<td align="left"><strong>[ -e $file ] 返回 true。</strong></td>
</tr>
</tbody></table>
<h3 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h3><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>条件成立返回<code>0</code>，不成立返回<code>1</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ [ 1 -eq 1]</span><br><span class="line">$ <span class="built_in">echo</span> $?  <span class="comment"># 获取执行上一个指令的返回值（0为成功，非0为失败）</span></span><br><span class="line">0</span><br><span class="line">$ [ 1 -eq 2]</span><br><span class="line">$ <span class="built_in">echo</span> $?</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h4 id="if-else简写"><a href="#if-else简写" class="headerlink" title="if-else简写"></a>if-else简写</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ test_file=<span class="string">&quot;/test_file&quot;</span></span><br><span class="line">$ [ -f <span class="string">&quot;<span class="variable">$test_file</span>&quot;</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;it&#x27;s a file&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;it&#x27;s not a file&quot;</span></span><br><span class="line">it<span class="string">&#x27;s not a file</span></span><br><span class="line"><span class="string">$ touch /test_file</span></span><br><span class="line"><span class="string">$ [ -f &quot;$test_file&quot; ] &amp;&amp; echo &quot;it&#x27;</span>s a file<span class="string">&quot; || echo &quot;</span>it<span class="string">&#x27;s not a file&quot;</span></span><br><span class="line"><span class="string">it&#x27;</span>s a file</span><br></pre></td></tr></table></figure>

<p><code>[ 条件 ] &amp;&amp; 结果1 || 结果2 </code>该表达式相当于<code>if-else</code>的简写，当条件成立，执行<code>&amp;&amp;</code>后的语句，条件不成立，执行<code>||</code>后的语句。</p>
<h3 id="shell脚本格式"><a href="#shell脚本格式" class="headerlink" title="shell脚本格式"></a>shell脚本格式</h3><h4 id="格式要求"><a href="#格式要求" class="headerlink" title="格式要求"></a>格式要求</h4><ul>
<li><p>在文件首行指定执行shell的程序以及相关说明</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Author: 古一</span></span><br><span class="line"><span class="comment">#Description: 测试脚本</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>shell脚本文件后缀，建议为<code>.sh</code></p>
</li>
<li><p>脚本执行失败时，使用<code>exit</code>返回非零值，来退出程序</p>
</li>
<li><p>默认缩进4个空格</p>
</li>
<li><p>shell脚本命名简单且见名知意</p>
</li>
</ul>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><ul>
<li><p>单行注释</p>
<p><code>#</code></p>
</li>
<li><p>多行注释</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:&lt;&lt;!</span><br><span class="line">这是注释</span><br><span class="line">!</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 格式一：</span><br><span class="line">函数名()</span><br><span class="line">&#123;</span><br><span class="line">    命令1</span><br><span class="line">    命令2</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 格式二：</span><br><span class="line">function 函数名</span><br><span class="line">&#123;</span><br><span class="line">    命令1</span><br><span class="line">    命令2</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例</p>
<p>编写shell脚本<code>func_test.sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Description: 函数定义</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">hello</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;你好！召唤师&quot;</span></span><br><span class="line">    ls /</span><br><span class="line">    [ $? -eq 0 ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;命令执行成功&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;命令执行失败&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 使用函数名调用函数，需要在函数名定义的下方调用</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bash func_test.sh </span><br><span class="line">你好！召唤师</span><br><span class="line">bin  boot  data  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">命令执行成功</span><br></pre></td></tr></table></figure>

<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 函数体中调用参数</span></span><br><span class="line">函数名()&#123;</span><br><span class="line">    函数体 <span class="variable">$n</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 函数传参</span></span><br><span class="line">函数名 参数</span><br></pre></td></tr></table></figure>

<p><em>在脚本内部传参</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Description: 脚本内部传参</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">hello</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;你好！<span class="variable">$1</span>&quot;</span></span><br><span class="line">    [ <span class="variable">$2</span> -eq 0 ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;命令执行成功&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;命令执行失败&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 脚本内部调用函数并传入实参</span></span><br><span class="line">hello 巴斯光年 0</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sh func_test.sh </span><br><span class="line">你好！巴斯光年</span><br><span class="line">命令执行成功</span><br></pre></td></tr></table></figure>

<p><em>命令行传入参数</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Description: 命令行传参</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">hello</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;你好！<span class="variable">$1</span>&quot;</span></span><br><span class="line">    [ <span class="variable">$2</span> -eq 0 ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;命令执行成功&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;命令执行失败&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数调用并传入形参</span></span><br><span class="line">hello <span class="variable">$1</span> <span class="variable">$2</span></span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sh func_test.sh  mark 0</span><br><span class="line">你好！mark</span><br><span class="line">命令执行成功</span><br></pre></td></tr></table></figure>

<p><em>接收用户输入参数</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Description: 接收用户输入参数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">hello</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;你好！<span class="variable">$1</span>&quot;</span></span><br><span class="line">    [ <span class="variable">$2</span> -eq 0 ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;命令执行成功&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;命令执行失败&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用read可以接收用户输入的数据</span></span><br><span class="line"><span class="comment"># -p指定提示信息</span></span><br><span class="line"><span class="comment"># 在最后添加一个变量名可以接收输入的变量</span></span><br><span class="line"><span class="comment"># 如果不传变量名，会指定传递给REPLY内置变量</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入用户名：&quot;</span> name</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入一个数字：&quot;</span></span><br><span class="line">hello <span class="variable">$name</span> <span class="variable">$REPLY</span></span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bash func_test.sh </span><br><span class="line">请输入用户名：milo</span><br><span class="line">请输入一个数字：0</span><br><span class="line">你好！milo</span><br><span class="line">命令执行成功</span><br></pre></td></tr></table></figure>

<h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式一：</span></span><br><span class="line"><span class="keyword">if</span> [ 条件1 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    指令1</span><br><span class="line"><span class="keyword">elif</span> [ 条件2 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    指令2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    指令3</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式二：</span></span><br><span class="line"><span class="keyword">if</span> [ 条件1 ];<span class="keyword">then</span></span><br><span class="line">    指令1</span><br><span class="line"><span class="keyword">elif</span> [ 条件2 ];<span class="keyword">then</span></span><br><span class="line">    指令2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    指令3</span><br></pre></td></tr></table></figure>

<p>例</p>
<p>编写shell脚本<code>condition_test.sh</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Description: if条件语句</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入你的年龄：&quot;</span> age</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;age&#125;</span>&quot;</span> -ge 25 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;年纪太大，回去养老吧&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$&#123;age&#125;</span>&quot;</span> -le 15 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;年纪太小，回去玩泥巴&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;可以，来打职业吧&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-2-centos ~] sh condition_test.sh</span><br><span class="line">请输入你的年龄：16</span><br><span class="line">可以，来打职业吧</span><br><span class="line">[root@VM-0-2-centos ~] sh condition_test.sh </span><br><span class="line">请输入你的年龄：28</span><br><span class="line">年纪太大，回去养老吧</span><br><span class="line">[root@VM-0-2-centos ~] sh condition_test.sh </span><br><span class="line">请输入你的年龄：10</span><br><span class="line">年纪太小，回去玩泥巴</span><br></pre></td></tr></table></figure>

<h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式一：</span></span><br><span class="line"><span class="keyword">for</span> 值 <span class="keyword">in</span> 列表</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    执行语句</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式二：</span></span><br><span class="line">max=10</span><br><span class="line"><span class="keyword">for</span> ((i=1;i&lt;=max;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Description: for循环语句</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dirs</span>=$(ls /)</span><br><span class="line">i=1</span><br><span class="line"><span class="keyword">for</span> dir <span class="keyword">in</span> <span class="variable">$dirs</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ -d <span class="string">&quot;/<span class="variable">$dir</span>&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;第<span class="variable">$i</span>个文件夹为：<span class="variable">$dir</span>&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;第<span class="variable">$i</span>个文件为：<span class="variable">$dir</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    i=$((i+<span class="number">1</span>))</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-2-centos ~] bash condition_test.sh </span><br><span class="line">第1个文件为：asc.txt</span><br><span class="line">第2个文件夹为：bin</span><br><span class="line">第3个文件夹为：boot</span><br><span class="line">第4个文件夹为：data</span><br><span class="line">第5个文件夹为：dev</span><br><span class="line">第6个文件夹为：etc</span><br><span class="line">第7个文件夹为：home</span><br><span class="line">第8个文件夹为：lib</span><br><span class="line">第9个文件夹为：lib64</span><br><span class="line">第10个文件夹为：lost+found</span><br><span class="line">第11个文件夹为：media</span><br><span class="line">第12个文件夹为：mnt</span><br><span class="line">第13个文件夹为：opt</span><br><span class="line">第14个文件夹为：proc</span><br><span class="line">第15个文件夹为：root</span><br><span class="line">第16个文件夹为：run</span><br><span class="line">第17个文件夹为：sbin</span><br><span class="line">第18个文件夹为：srv</span><br><span class="line">第19个文件夹为：sys</span><br><span class="line">第20个文件夹为：tmp</span><br><span class="line">第21个文件夹为：usr</span><br><span class="line">第22个文件夹为：var</span><br></pre></td></tr></table></figure>

<p><em>指定循环次数</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Description: for循环语句指定次数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入循环次数:&quot;</span> num</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ((i=1;i&lt;=<span class="variable">$num</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第<span class="variable">$i</span>次循环&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-2-centos ~] bash condition_test.sh </span><br><span class="line">请输入循环次数:5</span><br><span class="line">第1次循环</span><br><span class="line">第2次循环</span><br><span class="line">第3次循环</span><br><span class="line">第4次循环</span><br><span class="line">第5次循环</span><br></pre></td></tr></table></figure>

<h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只要条件满足，就一直循环</span></span><br><span class="line"><span class="keyword">while</span> 条件</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    执行语句</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Description: while循环语句</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入循环最大数:&quot;</span> num</span><br><span class="line">i=1</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ <span class="string">&quot;<span class="variable">$i</span>&quot;</span> -le <span class="string">&quot;<span class="variable">$num</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第<span class="variable">$i</span>次循环&quot;</span></span><br><span class="line">    i=$((i+<span class="number">1</span>))</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-2-centos ~] sh condition_test.sh </span><br><span class="line">请输入循环最大数:6</span><br><span class="line">第1次循环</span><br><span class="line">第2次循环</span><br><span class="line">第3次循环</span><br><span class="line">第4次循环</span><br><span class="line">第5次循环</span><br><span class="line">第6次循环</span><br></pre></td></tr></table></figure>

<h4 id="until"><a href="#until" class="headerlink" title="until"></a>until</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 与while处理方式相反，condition 一般为条件表达式，如果返回值为 false，则继续执行循环体内的语句，否则跳出循环。</span></span><br><span class="line">until 条件</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    执行语句</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Description: until循环语句</span></span><br><span class="line"></span><br><span class="line">i=1</span><br><span class="line"><span class="comment"># 注意这里与while的区别</span></span><br><span class="line">until [ ! <span class="string">&quot;<span class="variable">$i</span>&quot;</span> -le 6 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">   i=`expr <span class="variable">$i</span> + 1`</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-2-centos ~]<span class="comment"># sh condition_test.sh </span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td></tr></table></figure>

<h4 id="case"><a href="#case" class="headerlink" title="case"></a>case</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="keyword">case</span> 变量名 <span class="keyword">in</span></span><br><span class="line">    值1)</span><br><span class="line">        指令1</span><br><span class="line">        ;;</span><br><span class="line">    值2)</span><br><span class="line">        指令2</span><br><span class="line">        ;;</span><br><span class="line">    值3)</span><br><span class="line">        指令3</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        其它指令</span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

<p>利用<code>case</code>语句实现计算器</p>
<p><code>caculator.sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="comment"># Description:计算器</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">help_info</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Usage: <span class="variable">$0</span> num1 +|-|\*|/ num2&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$#</span>&quot;</span> -ne 3 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;参数个数有误&quot;</span></span><br><span class="line">        help_info</span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$2</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">        +)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;两数相加结果：<span class="subst">$(($1 + $3)</span>)&quot;</span></span><br><span class="line">            ;;</span><br><span class="line">        -)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;两数相减结果：<span class="subst">$(($1 - $3)</span>)&quot;</span></span><br><span class="line">            ;;</span><br><span class="line">        \*)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;两数相乘结果：<span class="subst">$(($1 * $3)</span>)&quot;</span></span><br><span class="line">            ;;</span><br><span class="line">        /)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;两数相除结果：<span class="subst">$(($1 / $3)</span>)&quot;</span></span><br><span class="line">            ;;</span><br><span class="line">        *)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$2</span>为非法运算符&quot;</span></span><br><span class="line">            help_info</span><br><span class="line">            <span class="built_in">exit</span> 1</span><br><span class="line">            ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main <span class="variable">$1</span> <span class="variable">$2</span> <span class="variable">$3</span></span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-2-centos ~] bash caculator.sh 1 + 2</span><br><span class="line">两数相加结果：3</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>初识vue</title>
    <url>/posts/67d72d50.html</url>
    <content><![CDATA[<h3 id="Vue-js是什么？"><a href="#Vue-js是什么？" class="headerlink" title="Vue.js是什么？"></a>Vue.js是什么？</h3><p><strong>vue</strong>是现在前端三大框架之一，使用起来简单轻便，上手快速。</p>
<blockquote>
<p>Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与<a href="https://cn.vuejs.org/v2/guide/single-file-components.html">现代化的工具链</a>以及各种<a href="https://github.com/vuejs/awesome-vue#libraries--plugins">支持类库</a>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>
</blockquote>
<p>简单来说，vue的核心就是：</p>
<ol>
<li>响应式数据绑定：所谓响应式，就是当数据发生改变，视图可以自动更新，可以不用关心dom操作，而专心数据操作</li>
<li>视图组件可嵌套组合：将视图按照功能分成若干个组件，由组件嵌套组合整个应用</li>
</ol>
<h3 id="快速创建Vue工程"><a href="#快速创建Vue工程" class="headerlink" title="快速创建Vue工程"></a>快速创建Vue工程</h3><h4 id="安装vue"><a href="#安装vue" class="headerlink" title="安装vue"></a>安装vue</h4><ol>
<li><p>直接通过&lt;script&gt;引用vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>npm安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install vue</span><br></pre></td></tr></table></figure>

<p><em>ps:前提要先安装好node.js</em></p>
<p>由于npm速度比较慢，可以通过淘宝镜像源安装。</p>
<p>安装淘宝镜像源：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>安装成功后，就可以是用<code>cnpm</code>来安装vue了，速度会快很多。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install vue</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="安装vue命令行工具"><a href="#安装vue命令行工具" class="headerlink" title="安装vue命令行工具"></a>安装vue命令行工具</h4><p>Vue 提供了一个官方的 CLI，为单页面应用 (SPA) 快速搭建繁杂的脚手架。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用npm</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用淘宝镜像源</span></span><br><span class="line">cnpm install -g @vue/cli</span><br></pre></td></tr></table></figure>

<h4 id="创建vue工程"><a href="#创建vue工程" class="headerlink" title="创建vue工程"></a>创建vue工程</h4><p>所有准备工作就绪后，vue提供了一条命令来快速创建工程：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">vue create &lt;app<span class="literal">-name</span>&gt;</span><br></pre></td></tr></table></figure>

<p><em>ps:该命令只有vue-cli3.0以上才支持</em></p>
<h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/Snipaste_2021-02-03_09-33-22.png"></p>
<table>
<thead>
<tr>
<th align="left">目录/文件</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">build</td>
<td align="left">项目构建(webpack)相关代码</td>
</tr>
<tr>
<td align="left">config</td>
<td align="left">配置目录，包括端口号等。</td>
</tr>
<tr>
<td align="left">node_modules</td>
<td align="left">npm 加载的项目依赖模块（类似python中的site-packages）</td>
</tr>
<tr>
<td align="left">src</td>
<td align="left">这里是我们要开发的目录，基本上要做的事情都在这个目录里。里面包含了几个目录及文件：<br><em>assets</em>: 放置一些图片，如logo等。<em>components</em>: 目录里面放了一个组件文件，可以不用。<br><em>App.vue</em>: 根组件，我们也可以直接将组件写这里，而不使用 components 目录。<br><em>main.js</em>: 项目的核心文件。</td>
</tr>
<tr>
<td align="left">static</td>
<td align="left">静态资源目录，如图片、字体等。</td>
</tr>
<tr>
<td align="left">test</td>
<td align="left">初始测试目录，可删除</td>
</tr>
</tbody></table>
<h4 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<p>通过在根组件<code>App.vue</code>中引用子组件<code>HelloWorld.vue</code>来定制一个页面：</p>
<p><code>App.vue</code>代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;.&#x2F;assets&#x2F;logo.png&quot;&gt;</span><br><span class="line">    &lt;!--&lt;显示HelloWorld组件内容&#x2F;&gt;--&gt;</span><br><span class="line">    &lt;HelloWord&gt;&lt;&#x2F;HelloWord&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;&#x2F; 导入HelloWorld组件</span><br><span class="line">import HelloWord from &quot;.&#x2F;components&#x2F;HelloWorld&quot;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  components:&#123;</span><br><span class="line">    HelloWord &#x2F;&#x2F;声明组件</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: &#39;Avenir&#39;, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>HelloWorld.vue</code>代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;hello&quot;&gt;</span><br><span class="line">    &lt;h1&gt;欢迎来到我的世界&lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>启动项目后，即可看到我们定制的页面：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/v.png"></p>
<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="模板语法-插值"><a href="#模板语法-插值" class="headerlink" title="模板语法-插值"></a>模板语法-插值</h4><h5 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h5><p>数据绑定最常见的形式就是使用<code> &#123;&#123;...&#125;&#125;</code>（双大括号）的文本插值，修改上面的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;hello&quot;&gt;</span><br><span class="line">      &lt;!--从外部插入变量值--&gt;</span><br><span class="line">    &lt;h1&gt;欢迎来到我的世界，&#123;&#123;msg&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#39;古一&#39; &#x2F;&#x2F;指定一个变量</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>在<code>&lt;script&gt;</code>标签内中指明数据<code>msg</code>的值，然后在<code>&lt;template&gt;</code>中插入该变量（其实就是类似于python中的变量引用）。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/v2.png"></p>
<h4 id="模板语法-指令"><a href="#模板语法-指令" class="headerlink" title="模板语法-指令"></a>模板语法-指令</h4><p>什么是指令？下面是官方的解释：</p>
<blockquote>
<p>指令 (Directives) 是带有 <code>v-</code> 前缀的特殊 attribute。指令 attribute 的值预期是<strong>单个 JavaScript 表达式</strong> 。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。</p>
</blockquote>
<h5 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h5><p>通过<code>v-bind</code>做属性绑定，可以使标签的属性值动态变化。</p>
<p>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;hello&quot;&gt;</span><br><span class="line">    &lt;h1&gt;欢迎来到我的世界，&#123;&#123;msg&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;!--给title属性绑定value的值--&gt;</span><br><span class="line">    &lt;span v-bind:title&#x3D;&quot;value&quot;&gt;鼠标放这里别动&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#39;古一&#39;,</span><br><span class="line">      value: &#39;哈哈哈哈&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>在<code>data</code>中定义一个变量<code>value</code>，然后通过<code>v-bind</code>给<code>&lt;span&gt;</code>标签的<code>title</code>属性绑定<code>value</code>，这样<code>title</code>属性的值就可以实现动态变化。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/v3.png"></p>
<p><code>v-bind</code>绑定是单向的，即前端改变值不会影响后端<code>model</code>。</p>
<p><code>v-bind</code>也可以缩写为<code>:</code>，即等价于：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">:title</span>=<span class="string">&quot;value&quot;</span>&gt;</span>鼠标放这里别动<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h5><p><code>v-model</code>可以在控件元素上创建双向数据绑定，根据表单上的值，自动更新绑定的元素的值，还是直接看例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;login&quot;&gt;</span><br><span class="line">    &lt;form method&#x3D;&quot;post&quot; action&#x3D;&quot;&quot;&gt;</span><br><span class="line">      &lt;label for&#x3D;&quot;username&quot;&gt;用户名：&lt;&#x2F;label&gt;</span><br><span class="line">      &lt;!--未绑定用户名输入--&gt;</span><br><span class="line">      &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;username&quot; placeholder&#x3D;&quot;请输入用户名&quot;&gt;</span><br><span class="line">      &lt;br&gt;</span><br><span class="line">      &lt;label for&#x3D;&quot;password&quot;&gt;密码：&lt;&#x2F;label&gt;</span><br><span class="line">      &lt;!--绑定了密码输入--&gt;</span><br><span class="line">      &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;password&quot; placeholder&#x3D;&quot;请输入密码&quot; v-model&#x3D;&quot;password&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;p&gt;输入的用户名是：&#123;&#123;username&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;输入的用户名是：&#123;&#123;password&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      username: &#39;admin&#39;,</span><br><span class="line">      password: &#39;123&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>这里定义了一个登录输入框，为了方便看到区别，将密码输入框做了<code>v-model</code>数据绑定，而登录输入框没有，看下效果：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/v4.png"></p>
<p>在<code>model</code>中实际是指定了<code>username</code>和<code>password</code>的值分别为<code>admin</code>和<code>123</code>，但是前端只显示了密码，为什么？因为我们对密码输入框进行了数据的<code>双向绑定</code>，即<strong>可以将model中的数据传给绑定的属性，同时，也可以将前端输入的内容交给model处理</strong>：</p>
<p><em>在前端输入，后端model同时更新</em></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/v5.png"></p>
<p><em>注：通常v-model用在 input、select、textarea、checkbox、radio控件上。</em></p>
<h5 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h5><p><code>v-on</code>指令用来监听和响应dom事件。</p>
<p>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;login&quot;&gt;</span><br><span class="line">      &lt;!--给点击事件绑定一个函数--&gt;</span><br><span class="line">    &lt;span v-on:click&#x3D;&quot;changeWeather&quot;&gt;今天是&#123;&#123;weather&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      weather: &#39;晴天&#39; &#x2F;&#x2F;天气默认值</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    changeWeather()&#123; &#x2F;&#x2F; 定义一个方法修改天气</span><br><span class="line">      return this.weather&#x3D;&#39;阴天&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p><code>&lt;span&gt;</code>标签默认显示“今天是晴天”，当点击该标签后，会自动调用方法<code>changeWeather</code>，来修改<code>weather</code>值为“阴天”，如图：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/v6.png"></p>
<p>此外，<code>v-on</code>可以缩写为<code>@</code>，等价于：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>今天是&#123;&#123;weather&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h5><p>通过<code>v-if</code>、<code>v-else-if</code>、<code>v-else</code>可以完成条件判断，</p>
<p>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form method&#x3D;&quot;post&quot; action&#x3D;&quot;&quot;&gt;</span><br><span class="line">      &lt;label for&#x3D;&quot;age&quot;&gt;年龄：&lt;&#x2F;label&gt;</span><br><span class="line">      &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;age&quot; placeholder&#x3D;&quot;请输入年龄&quot; v-model&#x3D;&quot;age&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;p v-if&#x3D;&quot;age&gt;25&quot;&gt;年纪太大，回去养老吧&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p v-else-if&#x3D;&quot;age&lt;15&quot;&gt;年纪太小，回去玩泥巴&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p v-else&gt;可以，来打职业吧&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      age: 17</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/28.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/11.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/17.png"></p>
<h5 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h5><p><code>v-show</code>和<code>v-if</code>相似，vue会根据表达式值的真假来渲染元素，</p>
<p>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;login&quot;&gt;</span><br><span class="line">    &lt;p v-show&#x3D;&quot;is_show&quot;&gt;哈哈哈&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p v-if&#x3D;&quot;is_show&quot;&gt;嘿嘿嘿&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      is_show:true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>当<code>is_show</code>为<code>true</code>时，效果：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/show.png"></p>
<p>而当<code>is_show</code>为<code>false</code>时，两者均不会渲染标签内容，但是有一个区别：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/show2.png"></p>
<p><strong>可以看到，v-show每次不会重新进行dom的创建和删除，只是切换了元素的display属性，而v-if每次都会重新创建和删除元素。</strong></p>
<h5 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h5><p>很明显，<code>v-for</code>可以帮我们实现循环，</p>
<p>以表格填充为例：</p>
<p>如果使用最朴素的写法，会写很多<code>&lt;tr&gt;</code>标签，类似这样：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/Image.png"></p>
<p>而通过<code>v-for</code>我们可以大大简化代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;th v-for&#x3D;&quot;(project,key) in project_header&quot; v-bind:key&#x3D;&quot;key&quot;&gt;</span><br><span class="line">        &#123;&#123;project&#125;&#125;</span><br><span class="line">      &lt;&#x2F;th&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr v-for&#x3D;&quot;(item,key) in projects&quot; v-bind:key&#x3D;&quot;key&quot;&gt;</span><br><span class="line">      &lt;td&gt;&#123;&#123;item.p_name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">      &lt;td&gt;&#123;&#123;item.p_leader&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">      &lt;td&gt;&#123;&#123;item.p_level&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">  &lt;&#x2F;table&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;ProjectsList&quot;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        project_header: [&quot;项目名称&quot;, &quot;项目负责人&quot;, &quot;项目级别&quot;],</span><br><span class="line">        projects: [</span><br><span class="line">          &#123;p_name: &quot;阿里云项目&quot;, p_leader: &quot;马云&quot;, p_level: &quot;5级&quot;&#125;,</span><br><span class="line">          &#123;p_name: &quot;腾讯云项目&quot;, p_leader: &quot;马化腾&quot;, p_level: &quot;5级&quot;&#125;,</span><br><span class="line">          &#123;p_name: &quot;百度云项目&quot;, p_leader: &quot;李彦宏&quot;, p_level: &quot;3级&quot;&#125;],</span><br><span class="line">        username: &#39;xm&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  table&#123;</span><br><span class="line">    margin: 50px auto;</span><br><span class="line">    border-collapse: collapse;</span><br><span class="line">    width: 40%;</span><br><span class="line">  &#125;</span><br><span class="line">  th,td&#123;</span><br><span class="line">    border: aqua 1px solid;</span><br><span class="line">    padding: 8px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">th</span> <span class="attr">v-for</span>=<span class="string">&quot;(project,key) in project_header&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;key&quot;</span>&gt;</span>&#123;&#123;project&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其实就相当于python中的<code>for project in project_header</code>，而这个<code>key</code>就是索引，这里绑定索引是为了保证改变表头顺序，值不会受影响。</p>
<p>效果：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/t.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">        project_header: [<span class="string">&quot;项目名称&quot;</span>, <span class="string">&quot;项目负责人&quot;</span>, <span class="string">&quot;项目级别&quot;</span>],</span><br><span class="line">        projects: [</span><br><span class="line">          &#123;<span class="attr">p_name</span>: <span class="string">&quot;阿里云项目&quot;</span>, <span class="attr">p_leader</span>: <span class="string">&quot;马云&quot;</span>, <span class="attr">p_level</span>: <span class="string">&quot;5级&quot;</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">p_name</span>: <span class="string">&quot;腾讯云项目&quot;</span>, <span class="attr">p_leader</span>: <span class="string">&quot;马化腾&quot;</span>, <span class="attr">p_level</span>: <span class="string">&quot;5级&quot;</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">p_name</span>: <span class="string">&quot;百度云项目&quot;</span>, <span class="attr">p_leader</span>: <span class="string">&quot;李彦宏&quot;</span>, <span class="attr">p_level</span>: <span class="string">&quot;3级&quot;</span>&#125;],</span><br><span class="line">        username: <span class="string">&#x27;xm&#x27;</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>注：<code>js</code>中的<code>&#123;&#125;</code>就相当于<code>python</code>中的对象。</p>
<h3 id="ElementUI"><a href="#ElementUI" class="headerlink" title="ElementUI"></a>ElementUI</h3><p>很多比较复杂且好看的组件要自己写，对我们做测试的来说，还是蛮费劲的，好在由<code>饿了么</code>前端团队开源的<code>element ui</code>提供了非常多丰富又好看的组件，可以直接“拿来主义”，让我们的网站快速成型。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm i elemnet<span class="literal">-ui</span> <span class="literal">-S</span></span><br></pre></td></tr></table></figure>

<h4 id="引入到Vue"><a href="#引入到Vue" class="headerlink" title="引入到Vue"></a>引入到Vue</h4><p>在<code>main.js</code>中写入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/t.png"></p>
<p>这是我们自己写的一个表格，如果我们想要一个改成一个带复选框的表格，该怎么写呢？</p>
<p>“饿了么”有现成的。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/dx2.png"></p>
<p>实现多选非常简单: 手动添加一个<code>el-table-column</code>，设<code>type</code>属性为<code>selection</code>即可；默认情况下若内容过多会折行显示，若需要单行显示可以使用<code>show-overflow-tooltip</code>属性，它接受一个<code>Boolean</code>，为<code>true</code>时多余的内容会在 hover 时以 tooltip 的形式显示出来。</p>
<p>源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-table</span><br><span class="line">    ref&#x3D;&quot;multipleTable&quot; </span><br><span class="line">    :data&#x3D;&quot;tableData&quot;</span><br><span class="line">    tooltip-effect&#x3D;&quot;dark&quot;</span><br><span class="line">    style&#x3D;&quot;width: 100%&quot;</span><br><span class="line">    @selection-change&#x3D;&quot;handleSelectionChange&quot;&gt;</span><br><span class="line">    &lt;el-table-column</span><br><span class="line">      type&#x3D;&quot;selection&quot;</span><br><span class="line">      width&#x3D;&quot;55&quot;&gt;</span><br><span class="line">    &lt;&#x2F;el-table-column&gt;</span><br><span class="line">    &lt;el-table-column</span><br><span class="line">      label&#x3D;&quot;日期&quot;</span><br><span class="line">      width&#x3D;&quot;120&quot;&gt;</span><br><span class="line">      &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;&#123;&#123; scope.row.date &#125;&#125;&lt;&#x2F;template&gt;</span><br><span class="line">    &lt;&#x2F;el-table-column&gt;</span><br><span class="line">    &lt;el-table-column</span><br><span class="line">      prop&#x3D;&quot;name&quot;</span><br><span class="line">      label&#x3D;&quot;姓名&quot;</span><br><span class="line">      width&#x3D;&quot;120&quot;&gt;</span><br><span class="line">    &lt;&#x2F;el-table-column&gt;</span><br><span class="line">    &lt;el-table-column</span><br><span class="line">      prop&#x3D;&quot;address&quot;</span><br><span class="line">      label&#x3D;&quot;地址&quot;</span><br><span class="line">      show-overflow-tooltip&gt;</span><br><span class="line">    &lt;&#x2F;el-table-column&gt;</span><br><span class="line">  &lt;&#x2F;el-table&gt;</span><br><span class="line">  &lt;div style&#x3D;&quot;margin-top: 20px&quot;&gt;</span><br><span class="line">    &lt;el-button @click&#x3D;&quot;toggleSelection([tableData[1], tableData[2]])&quot;&gt;切换第二、第三行的选中状态&lt;&#x2F;el-button&gt;</span><br><span class="line">    &lt;el-button @click&#x3D;&quot;toggleSelection()&quot;&gt;取消选择&lt;&#x2F;el-button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        tableData: [&#123;</span><br><span class="line">          date: &#39;2016-05-03&#39;,</span><br><span class="line">          name: &#39;王小虎&#39;,</span><br><span class="line">          address: &#39;上海市普陀区金沙江路 1518 弄&#39;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          date: &#39;2016-05-02&#39;,</span><br><span class="line">          name: &#39;王小虎&#39;,</span><br><span class="line">          address: &#39;上海市普陀区金沙江路 1518 弄&#39;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          date: &#39;2016-05-04&#39;,</span><br><span class="line">          name: &#39;王小虎&#39;,</span><br><span class="line">          address: &#39;上海市普陀区金沙江路 1518 弄&#39;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          date: &#39;2016-05-01&#39;,</span><br><span class="line">          name: &#39;王小虎&#39;,</span><br><span class="line">          address: &#39;上海市普陀区金沙江路 1518 弄&#39;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          date: &#39;2016-05-08&#39;,</span><br><span class="line">          name: &#39;王小虎&#39;,</span><br><span class="line">          address: &#39;上海市普陀区金沙江路 1518 弄&#39;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          date: &#39;2016-05-06&#39;,</span><br><span class="line">          name: &#39;王小虎&#39;,</span><br><span class="line">          address: &#39;上海市普陀区金沙江路 1518 弄&#39;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          date: &#39;2016-05-07&#39;,</span><br><span class="line">          name: &#39;王小虎&#39;,</span><br><span class="line">          address: &#39;上海市普陀区金沙江路 1518 弄&#39;</span><br><span class="line">        &#125;],</span><br><span class="line">        multipleSelection: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    methods: &#123;</span><br><span class="line">      toggleSelection(rows) &#123;</span><br><span class="line">        if (rows) &#123;</span><br><span class="line">          rows.forEach(row &#x3D;&gt; &#123;</span><br><span class="line">            this.$refs.multipleTable.toggleRowSelection(row);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          this.$refs.multipleTable.clearSelection();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      handleSelectionChange(val) &#123;</span><br><span class="line">        this.multipleSelection &#x3D; val;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>截取我们需要的部分，直接copy到vue组件中，稍作修改即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-table</span><br><span class="line">      ref&#x3D;&quot;multipleTable&quot;</span><br><span class="line">      :data&#x3D;&quot;tableData&quot;</span><br><span class="line">      tooltip-effect&#x3D;&quot;dark&quot;</span><br><span class="line">      style&#x3D;&quot;width: 100%&quot;</span><br><span class="line">      class&#x3D;&quot;projects_new&quot;</span><br><span class="line">      @selection-change&#x3D;&quot;handleSelectionChange&quot;&gt;</span><br><span class="line">      &lt;el-table-column</span><br><span class="line">        type&#x3D;&quot;selection&quot;</span><br><span class="line">        width&#x3D;&quot;55&quot;&gt;</span><br><span class="line">      &lt;&#x2F;el-table-column&gt;</span><br><span class="line">      &lt;el-table-column</span><br><span class="line">        prop&#x3D;&quot;p_name&quot;</span><br><span class="line">        label&#x3D;&quot;项目名称&quot;</span><br><span class="line">        width&#x3D;&quot;120&quot;&gt;</span><br><span class="line">      &lt;&#x2F;el-table-column&gt;</span><br><span class="line">      &lt;el-table-column</span><br><span class="line">        prop&#x3D;&quot;p_leader&quot;</span><br><span class="line">        label&#x3D;&quot;项目负责人&quot;</span><br><span class="line">        width&#x3D;&quot;120&quot;&gt;</span><br><span class="line">      &lt;&#x2F;el-table-column&gt;</span><br><span class="line">      &lt;el-table-column</span><br><span class="line">        prop&#x3D;&quot;p_level&quot;</span><br><span class="line">        label&#x3D;&quot;项目难度&quot;</span><br><span class="line">        width&#x3D;&quot;120&quot;&gt;</span><br><span class="line">      &lt;&#x2F;el-table-column&gt;</span><br><span class="line">    &lt;&#x2F;el-table&gt;</span><br><span class="line">    &lt;div style&#x3D;&quot;margin-top: 20px&quot;&gt;</span><br><span class="line">      &lt;el-button @click&#x3D;&quot;toggleSelection()&quot;&gt;取消选择&lt;&#x2F;el-button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;ProjectsListNew&quot;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        project_header: [&quot;项目名称&quot;, &quot;项目负责人&quot;, &quot;项目级别&quot;],</span><br><span class="line">        tableData: [</span><br><span class="line">          &#123;p_name: &quot;阿里云项目&quot;, p_leader: &quot;马云&quot;, p_level: &quot;5级&quot;&#125;,</span><br><span class="line">          &#123;p_name: &quot;腾讯云项目&quot;, p_leader: &quot;马化腾&quot;, p_level: &quot;5级&quot;&#125;,</span><br><span class="line">          &#123;p_name: &quot;百度云项目&quot;, p_leader: &quot;李彦宏&quot;, p_level: &quot;3级&quot;&#125;],</span><br><span class="line">        multipleTable: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      toggleSelection() &#123;</span><br><span class="line">        this.$refs.multipleTable.clearSelection();</span><br><span class="line">      &#125;,</span><br><span class="line">      handleSelectionChange(val) &#123;</span><br><span class="line">        this.multipleTable &#x3D; val;</span><br><span class="line">        console.log(this.multipleTable)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .projects_new&#123;</span><br><span class="line">    margin: 50px 500px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>这里出现了一些我们不认识的属性、事件或方法等，比如<code>selection-change</code>、<code>clearSelection()</code>等，在<code>elment ui</code>官网对应组件中都有说明。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/select.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/s2.png"></p>
<p>效果：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/t4.png">我们通常看到一个web页面会有页头、侧边栏、内容区等模块，而这些模块其实就是一个个单独的组件，一个完整的应用就是一棵组件树。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/zj.png"></p>
<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><h4 id="组件声明"><a href="#组件声明" class="headerlink" title="组件声明"></a>组件声明</h4><p>在<code>Vue</code>项目中，<code>App.vue</code> 是根组件，其它我们自己写的组件想要显示在页面上，有两种引入方式：局部和全局。</p>
<h5 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h5><p>局部组件就是在根组件中引用，首先在<code>App.vue</code>中导入子组件，然后声明即可。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/22.png"></p>
<h5 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h5><p>全局组件在<code>main.js</code>中引用，比如上文提到的<code>elemnt-ui</code>就是全局组件。</p>
<p>在<code>main.js</code>中写入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入子组件</span></span><br><span class="line"><span class="keyword">import</span> hello <span class="keyword">from</span> <span class="string">&#x27;./components/HelloWorld&#x27;</span></span><br><span class="line"><span class="comment">// 创建全局组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;helloworld&#x27;</span>, hello)</span><br></pre></td></tr></table></figure>

<p>在根组件<code>App.vue</code>中直接引用，不需要再导入和声明：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/hhh.png"></p>
<h4 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h4><p>可以在父组件中通过<code>props</code>向子组件传递值，</p>
<p>例：</p>
<p>根组件<code>App.vue</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pln</span>&gt;</span><span class="tag">&lt;/<span class="name">pln</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">msg</span>=<span class="string">&quot;古一&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>子组件<code>HelloWorld.vue</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;hello&quot;&gt;</span><br><span class="line">    &lt;h1&gt;欢迎来到我的世界，&#123;&#123;msg&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  props:&#123;</span><br><span class="line">    msg:String</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="slot插槽"><a href="#slot插槽" class="headerlink" title="slot插槽"></a>slot插槽</h4><p>当在父组件调用子组件并在子组件的标签内添加内容，默认是会忽略的，如果不想忽略，就在子组件中添加<code>&lt;slot&gt;</code>标签作为插槽来填充该内容。</p>
<h5 id="普通插槽"><a href="#普通插槽" class="headerlink" title="普通插槽"></a>普通插槽</h5><p>在<code>&lt;slot&gt;</code>中添加内容，</p>
<p>例：</p>
<p>先在子组件中添加<code>&lt;slot&gt;</code>插槽</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎来到我的世界，&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加插槽--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在根组件中填充内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">msg</span>=<span class="string">&quot;古一&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>你好，召唤师<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/123.png"></p>
<p><em>注意：<code>&lt;slot&gt;xxx&lt;/slot&gt;</code>若插槽中有内容，会覆盖根组件标签内的填充内容。</em></p>
<h5 id="命名插槽"><a href="#命名插槽" class="headerlink" title="命名插槽"></a>命名插槽</h5><p>当需要多个不同的插槽时，可以给插槽命名：</p>
<p>子组件添加插槽</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎来到我的世界，&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加插槽--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;slot1&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>根组件插入内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">msg</span>=<span class="string">&quot;古一&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&quot;slot1&quot;</span>&gt;</span>他日若遂凌云志，敢笑黄巢不丈夫<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在vue2.6之后的版本也可以这样写：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">     </span><br><span class="line"><span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">msg</span>=<span class="string">&quot;古一&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:slot1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&quot;slot1&quot;</span>&gt;</span>他日若遂凌云志，敢笑黄巢不丈夫           <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>Vue.js 路由允许我们通过不同的 URL 访问不同的内容，通过 Vue.js 可以实现多视图的单页Web应用（single page web application，SPA）。</p>
<h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install vue<span class="literal">-router</span></span><br></pre></td></tr></table></figure>

<h4 id="简单路由"><a href="#简单路由" class="headerlink" title="简单路由"></a>简单路由</h4><p>新建一个js文件专门存放路由信息</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/js.png"></p>
<p><code>index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 1、导入路由</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、导入子组件</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">&#x27;@/components/HelloWorld&#x27;</span></span><br><span class="line"><span class="keyword">import</span> pl <span class="keyword">from</span> <span class="string">&#x27;@/components/ProjectsList&#x27;</span></span><br><span class="line"><span class="keyword">import</span> pln <span class="keyword">from</span> <span class="string">&#x27;@/components/ProjectsListNew&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、注册路由</span></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    <span class="comment">// routes数组中的每个对象，就对应一条路由</span></span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: HelloWorld&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/pl&#x27;</span>, <span class="attr">component</span>: pl&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/pln&#x27;</span>, <span class="attr">component</span>: pln&#125;,</span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、导出路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>

<p>然后在<code>main.js</code>中导入路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果路由文件名为index.js，这里可以省略/index.js</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br></pre></td></tr></table></figure>

<p>最后在根组件中指明路由视图：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>访问不同的url，就能显示对应的组件内容。</p>
<h4 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    <span class="comment">// routes数组中的每个对象，就对应一条路由</span></span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: HelloWorld&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/pl&#x27;</span>,</span><br><span class="line">      component: pl,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">&#x27;/pln&#x27;</span>, <span class="attr">component</span>: pln&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p><code>axios</code>是一个很流行的请求库，封装了<code>ajax</code>，是vue发起异步请求的标配。</p>
<h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install axios <span class="literal">-S</span></span><br></pre></td></tr></table></figure>

<h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><p>在<code>HelloWorld</code>子组件中引入<code>axios</code>，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;hello&quot;&gt;</span><br><span class="line">    &lt;h1&gt;欢迎来到我的世界&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;el-image :src&#x3D;&quot;url&quot; fit&#x3D;&quot;cover&quot;&gt;&lt;&#x2F;el-image&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import axios from &#39;axios&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      url: &#39;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    axios.get(&#39;https:&#x2F;&#x2F;dog.ceo&#x2F;api&#x2F;breeds&#x2F;image&#x2F;random&#39;)</span><br><span class="line">      .then(response &#x3D;&gt; &#123;</span><br><span class="line">        this.url &#x3D; response.data.message</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(function (err) &#123;</span><br><span class="line">        console.log(err)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>如果每个页面都与后端有交互，那每个页面都会调用axios发起请求，为了方便维护，所以会把所有请求api统一管理起来，新建一个管理所有api的js文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> host = <span class="string">&#x27;https://dog.ceo&#x27;</span></span><br><span class="line"><span class="comment">// 定义一个变量dogs来接收axios发起请求后返回的response</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> dogs = <span class="function">() =&gt;</span> &#123; <span class="keyword">return</span> axios.get(<span class="string">`<span class="subst">$&#123;host&#125;</span>/api/breeds/image/random`</span>) &#125;</span><br></pre></td></tr></table></figure>

<p>导入到组件中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;dogs&#125; from &#39;..&#x2F;api&#x2F;api&#39;</span><br><span class="line">&#x2F;&#x2F; import axios from &#39;axios&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      url: &#39;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    dogs &#x2F;&#x2F;引用dogs</span><br><span class="line">      .then(response &#x3D;&gt; &#123;</span><br><span class="line">        this.url &#x3D; response.data.message</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(function (err) &#123;</span><br><span class="line">        console.log(err)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>接口自动化框架设计-API Object</title>
    <url>/posts/e4b7ce0d.html</url>
    <content><![CDATA[<p><strong>API Object</strong>是<strong>Page Object</strong>设计模式在接口测试上的一种延伸，顾名思义，这里是将各种基础接口进行了一层抽象封装，将其作为object，通过不同的API对象调用来组装成不同的业务流场景。因为ui自动化测试面临较多变更，所以Page Object模式的价值比较大，而如果是针对单接口的简单接口测试，其实接口层相对稳定，封装po的价值并不明显。</p>
<p>但是，实际项目中往往不仅是需要单接口自动化测试，更多且更有价值的是业务流的接口自动化测试，而业务流的接口测试，通常一个业务会有很多的接口依赖和调用，并且有些接口会有非常多的http协议字段填充，比如各种<code>headers</code>、<code>token</code>以及默认字段；有些接口会反复调用，比如提现业务中会调用获取账户id的接口，充值业务中也会涉及到获取账户id的接口；有些接口会有较多的处理，比如加解密等。而针对这些情况，尤其是当项目接口越来越多，业务越来越繁杂，API Object的优势就凸显出来了。（下面以一个贷款项目详细说明）</p>
<h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><ul>
<li>python</li>
<li>requests</li>
<li>pytest</li>
<li>yaml</li>
<li>模板替换</li>
<li>allure</li>
</ul>
<h3 id="分层设计"><a href="#分层设计" class="headerlink" title="分层设计"></a>分层设计</h3><p>整个框架分为五层：<code>Base层</code>、<code>接口层</code>、<code>业务层</code>、<code>用例层</code>、<code>数据层</code>。</p>
<p>如图所示：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/img/api.png"></p>
<p>继承关系：用例层–&gt;业务层–&gt;接口层–&gt;Base层。</p>
<p>调用关系：用例层（从数据层拿测试数据）–&gt;业务层–&gt;接口层–&gt;Base层。</p>
<h4 id="Base层"><a href="#Base层" class="headerlink" title="Base层"></a>Base层</h4><p><strong>baseapi</strong>用于封装通用的接口流程方法，它代表的是通用接口的封装，用于跟各个api object提供支持，如提供发送http请求、读取yaml文件、替换数据等公共方法，而无关业务逻辑。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> allure</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> common.handle_assert <span class="keyword">import</span> HandleAssert</span><br><span class="line"><span class="keyword">from</span> common.handle_path <span class="keyword">import</span> CONF_DIR</span><br><span class="line"><span class="keyword">from</span> common.utils <span class="keyword">import</span> Utils</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseApi</span>:</span></span><br><span class="line">    conf_path = os.path.join(CONF_DIR, <span class="string">&#x27;config.yaml&#x27;</span>)</span><br><span class="line">    <span class="comment"># 配置文件数据</span></span><br><span class="line">    conf_data = Utils().handle_yaml(conf_path)</span><br><span class="line">    host = conf_data[<span class="string">&#x27;env&#x27;</span>][<span class="string">&#x27;host&#x27;</span>]</span><br><span class="line">    headers = conf_data[<span class="string">&#x27;request_headers&#x27;</span>][<span class="string">&#x27;headers&#x27;</span>]</span><br><span class="line">    account = conf_data[<span class="string">&#x27;account&#x27;</span>]</span><br><span class="line">    investor_account = conf_data[<span class="string">&#x27;investor_account&#x27;</span>]</span><br><span class="line">    mysql_conf = conf_data[<span class="string">&#x27;mysql&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_http</span>(<span class="params">self, data:dict</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        发送http请求</span></span><br><span class="line"><span class="string">        :param data: 请求数据</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.__api_log(**data)</span><br><span class="line">            response = requests.request(**data)</span><br><span class="line">            logger.info(<span class="string">f&quot;响应结果为：<span class="subst">&#123;response.status_code&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger.error(<span class="string">f&#x27;发送请求失败，请求参数为：<span class="subst">&#123;data&#125;</span>&#x27;</span>)</span><br><span class="line">            logger.exception(<span class="string">f&#x27;发生的错误为：<span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">raise</span> e</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_yaml</span>(<span class="params">file_name</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        读取yaml文件</span></span><br><span class="line"><span class="string">        :param file_name: 文件路径名称</span></span><br><span class="line"><span class="string">        :return: dict</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> Utils.handle_yaml(file_name)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_token</span>(<span class="params">response</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        处理并提取token</span></span><br><span class="line"><span class="string">        :param response:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> Utils.handle_token(response)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line"><span class="meta">    @allure.step(&#x27;step:数据替换&#x27;)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">template</span>(<span class="params">source_data: str, data: dict</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        替换数据</span></span><br><span class="line"><span class="string">        :param source_data: 源数据</span></span><br><span class="line"><span class="string">        :param data: 替换内容，如&#123;data:new_data&#125;</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Utils.handle_template(source_data, data)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_two_decimal</span>(<span class="params">data</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将整数或浮点数转化为两位数decimal</span></span><br><span class="line"><span class="string">        :param data:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> Utils.handle_decimal(data)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">random_phone</span>():</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        生成随机手机号</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> Utils.handle_random_phone()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__api_log</span>(<span class="params">method, url, headers=None, params=None, json=None</span>):</span></span><br><span class="line">        logger.info(<span class="string">f&quot;请求方式：<span class="subst">&#123;method&#125;</span>&quot;</span>)</span><br><span class="line">        logger.info(<span class="string">f&quot;请求地址：<span class="subst">&#123;url&#125;</span>&quot;</span>)</span><br><span class="line">        logger.info(<span class="string">f&quot;请求头：<span class="subst">&#123;headers&#125;</span>&quot;</span>)</span><br><span class="line">        logger.info(<span class="string">f&quot;请求参数：<span class="subst">&#123;params&#125;</span>&quot;</span>)</span><br><span class="line">        logger.info(<span class="string">f&quot;请求体：<span class="subst">&#123;json&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">assert_equal</span>(<span class="params">ex, re</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        断言相等</span></span><br><span class="line"><span class="string">        :param ex:预期结果</span></span><br><span class="line"><span class="string">        :param re:实际结果</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> HandleAssert.eq(ex, re)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">assert_contains</span>(<span class="params">content, target</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        断言包含</span></span><br><span class="line"><span class="string">        :param content: 文本内容</span></span><br><span class="line"><span class="string">        :param target: 目标文本</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> HandleAssert.contains(content, target)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此外，<code>baseapi</code>的核心只关心api的通用逻辑（遵循设计模式中单一职责原则），所以这里对<code>baseapi</code>做了瘦身，解耦了无关逻辑（ 比如它不需要关心yaml用哪个库，能搞定就行 ），因此将工具方法单独封装到<code>utils.py</code>模块中，<code>baseapi</code>只需调用即可。</p>
<p><em>utils.py</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">from</span> jsonpath <span class="keyword">import</span> jsonpath</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> Template</span><br><span class="line"><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Utils</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;提供工具方法&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_yaml</span>(<span class="params">cls, file_name</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        读取yaml文件</span></span><br><span class="line"><span class="string">        :param file_name:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            yaml_data = yaml.safe_load(open(file_name, encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger.error(<span class="string">f&#x27;yaml文件读取失败，文件名称：<span class="subst">&#123;file_name&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">raise</span> e</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> yaml_data</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_token</span>(<span class="params">cls, response</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        组装token</span></span><br><span class="line"><span class="string">        :param response:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        token_type = jsonpath(response.json(), <span class="string">&#x27;$..token_type&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        token_value = jsonpath(response.json(), <span class="string">&#x27;$..token&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        token = <span class="string">f&#x27;<span class="subst">&#123;token_type&#125;</span> <span class="subst">&#123;token_value&#125;</span>&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> token</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_template</span>(<span class="params">cls, source_data, replace_data: dict, </span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        替换文本变量</span></span><br><span class="line"><span class="string">        :param source_data:</span></span><br><span class="line"><span class="string">        :param replace_data:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        res = Template(str(source_data)).safe_substitute(**replace_data)</span><br><span class="line">        <span class="keyword">return</span> yaml.safe_load(res)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_decimal</span>(<span class="params">cls, data: int</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将小数或整数转换为两位数decimal</span></span><br><span class="line"><span class="string">        :param data:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        x = <span class="string">&#x27;&#123;0:.2f&#125;&#x27;</span>.format(float(data))</span><br><span class="line">        <span class="keyword">return</span> Decimal(x)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_random_phone</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        生成随机手机号</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        fake = Faker(locale=<span class="string">&#x27;zh_CN&#x27;</span>)</span><br><span class="line">        phone_number = fake.phone_number()</span><br><span class="line">        <span class="keyword">return</span> phone_number</span><br></pre></td></tr></table></figure>

<h4 id="接口层"><a href="#接口层" class="headerlink" title="接口层"></a>接口层</h4><p>接口层是对所有基础单接口的封装，负责http协议的填充。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> allure</span><br><span class="line"><span class="keyword">from</span> jsonpath <span class="keyword">import</span> jsonpath</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> common.base_api <span class="keyword">import</span> BaseApi</span><br><span class="line"><span class="keyword">from</span> common.wrapper <span class="keyword">import</span> api_call</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemberApi</span>(<span class="params">BaseApi</span>):</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @api_call</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login_api</span>(<span class="params">self, user=BaseApi(<span class="params"></span>).account[<span class="string">&#x27;user&#x27;</span>], pwd=BaseApi(<span class="params"></span>).account[<span class="string">&#x27;pwd&#x27;</span>]</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        登录接口</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        api = self.conf_data[<span class="string">&#x27;member_api&#x27;</span>][<span class="string">&#x27;login&#x27;</span>]</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;url&#x27;</span>: self.host + api,</span><br><span class="line">            <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;headers&#x27;</span>: self.headers,</span><br><span class="line">            <span class="string">&#x27;json&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;mobile_phone&#x27;</span>: user,</span><br><span class="line">                <span class="string">&#x27;pwd&#x27;</span>: pwd</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        response = self.send_http(data)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">    @allure.step(&#x27;step:调用获取登录结果api&#x27;)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_login_data</span>(<span class="params">self, user=BaseApi(<span class="params"></span>).account[<span class="string">&#x27;user&#x27;</span>], pwd=BaseApi(<span class="params"></span>).account[<span class="string">&#x27;pwd&#x27;</span>]</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        提取处理登录响应数据，包括id、leave_amount、mobile_phone、reg_name</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        response = self.login_api(user, pwd)</span><br><span class="line">        res = response.json()</span><br><span class="line">        login_data = dict()</span><br><span class="line">        login_data[<span class="string">&#x27;token&#x27;</span>] = self.get_token(response)</span><br><span class="line">        login_data[<span class="string">&#x27;member_id&#x27;</span>] = jsonpath(res, <span class="string">&#x27;$..id&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        login_data[<span class="string">&#x27;leave_amount&#x27;</span>] = jsonpath(res, <span class="string">&#x27;$..leave_amount&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        login_data[<span class="string">&#x27;mobile_phone&#x27;</span>] = jsonpath(res, <span class="string">&#x27;$..mobile_phone&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        login_data[<span class="string">&#x27;reg_name&#x27;</span>] = jsonpath(res, <span class="string">&#x27;$..reg_name&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> login_data</span><br><span class="line"></span><br><span class="line"><span class="meta">    @api_call</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">register_api</span>(<span class="params">self, mobile_phone: str, pwd: str, member_type: int, reg_name=None</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        注册接口</span></span><br><span class="line"><span class="string">        :param mobile_phone: 手机号</span></span><br><span class="line"><span class="string">        :param pwd: 密码</span></span><br><span class="line"><span class="string">        :param member_type: 0-管理员，1-普通会员，不传默认为1</span></span><br><span class="line"><span class="string">        :param reg_name:注册名</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        api = self.conf_data[<span class="string">&#x27;member_api&#x27;</span>][<span class="string">&#x27;register&#x27;</span>]</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;url&#x27;</span>: self.host + api,</span><br><span class="line">            <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;headers&#x27;</span>: self.headers,</span><br><span class="line">            <span class="string">&#x27;json&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;mobile_phone&#x27;</span>: mobile_phone,</span><br><span class="line">                <span class="string">&#x27;pwd&#x27;</span>: pwd,</span><br><span class="line">                <span class="string">&#x27;type&#x27;</span>: member_type,</span><br><span class="line">                <span class="comment"># &#x27;reg_name&#x27;: reg_name</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> reg_name:</span><br><span class="line">            data[<span class="string">&#x27;json&#x27;</span>][<span class="string">&#x27;reg_name&#x27;</span>] = reg_name</span><br><span class="line">        response = self.send_http(data)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">    @api_call</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recharge_api</span>(<span class="params">self, member_id: int, amount: float, token</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        账户充值接口</span></span><br><span class="line"><span class="string">        :param member_id: 用户id</span></span><br><span class="line"><span class="string">        :param amount: 充值金额（最多小数点后两位）</span></span><br><span class="line"><span class="string">        :param token:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        api = self.conf_data[<span class="string">&#x27;member_api&#x27;</span>][<span class="string">&#x27;recharge&#x27;</span>]</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;url&#x27;</span>: self.host + api,</span><br><span class="line">            <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;headers&#x27;</span>: self.headers,</span><br><span class="line">            <span class="string">&#x27;json&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;member_id&#x27;</span>: member_id,</span><br><span class="line">                <span class="string">&#x27;amount&#x27;</span>: amount</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        data[<span class="string">&#x27;headers&#x27;</span>].update(&#123;<span class="string">&#x27;Authorization&#x27;</span>: token&#125;)</span><br><span class="line">        response = self.send_http(data)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">    @api_call</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">withdraw_api</span>(<span class="params">self, member_id: int, amount: float, token</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        账户提现接口</span></span><br><span class="line"><span class="string">        :param member_id: 用户id</span></span><br><span class="line"><span class="string">        :param amount: 提现金额（最多小数点后两位）</span></span><br><span class="line"><span class="string">        :param token:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        api = self.conf_data[<span class="string">&#x27;member_api&#x27;</span>][<span class="string">&#x27;withdraw&#x27;</span>]</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;url&#x27;</span>: self.host + api,</span><br><span class="line">            <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;headers&#x27;</span>: self.headers,</span><br><span class="line">            <span class="string">&#x27;json&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;member_id&#x27;</span>: member_id,</span><br><span class="line">                <span class="string">&#x27;amount&#x27;</span>: amount</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        self.headers[<span class="string">&#x27;Authorization&#x27;</span>] = token</span><br><span class="line">        response = self.send_http(data)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">    @api_call</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info_update_api</span>(<span class="params">self, member_id: int, reg_name: str, token</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        用户信息更新接口</span></span><br><span class="line"><span class="string">        :param member_id:用户id</span></span><br><span class="line"><span class="string">        :param reg_name:修改名称</span></span><br><span class="line"><span class="string">        :param token:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        api = self.conf_data[<span class="string">&#x27;member_api&#x27;</span>][<span class="string">&#x27;update&#x27;</span>]</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;url&#x27;</span>: self.host + api,</span><br><span class="line">            <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;patch&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;headers&#x27;</span>: self.headers,</span><br><span class="line">            <span class="string">&#x27;json&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;member_id&#x27;</span>: member_id,</span><br><span class="line">                <span class="string">&#x27;reg_name&#x27;</span>: reg_name</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># data[&#x27;headers&#x27;].update(&#123;&#x27;Authorization&#x27;: token&#125;)</span></span><br><span class="line">        self.headers[<span class="string">&#x27;Authorization&#x27;</span>] = token</span><br><span class="line">        response = self.send_http(data)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">    @api_call</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_user_info_api</span>(<span class="params">self, member_id, token</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取单个用户信息接口</span></span><br><span class="line"><span class="string">        :param member_id:用户id</span></span><br><span class="line"><span class="string">        :param token:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;url&#x27;</span>: self.host + <span class="string">f&#x27;/member/<span class="subst">&#123;member_id&#125;</span>/info&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;headers&#x27;</span>: self.headers,</span><br><span class="line">        &#125;</span><br><span class="line">        self.headers[<span class="string">&#x27;Authorization&#x27;</span>] = token</span><br><span class="line">        response = self.send_http(data)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>所有api进行http协议填充后，发送http请求并返回response，供后续对响应结果进行相关处理。</p>
<h4 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h4><p>这一层，即业务流层，完成测试数据的组装并且通过调用不同的接口来实现具体业务逻辑。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> allure</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> common.wrapper <span class="keyword">import</span> log_info</span><br><span class="line"><span class="keyword">from</span> api_member.member_api <span class="keyword">import</span> MemberApi</span><br><span class="line"><span class="keyword">from</span> common.handle_mysql <span class="keyword">import</span> HandleMysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemberCase</span>(<span class="params">MemberApi</span>):</span></span><br><span class="line"><span class="meta">    @allure.step(&#x27;step:调用业务api-注册&#x27;)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">case_register</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        注册业务场景</span></span><br><span class="line"><span class="string">        :param data:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        data = self.template(data, &#123;<span class="string">&#x27;mobile_phone&#x27;</span>: self.random_phone()&#125;)</span><br><span class="line">        res = self.register_api(**data).json()</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="meta">    @allure.step(&#x27;step:调用业务api-充值&#x27;)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">case_recharge</span>(<span class="params">self, data, login_data, db: HandleMysql</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        账户充值业务场景</span></span><br><span class="line"><span class="string">        :param data: 充值接口所需参数</span></span><br><span class="line"><span class="string">        :param login_data: 登录响应结果提取</span></span><br><span class="line"><span class="string">        :param db: 数据库连接对象</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 替换数据</span></span><br><span class="line">        data = self.template(data, &#123;<span class="string">&#x27;member_id&#x27;</span>: login_data[<span class="string">&#x27;member_id&#x27;</span>],</span><br><span class="line">                                    <span class="string">&#x27;mobile_phone&#x27;</span>: login_data[<span class="string">&#x27;mobile_phone&#x27;</span>]&#125;)</span><br><span class="line">        <span class="comment"># logger.info(f&#x27;替换后的数据:&#123;data&#125;&#x27;)</span></span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">&#x27;sql&#x27;</span>]:</span><br><span class="line">            <span class="comment"># 充值前账户余额</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                before_balance: Decimal = db.get_one(data[<span class="string">&#x27;sql&#x27;</span>])[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                logger.error(<span class="string">&#x27;报错了&#x27;</span>)</span><br><span class="line">                logger.exception(e)</span><br><span class="line">                <span class="keyword">raise</span> e</span><br><span class="line">            <span class="comment"># logger.info(f&#x27;充值前账户余额：&#123;before_balance&#125;&#x27;)</span></span><br><span class="line">            recharge_response = self.recharge_api(data[<span class="string">&#x27;member_id&#x27;</span>], data[<span class="string">&#x27;amount&#x27;</span>], login_data[<span class="string">&#x27;token&#x27;</span>])</span><br><span class="line">            res = recharge_response.json()</span><br><span class="line">            <span class="comment"># 充值后账户余额</span></span><br><span class="line">            after_balance: Decimal = db.get_one(data[<span class="string">&#x27;sql&#x27;</span>])[<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># logger.info(f&#x27;充值后账户余额：&#123;after_balance&#125;&#x27;)</span></span><br><span class="line">            recharge: Decimal = after_balance - before_balance</span><br><span class="line">            <span class="comment"># logger.info(f&#x27;充值金额：&#123;recharge&#125;&#x27;)</span></span><br><span class="line">            res[<span class="string">&#x27;recharge&#x27;</span>] = recharge</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            recharge_response = self.recharge_api(data[<span class="string">&#x27;member_id&#x27;</span>], data[<span class="string">&#x27;amount&#x27;</span>], login_data[<span class="string">&#x27;token&#x27;</span>])</span><br><span class="line">            res = recharge_response.json()</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="meta">    @allure.step(&#x27;step:调用业务api-提现&#x27;)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">case_withdraw</span>(<span class="params">self, data, login_data, db: HandleMysql</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        账户提现业务场景</span></span><br><span class="line"><span class="string">        :param data: 提现接口所需参数</span></span><br><span class="line"><span class="string">        :param login_data: 登录响应结果提取</span></span><br><span class="line"><span class="string">        :param db: 数据库连接对象</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 替换数据</span></span><br><span class="line">        data = self.template(data, &#123;<span class="string">&#x27;member_id&#x27;</span>: login_data[<span class="string">&#x27;member_id&#x27;</span>],</span><br><span class="line">                                    <span class="string">&#x27;mobile_phone&#x27;</span>: login_data[<span class="string">&#x27;mobile_phone&#x27;</span>]&#125;)</span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">&#x27;sql&#x27;</span>]:</span><br><span class="line">            <span class="comment"># 充值前账户余额</span></span><br><span class="line">            before_balance: Decimal = db.get_one(data[<span class="string">&#x27;sql&#x27;</span>])[<span class="number">0</span>]</span><br><span class="line">            withdraw_response = self.withdraw_api(data[<span class="string">&#x27;member_id&#x27;</span>], data[<span class="string">&#x27;amount&#x27;</span>], login_data[<span class="string">&#x27;token&#x27;</span>])</span><br><span class="line">            res = withdraw_response.json()</span><br><span class="line">            <span class="comment"># 充值后账户余额</span></span><br><span class="line">            after_balance: Decimal = db.get_one(data[<span class="string">&#x27;sql&#x27;</span>])[<span class="number">0</span>]</span><br><span class="line">            withdraw: Decimal = before_balance - after_balance</span><br><span class="line">            res[<span class="string">&#x27;withdraw&#x27;</span>] = withdraw</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            recharge_response = self.recharge_api(data[<span class="string">&#x27;member_id&#x27;</span>], data[<span class="string">&#x27;amount&#x27;</span>], login_data[<span class="string">&#x27;token&#x27;</span>])</span><br><span class="line">            res = recharge_response.json()</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="用例层"><a href="#用例层" class="headerlink" title="用例层"></a>用例层</h4><p>这一层，通过调用不同的业务，来完成相关测试。用例层不关心底层逻辑，比如某个业务具体是如何实现的，测试数据是具体如何清洗组装的，它只关心测试逻辑，这个业务场景如何测试，如何断言。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> allure</span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> common.handle_path <span class="keyword">import</span> DATA_DIR</span><br><span class="line"><span class="keyword">from</span> case_member.member_case <span class="keyword">import</span> MemberCase</span><br><span class="line"></span><br><span class="line">case_data_path = os.path.join(DATA_DIR, <span class="string">&#x27;member_case_data.yaml&#x27;</span>)</span><br><span class="line">datas = yaml.safe_load(open(case_data_path, encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@allure.feature(&#x27;人员&#x27;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMember</span>(<span class="params">MemberCase</span>):</span></span><br><span class="line">    conf_mysql = MemberCase().mysql_conf</span><br><span class="line"></span><br><span class="line"><span class="meta">    @allure.story(&#x27;登录&#x27;)</span></span><br><span class="line"><span class="meta">    @allure.title(&#x27;&#123;data[title]&#125;&#x27;)</span></span><br><span class="line"><span class="meta">    @pytest.mark.parametrize(&#x27;data&#x27;, datas[&#x27;login&#x27;])</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_login</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;登录功能验证&quot;&quot;&quot;</span></span><br><span class="line">        result = self.login_api(**data[<span class="string">&#x27;account&#x27;</span>]).json()</span><br><span class="line">        self.assert_equal(data[<span class="string">&#x27;expected&#x27;</span>][<span class="string">&#x27;code&#x27;</span>], result[<span class="string">&#x27;code&#x27;</span>])</span><br><span class="line">        self.assert_equal(data[<span class="string">&#x27;expected&#x27;</span>][<span class="string">&#x27;msg&#x27;</span>], result[<span class="string">&#x27;msg&#x27;</span>])</span><br><span class="line">        logger.info(<span class="string">&#x27;用例通过！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @allure.story(&#x27;注册&#x27;)</span></span><br><span class="line"><span class="meta">    @allure.title(&#x27;&#123;data[title]&#125;&#x27;)</span></span><br><span class="line"><span class="meta">    @pytest.mark.parametrize(&#x27;data&#x27;, datas[&#x27;register&#x27;])</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_register</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;注册功能验证&quot;&quot;&quot;</span></span><br><span class="line">        result = self.case_register(data[<span class="string">&#x27;account&#x27;</span>])</span><br><span class="line">        self.assert_equal(data[<span class="string">&#x27;expected&#x27;</span>][<span class="string">&#x27;code&#x27;</span>], result[<span class="string">&#x27;code&#x27;</span>])</span><br><span class="line">        self.assert_equal(data[<span class="string">&#x27;expected&#x27;</span>][<span class="string">&#x27;msg&#x27;</span>], result[<span class="string">&#x27;msg&#x27;</span>])</span><br><span class="line">        logger.info(<span class="string">&#x27;用例通过！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @allure.story(&#x27;充值&#x27;)</span></span><br><span class="line"><span class="meta">    @allure.title(&#x27;&#123;data[title]&#125;&#x27;)</span></span><br><span class="line"><span class="meta">    @pytest.mark.parametrize(&#x27;connect_mysql&#x27;, [conf_mysql], indirect=True)</span></span><br><span class="line"><span class="meta">    @pytest.mark.parametrize(&#x27;data&#x27;, datas[&#x27;recharge&#x27;])</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_recharge</span>(<span class="params">self, data, get_login_data, connect_mysql</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;充值业务验证&quot;&quot;&quot;</span></span><br><span class="line">        login_data = get_login_data</span><br><span class="line">        db = connect_mysql</span><br><span class="line">        result = self.case_recharge(data, login_data, db)</span><br><span class="line">        self.assert_equal(data[<span class="string">&#x27;expected&#x27;</span>][<span class="string">&#x27;code&#x27;</span>], result[<span class="string">&#x27;code&#x27;</span>])</span><br><span class="line">        self.assert_equal(data[<span class="string">&#x27;expected&#x27;</span>][<span class="string">&#x27;msg&#x27;</span>], result[<span class="string">&#x27;msg&#x27;</span>])</span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">&#x27;sql&#x27;</span>]:</span><br><span class="line">            self.assert_equal(self.to_two_decimal(data[<span class="string">&#x27;amount&#x27;</span>]), result[<span class="string">&#x27;recharge&#x27;</span>])</span><br><span class="line">        logger.info(<span class="string">&#x27;用例通过！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @allure.story(&#x27;提现&#x27;)</span></span><br><span class="line"><span class="meta">    @allure.title(&#x27;&#123;data[title]&#125;&#x27;)</span></span><br><span class="line"><span class="meta">    @pytest.mark.parametrize(&#x27;connect_mysql&#x27;, [conf_mysql], indirect=True)</span></span><br><span class="line"><span class="meta">    @pytest.mark.parametrize(&#x27;data&#x27;, datas[&#x27;withdraw&#x27;])</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_withdraw</span>(<span class="params">self, data, get_login_data, connect_mysql</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;提现业务验证&quot;&quot;&quot;</span></span><br><span class="line">        login_data = get_login_data</span><br><span class="line">        db = connect_mysql</span><br><span class="line">        logger.info(data)</span><br><span class="line">        result = self.case_withdraw(data, login_data, db)</span><br><span class="line">        self.assert_equal(data[<span class="string">&#x27;expected&#x27;</span>][<span class="string">&#x27;code&#x27;</span>], result[<span class="string">&#x27;code&#x27;</span>])</span><br><span class="line">        self.assert_equal(data[<span class="string">&#x27;expected&#x27;</span>][<span class="string">&#x27;msg&#x27;</span>], result[<span class="string">&#x27;msg&#x27;</span>])</span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">&#x27;sql&#x27;</span>]:</span><br><span class="line">            self.assert_equal(self.to_two_decimal(data[<span class="string">&#x27;amount&#x27;</span>]), result[<span class="string">&#x27;withdraw&#x27;</span>])</span><br><span class="line">        logger.info(<span class="string">&#x27;用例通过！&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果在测试用例中直接塞进去各种http协议的填充过程，会导致用例慢慢的丢失重心，尤其是当业务越来越繁杂后，用例会非常臃肿难以维护。测试用例还是要围绕业务进行，业务要围绕实现进行，通过分层可以让用例更优雅更简洁。</p>
<h4 id="数据层"><a href="#数据层" class="headerlink" title="数据层"></a>数据层</h4><p>测试数据（测试用例）通过<code>yaml</code>管理维护，结合<code>pytest.paramtrize</code>可以非常轻松完成数据驱动。在用例层获取yaml中的测试数据，然后将数据打包给业务层，业务层进行数据拆卸组装给到接口层，接口层再封装为http请求格式进行接口请求。这样当测试数据发生变化或者用例更新，我们将不用去更新测试代码，只需维护这份yaml文件即可。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登录接口</span></span><br><span class="line"><span class="attr">login:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">&#x27;确认输入正确账号密码登录成功&#x27;</span></span><br><span class="line">    <span class="attr">account:</span></span><br><span class="line">      <span class="attr">user:</span> <span class="string">&#x27;15882345570&#x27;</span></span><br><span class="line">      <span class="attr">pwd:</span> <span class="string">&#x27;admin123&#x27;</span></span><br><span class="line">    <span class="attr">expected:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">0</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;OK&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">&#x27;title&#x27;:</span> <span class="string">&#x27;验证手机号为空登录失败&#x27;</span></span><br><span class="line">    <span class="attr">account:</span></span><br><span class="line">      <span class="attr">&#x27;user&#x27;:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="attr">&#x27;pwd&#x27;:</span> <span class="string">&#x27;admin123&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;expected&#x27;:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">1</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;手机号码为空&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">&#x27;title&#x27;:</span> <span class="string">&#x27;验证密码为空登录失败&#x27;</span></span><br><span class="line">    <span class="attr">account:</span></span><br><span class="line">      <span class="attr">&#x27;user&#x27;:</span> <span class="string">&#x27;15882345570&#x27;</span></span><br><span class="line">      <span class="attr">&#x27;pwd&#x27;:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;expected&#x27;:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">1</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;密码为空&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">&#x27;title&#x27;:</span> <span class="string">&#x27;验证手机号未注册登录失败&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;account&#x27;:</span></span><br><span class="line">      <span class="attr">&#x27;user&#x27;:</span> <span class="string">&#x27;15880000000&#x27;</span></span><br><span class="line">      <span class="attr">&#x27;pwd&#x27;:</span> <span class="string">&#x27;admin123&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;expected&#x27;:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">1001</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;账号信息错误&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">&#x27;title&#x27;:</span> <span class="string">&#x27;验证密码错误登录失败&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;account&#x27;:</span></span><br><span class="line">      <span class="attr">&#x27;user&#x27;:</span> <span class="string">&#x27;15882345570&#x27;</span></span><br><span class="line">      <span class="attr">&#x27;pwd&#x27;:</span> <span class="string">&#x27;123123&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;expected&#x27;:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">1001</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;账号信息错误&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">&#x27;title&#x27;:</span> <span class="string">&#x27;验证手机号格式错误登录失败&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;account&#x27;:</span></span><br><span class="line">      <span class="attr">&#x27;user&#x27;:</span> <span class="string">&#x27;12345678910&#x27;</span></span><br><span class="line">      <span class="attr">&#x27;pwd&#x27;:</span> <span class="string">&#x27;123123&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;expected&#x27;:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">2</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;无效的手机格式&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册接口</span></span><br><span class="line"><span class="attr">register:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">&#x27;确认带注册名注册成功&#x27;</span></span><br><span class="line">    <span class="attr">account:</span></span><br><span class="line">      <span class="attr">mobile_phone:</span> <span class="string">&#x27;$mobile_phone&#x27;</span></span><br><span class="line">      <span class="attr">pwd:</span> <span class="string">&#x27;admin123&#x27;</span></span><br><span class="line">      <span class="attr">member_type:</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">      <span class="attr">reg_name:</span> <span class="string">&#x27;派大星&#x27;</span></span><br><span class="line">    <span class="attr">expected:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">0</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;OK&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">&#x27;确认不带注册名注册成功&#x27;</span></span><br><span class="line">    <span class="attr">account:</span></span><br><span class="line">      <span class="attr">mobile_phone:</span> <span class="string">&#x27;$mobile_phone&#x27;</span></span><br><span class="line">      <span class="attr">pwd:</span> <span class="string">&#x27;admin123&#x27;</span></span><br><span class="line">      <span class="attr">member_type:</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="attr">expected:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">0</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;OK&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">&#x27;验证不输入手机号注册失败&#x27;</span></span><br><span class="line">    <span class="attr">account:</span></span><br><span class="line">      <span class="attr">mobile_phone:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="attr">pwd:</span> <span class="string">&#x27;admin123&#x27;</span></span><br><span class="line">      <span class="attr">member_type:</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="attr">expected:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">1</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;手机号为空&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">&#x27;验证手机号长度为10位注册失败&#x27;</span></span><br><span class="line">    <span class="attr">account:</span></span><br><span class="line">      <span class="attr">mobile_phone:</span> <span class="string">&#x27;1351514174&#x27;</span></span><br><span class="line">      <span class="attr">pwd:</span> <span class="string">&#x27;admin123&#x27;</span></span><br><span class="line">      <span class="attr">member_type:</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="attr">expected:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">2</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;无效的手机格式&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">&#x27;验证手机号长度为12位注册失败&#x27;</span></span><br><span class="line">    <span class="attr">account:</span></span><br><span class="line">      <span class="attr">mobile_phone:</span> <span class="string">&#x27;135151417444&#x27;</span></span><br><span class="line">      <span class="attr">pwd:</span> <span class="string">&#x27;admin123&#x27;</span></span><br><span class="line">      <span class="attr">member_type:</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="attr">expected:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">2</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;无效的手机格式&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">&#x27;验证使用已注册手机号注册失败&#x27;</span></span><br><span class="line">    <span class="attr">account:</span></span><br><span class="line">      <span class="attr">mobile_phone:</span> <span class="string">&#x27;15882345570&#x27;</span></span><br><span class="line">      <span class="attr">pwd:</span> <span class="string">&#x27;admin123&#x27;</span></span><br><span class="line">      <span class="attr">member_type:</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="attr">expected:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">2</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;账号已存在&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">&#x27;验证密码为7位注册失败&#x27;</span></span><br><span class="line">    <span class="attr">account:</span></span><br><span class="line">      <span class="attr">mobile_phone:</span> <span class="string">&#x27;$mobile_phone&#x27;</span></span><br><span class="line">      <span class="attr">pwd:</span> <span class="string">&#x27;admin12&#x27;</span></span><br><span class="line">      <span class="attr">member_type:</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="attr">expected:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">2</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;密码格式为8到16位&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">&#x27;验证不输入密码注册失败&#x27;</span></span><br><span class="line">    <span class="attr">account:</span></span><br><span class="line">      <span class="attr">mobile_phone:</span> <span class="string">&#x27;$mobile_phone&#x27;</span></span><br><span class="line">      <span class="attr">pwd:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="attr">member_type:</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="attr">expected:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">1</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;密码为空&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">&#x27;验证注册名11位注册失败&#x27;</span></span><br><span class="line">    <span class="attr">account:</span></span><br><span class="line">      <span class="attr">mobile_phone:</span> <span class="string">&#x27;$mobile_phone&#x27;</span></span><br><span class="line">      <span class="attr">pwd:</span> <span class="string">&#x27;admin123&#x27;</span></span><br><span class="line">      <span class="attr">member_type:</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">      <span class="attr">reg_name:</span> <span class="string">&#x27;12345678901&#x27;</span></span><br><span class="line">    <span class="attr">expected:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">2</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;用户昵称长度超过10位&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">&#x27;验证type类型为2注册失败&#x27;</span></span><br><span class="line">    <span class="attr">account:</span></span><br><span class="line">      <span class="attr">mobile_phone:</span> <span class="string">&#x27;$mobile_phone&#x27;</span></span><br><span class="line">      <span class="attr">pwd:</span> <span class="string">&#x27;admin123&#x27;</span></span><br><span class="line">      <span class="attr">member_type:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line">    <span class="attr">expected:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">2</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;不支持的用户类型&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">&#x27;验证不输入类型注册失败&#x27;</span></span><br><span class="line">    <span class="attr">account:</span></span><br><span class="line">      <span class="attr">mobile_phone:</span> <span class="string">&#x27;$mobile_phone&#x27;</span></span><br><span class="line">      <span class="attr">pwd:</span> <span class="string">&#x27;admin123&#x27;</span></span><br><span class="line">      <span class="attr">member_type:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">expected:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">0</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;OK&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 充值接口</span></span><br><span class="line"><span class="attr">recharge:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">&#x27;title&#x27;:</span> <span class="string">&#x27;验证充值金额为整数充值成功&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;member_id&#x27;:</span> <span class="string">&#x27;$member_id&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;amount&#x27;:</span> <span class="number">600</span></span><br><span class="line">    <span class="attr">&#x27;expected&#x27;:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">0</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;OK&quot;</span>&#125;</span><br><span class="line">    <span class="attr">&#x27;sql&#x27;:</span> <span class="string">&#x27;SELECT leave_amount FROM futureloan.member WHERE mobile_phone=&quot;$mobile_phone&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">&#x27;title&#x27;:</span> <span class="string">&#x27;验证充值金额为1位小数充值成功&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;member_id&#x27;:</span> <span class="string">&#x27;$member_id&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;amount&#x27;:</span> <span class="number">600.1</span></span><br><span class="line">    <span class="attr">&#x27;expected&#x27;:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">0</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;OK&quot;</span>&#125;</span><br><span class="line">    <span class="attr">&#x27;sql&#x27;:</span> <span class="string">&#x27;SELECT leave_amount FROM futureloan.member WHERE mobile_phone=&quot;$mobile_phone&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">&#x27;title&#x27;:</span> <span class="string">&#x27;验证充值金额为2位小数充值成功&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;member_id&#x27;:</span> <span class="string">&#x27;$member_id&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;amount&#x27;:</span> <span class="number">600.22</span></span><br><span class="line">    <span class="attr">&#x27;expected&#x27;:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">0</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;OK&quot;</span>&#125;</span><br><span class="line">    <span class="attr">&#x27;sql&#x27;:</span> <span class="string">&#x27;SELECT leave_amount FROM futureloan.member WHERE mobile_phone=&quot;$mobile_phone&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">&#x27;title&#x27;:</span> <span class="string">&#x27;验证充值金额为50万充值成功&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;member_id&#x27;:</span> <span class="string">&#x27;$member_id&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;amount&#x27;:</span> <span class="number">500000</span></span><br><span class="line">    <span class="attr">&#x27;expected&#x27;:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">0</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;OK&quot;</span>&#125;</span><br><span class="line">    <span class="attr">&#x27;sql&#x27;:</span> <span class="string">&#x27;SELECT leave_amount FROM futureloan.member WHERE mobile_phone=&quot;$mobile_phone&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">&#x27;title&#x27;:</span> <span class="string">&#x27;验证会员id为空充值失败&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;member_id&#x27;:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;amount&#x27;:</span> <span class="number">600</span></span><br><span class="line">    <span class="attr">&#x27;expected&#x27;:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">1</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;用户id为空&quot;</span>&#125;</span><br><span class="line">    <span class="attr">&#x27;sql&#x27;:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">&#x27;title&#x27;:</span> <span class="string">&#x27;验证会员id不是当前登录的用户充值失败&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;member_id&#x27;:</span> <span class="string">&#x27;98999888&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;amount&#x27;:</span> <span class="number">600</span></span><br><span class="line">    <span class="attr">&#x27;expected&#x27;:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">1007</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;无权限访问，请检查参数&quot;</span>&#125;</span><br><span class="line">    <span class="attr">&#x27;sql&#x27;:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">&#x27;title&#x27;:</span> <span class="string">&#x27;验证充值金额为0充值失败&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;member_id&#x27;:</span> <span class="string">&#x27;$member_id&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;amount&#x27;:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">&#x27;expected&#x27;:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">2</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;余额必须大于0并且小于或者等于500000&quot;</span>&#125;</span><br><span class="line">    <span class="attr">&#x27;sql&#x27;:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">&#x27;title&#x27;:</span> <span class="string">&#x27;验证会员id为字符串充值失败&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;member_id&#x27;:</span> <span class="string">&#x27;abcde&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;amount&#x27;:</span> <span class="number">600</span></span><br><span class="line">    <span class="attr">&#x27;expected&#x27;:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">2</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;数字格式化异常&quot;</span>&#125;</span><br><span class="line">    <span class="attr">&#x27;sql&#x27;:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">&#x27;title&#x27;:</span> <span class="string">&#x27;验证充值金额为负数充值失败&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;member_id&#x27;:</span> <span class="string">&#x27;$member_id&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;amount&#x27;:</span> <span class="number">-600</span></span><br><span class="line">    <span class="attr">&#x27;expected&#x27;:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">2</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;余额必须大于0并且小于或者等于500000&quot;</span>&#125;</span><br><span class="line">    <span class="attr">&#x27;sql&#x27;:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">&#x27;title&#x27;:</span> <span class="string">&#x27;验证充值金额大于50万充值失败&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;member_id&#x27;:</span> <span class="string">&#x27;$member_id&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;amount&#x27;:</span> <span class="number">1000000</span></span><br><span class="line">    <span class="attr">&#x27;expected&#x27;:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">2</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;余额必须大于0并且小于或者等于500000&quot;</span>&#125;</span><br><span class="line">    <span class="attr">&#x27;sql&#x27;:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#提现接口</span></span><br><span class="line"><span class="attr">withdraw:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">&#x27;title&#x27;:</span> <span class="string">&#x27;验证提现金额为整数提现成功&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;member_id&#x27;:</span> <span class="string">&#x27;$member_id&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;amount&#x27;:</span> <span class="number">600</span></span><br><span class="line">    <span class="attr">&#x27;expected&#x27;:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">0</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;OK&quot;</span>&#125;</span><br><span class="line">    <span class="attr">&#x27;sql&#x27;:</span> <span class="string">&#x27;SELECT leave_amount FROM futureloan.member WHERE mobile_phone=&quot;$mobile_phone&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">&#x27;title&#x27;:</span> <span class="string">&#x27;验证提现金额为1位小数提现成功&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;member_id&#x27;:</span> <span class="string">&#x27;$member_id&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;amount&#x27;:</span> <span class="number">600.1</span></span><br><span class="line">    <span class="attr">&#x27;expected&#x27;:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">0</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;OK&quot;</span>&#125;</span><br><span class="line">    <span class="attr">&#x27;sql&#x27;:</span> <span class="string">&#x27;SELECT leave_amount FROM futureloan.member WHERE mobile_phone=&quot;$mobile_phone&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">&#x27;title&#x27;:</span> <span class="string">&#x27;验证提现金额为2位小数提现成功&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;member_id&#x27;:</span> <span class="string">&#x27;$member_id&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;amount&#x27;:</span> <span class="number">600.22</span></span><br><span class="line">    <span class="attr">&#x27;expected&#x27;:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">0</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;OK&quot;</span>&#125;</span><br><span class="line">    <span class="attr">&#x27;sql&#x27;:</span> <span class="string">&#x27;SELECT leave_amount FROM futureloan.member WHERE mobile_phone=&quot;$mobile_phone&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">&#x27;title&#x27;:</span> <span class="string">&#x27;验证提现金额为50万提现成功&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;member_id&#x27;:</span> <span class="string">&#x27;$member_id&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;amount&#x27;:</span> <span class="number">500000</span></span><br><span class="line">    <span class="attr">&#x27;expected&#x27;:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">0</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;OK&quot;</span>&#125;</span><br><span class="line">    <span class="attr">&#x27;sql&#x27;:</span> <span class="string">&#x27;SELECT leave_amount FROM futureloan.member WHERE mobile_phone=&quot;$mobile_phone&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">&#x27;title&#x27;:</span> <span class="string">&#x27;验证会员id为空提现失败&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;member_id&#x27;:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;amount&#x27;:</span> <span class="number">600</span></span><br><span class="line">    <span class="attr">&#x27;expected&#x27;:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">1</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;用户id为空&quot;</span>&#125;</span><br><span class="line">    <span class="attr">&#x27;sql&#x27;:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">&#x27;title&#x27;:</span> <span class="string">&#x27;验证提现金额为空提现失败&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;member_id&#x27;:</span> <span class="string">&#x27;$member_id&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;amount&#x27;:</span> <span class="number">600</span></span><br><span class="line">    <span class="attr">&#x27;expected&#x27;:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">1</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;余额为空&quot;</span>&#125;</span><br><span class="line">    <span class="attr">&#x27;sql&#x27;:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">&#x27;title&#x27;:</span> <span class="string">&#x27;验证提现金额为3位小数提现失败&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;member_id&#x27;:</span> <span class="string">&#x27;$member_id&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;amount&#x27;:</span> <span class="number">600.333</span></span><br><span class="line">    <span class="attr">&#x27;expected&#x27;:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">2</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;余额小数超过两位&quot;</span>&#125;</span><br><span class="line">    <span class="attr">&#x27;sql&#x27;:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="项目结构说明"><a href="#项目结构说明" class="headerlink" title="项目结构说明"></a>项目结构说明</h3><ul>
<li><p>apis —-&gt;接口层，单接口封装</p>
</li>
<li><p>cases —-&gt;业务层，业务场景封装</p>
</li>
<li><p>common  —-&gt;公共方法</p>
<ul>
<li>base_api —-&gt;baseapi层</li>
<li>handle_assert —-&gt;断言封装</li>
<li>handle_mysql —-&gt;mysql数据库操作封装</li>
<li>handle_path —-&gt;路径处理</li>
<li>utils —-&gt;工具方法封装</li>
<li>wrapper —-&gt;日志装饰器</li>
</ul>
</li>
<li><p>conf —-&gt;配置文件</p>
</li>
<li><p>data —-&gt;测试数据</p>
</li>
<li><p>log —&gt;日志</p>
</li>
<li><p>report —&gt;测试报告</p>
</li>
<li><p>testcases  —&gt;测试用例</p>
</li>
<li><p>conftest  —&gt;前置条件处理</p>
</li>
<li><p>pytest.ini  —&gt;pytest配置文件</p>
</li>
<li><p>run.py  —&gt;测试用例运行主程序</p>
</li>
</ul>
<h3 id="接口依赖处理"><a href="#接口依赖处理" class="headerlink" title="接口依赖处理"></a>接口依赖处理</h3><h4 id="token"><a href="#token" class="headerlink" title="token"></a>token</h4><p><code>token</code>或者<code>cookies</code>需要登录获取，后续其它接口大多需要其鉴权，因此将登录接口作为前置条件放于<code>conftest.py</code>中。</p>
<p><em>conftest.py</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为了避免频繁登录，级别可以根据需求设置</span></span><br><span class="line"><span class="comment"># 这里整个class只会调用一次登录</span></span><br><span class="line"><span class="meta">@pytest.fixture(scope=&#x27;class&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_login_data</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取登录数据&quot;&quot;&quot;</span></span><br><span class="line">    data = MemberApi().get_login_data()</span><br><span class="line">    <span class="comment"># 如果只需要token，可以直接返回token</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>

<p>这里返回的不是<code>token</code>，而是整个登录响应结果（字典），其中还包含了用户id、余额、token等信息，是因为其它接口还可能需要除token外的其它登录信息，而其它接口需要什么登录信息，直接字典取值即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_login_data</span>(<span class="params">self, user=BaseApi(<span class="params"></span>).account[<span class="string">&#x27;user&#x27;</span>], pwd=BaseApi(<span class="params"></span>).account[<span class="string">&#x27;pwd&#x27;</span>]</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    提取处理登录响应数据，包括id、leave_amount、mobile_phone、reg_name</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    response = self.login_api(user, pwd)</span><br><span class="line">    res = response.json()</span><br><span class="line">    login_data = dict()</span><br><span class="line">    login_data[<span class="string">&#x27;token&#x27;</span>] = self.get_token(response)</span><br><span class="line">    login_data[<span class="string">&#x27;member_id&#x27;</span>] = jsonpath(res, <span class="string">&#x27;$..id&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    login_data[<span class="string">&#x27;leave_amount&#x27;</span>] = jsonpath(res, <span class="string">&#x27;$..leave_amount&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    login_data[<span class="string">&#x27;mobile_phone&#x27;</span>] = jsonpath(res, <span class="string">&#x27;$..mobile_phone&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    login_data[<span class="string">&#x27;reg_name&#x27;</span>] = jsonpath(res, <span class="string">&#x27;$..reg_name&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> login_data</span><br></pre></td></tr></table></figure>

<p>如何获取传递token呢？</p>
<p>在用例中调用<code>conftest.py</code>的<code>get_login_data()</code>即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_demo</span>(<span class="params">self, get_login_data</span>):</span></span><br><span class="line">    login_data = get_login_data</span><br><span class="line">    token = login_data[<span class="string">&quot;token&quot;</span>]</span><br></pre></td></tr></table></figure>

<h4 id="测试数据动态处理"><a href="#测试数据动态处理" class="headerlink" title="测试数据动态处理"></a>测试数据动态处理</h4><p>测试数据中的参数有时候不能写死，而是动态变化由上一个接口的返回值中获取的。而本框架的测试数据又都是由yaml管理，那么如何能让yaml中的测试数据“动”起来呢？</p>
<p>本框架采用的是<strong>模板引擎替换</strong>技术。</p>
<p>举个栗子，比如在调用充值接口充值的时候，那么肯定要先拿到具体的需要充值的账户id，而账户id是由登录接口获取的，因此在构造充值测试数据时，账户id不能写死，而是以<code>$</code>标记，先调用登录接口拿到账户id，然后替换掉充值接口测试数据中的变量。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">recharge:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">&#x27;title&#x27;:</span> <span class="string">&#x27;验证充值金额为整数充值成功&#x27;</span></span><br><span class="line">      <span class="comment"># 以$标记表明该参数是动态变换，需要由实参来替换</span></span><br><span class="line">    <span class="attr">&#x27;member_id&#x27;:</span> <span class="string">&#x27;$member_id&#x27;</span></span><br><span class="line">    <span class="attr">&#x27;amount&#x27;:</span> <span class="number">600</span></span><br><span class="line">    <span class="attr">&#x27;expected&#x27;:</span> &#123;<span class="attr">&quot;code&quot;:</span> <span class="number">0</span>,<span class="attr">&quot;msg&quot;:</span> <span class="string">&quot;OK&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>具体替换方法，由python内置模块<code>string</code>实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> Template</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_template</span>(<span class="params">cls, source_data, replace_data: dict, </span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        替换文本变量</span></span><br><span class="line"><span class="string">        :param source_data:源数据</span></span><br><span class="line"><span class="string">        :param replace_data:需要替换的变量，如&#123;&#x27;member_id&#x27;: &#x27;12345&#x27;&#125;</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">    res = Template(str(source_data)).safe_substitute(**replace_data)</span><br><span class="line">    <span class="keyword">return</span> yaml.safe_load(res)</span><br></pre></td></tr></table></figure>

<h3 id="测试报告"><a href="#测试报告" class="headerlink" title="测试报告"></a>测试报告</h3><p>运行<code>run.py</code>后，当用例全部执行完毕，<code>allure</code>会自动收集测试报告到<code>/report/html/</code>中，打开<code>index.html</code>即可看到完整测试报告。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/img/rr.jpg"></p>
]]></content>
      <categories>
        <category>框架设计</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>接口自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰器使用总结</title>
    <url>/posts/5690c2ee.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在学习自动化测试框架<strong>unittest</strong>、<strong>pytest</strong>的时候，发现有很多类或者函数头上会带一顶**@<strong>开头的帽子，尤其是</strong>pytest<strong>中，很多核心的用法（像参数化、夹具等）都是通过这个家伙来实现的，看起来很高端的样子，那么这玩意到底是什么呢？它就是python中的一个重难点：</strong>装饰器**。</p>
<p>说到装饰器，那么就必须先了解另一个概念，<strong>闭包</strong>。</p>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>什么是<strong>闭包</strong>？简单来说就是<strong>一个函数定义中引用了函数外定义的变量，并且该函数可以在其定义环境外被执行，这样的一个函数我们称之为闭包</strong>。</p>
<blockquote>
<p>在计算机科学中，闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。</p>
</blockquote>
<p>直接上栗子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    greetings = <span class="string">&#x27;hello &#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">name</span>):</span></span><br><span class="line">        <span class="keyword">return</span> greetings + name</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">print(outer()(<span class="string">&#x27;古一&#x27;</span>)) <span class="comment"># 输出：hello 古一</span></span><br></pre></td></tr></table></figure>

<p>上面代码的意思：定义了一个外层函数<code>outer</code>和一个内部函数<code>inner</code>；在<code>outer</code>函数内部，又定义了一个变量<code>greetings</code>并赋值；然后在内部函数<code>inner</code>中调用了这个变量；最后<code>outer</code>函数的返回就是<code>inner</code>函数本身。</p>
<p>我们将其分解来看，先调用函数<code>outer</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(outer())</span><br><span class="line"><span class="comment"># 输出： &lt;function outer.&lt;locals&gt;.inner at 0x0000024AEF221E50&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看到<code>outer</code>返回了一个函数，其实就是它的内层函数<code>inner</code>，<code>outer()(&#39;古一&#39;)</code>这一句其实就等同于<code>inner(&#39;古一&#39;)</code>。</p>
<p>当我们用调试模式去走读这个闭包函数可以发现，进入<code>outer</code>函数内部后，当执行到<code>def inner(name):</code>这里后，并不会马上进入<code>inner</code>函数的内部，而是先执行<code>return inner</code>这句，即先走完外层函数<code>outer</code>的生命周期，然后才会开始进入<code>inner</code>内部，而且，虽然外层函数的生命周期已经结束，但是**内层函数<code>inner</code>仍然可以调用<code>outer</code>的局部变量<code>greeting</code>**！这就是闭包的特别之处。</p>
<p>由此，我们可以简单总结出闭包的特点：</p>
<ul>
<li>函数中嵌套了另一个函数</li>
<li>外层函数的返回值是嵌套的内层函数</li>
<li>内层函数对外部函数有访问（即对外部作用域有非全局变量的引用）</li>
</ul>
<p>说了这么多闭包的东西，它跟装饰器有什么关系呢？</p>
<p>装饰器其实就是闭包在python中的一种经典引用，它能让python代码更简洁逼格更高，也能夹带更多“私货”。</p>
<h3 id="实现装饰器"><a href="#实现装饰器" class="headerlink" title="实现装饰器"></a>实现装饰器</h3><p>在我平时写自动化测试框架时，会自己定义一些装饰器来减少代码冗余，简化代码，如用装饰器实现日志输出等。</p>
<p>先看一个栗子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure>

<p>这个是一个加法函数，现在我有一个新需求：我想把传入的是什么参数以及函数的运行时间，用日志打印出来，那么直接改原函数也很简单能实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    logger.info(<span class="string">f&#x27;传入的参数为：<span class="subst">&#123;a&#125;</span>,<span class="subst">&#123;b&#125;</span>&#x27;</span>)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    res = a + b</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    run_time = end_time - start_time</span><br><span class="line">    logger.info(<span class="string">f&#x27;函数的运行时间为：<span class="subst">&#123;run_time&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<p>嗯，这个<strong>扩展</strong>的功能看起来还不错，我想给减法、乘法、除法甚至更多函数也加上这个功能，那么问题来了，那么多函数我都要一一去加上这么一长串东西吗？显然不合适。另一方面，直接修改原函数，也是不符合面向对象编程原则之一：<strong>开放封闭原则</strong>的。</p>
<blockquote>
<p>封闭：已经实现的功能代码对修改是封闭的。</p>
<p>开放：已经实现的功能代码对扩展是开放的。</p>
</blockquote>
<p>那么我们怎么解决这个问题?</p>
<p>首先我们上面说到过闭包，我们用外函数和内函数来实现以下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"><span class="comment"># 外层函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extended</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="comment"># 内层被装饰的功能函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">a, b</span>):</span></span><br><span class="line">        <span class="comment"># 扩展的功能</span></span><br><span class="line">        logger.info(<span class="string">f&#x27;传入的参数为：<span class="subst">&#123;a&#125;</span>,<span class="subst">&#123;b&#125;</span>&#x27;</span>)</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        <span class="comment"># 功能函数</span></span><br><span class="line">        res = func(a, b)</span><br><span class="line">        <span class="comment"># 扩展的功能</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        run_time = end_time - start_time</span><br><span class="line">        logger.info(<span class="string">f&#x27;函数的运行时间为：<span class="subst">&#123;run_time&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 真正的功能函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    res = a + b</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过外函数、内函数和功能函数，实现了在不改变原功能函数的情况下的功能扩展</span></span><br><span class="line">print(extended(add)(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<p><code>extended</code>就是外层函数，<code>wrapper</code>就是内层函数，即被扩展的功能函数，只不过在这里内层函数对外层引用的变量是个函数，运行一下，看下效果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| INFO     | __main__:wrapper:34 - 传入的参数为：1,2</span><br><span class="line">3</span><br><span class="line">| INFO     | __main__:wrapper:40 - 函数的运行时间为：1.000391960144043</span><br></pre></td></tr></table></figure>

<p>ok，有了这个装饰器，我们就可以对我们想要扩展的函数尽情装饰了。</p>
<p><strong>but！这里还会有两个问题</strong>：</p>
<p>1、如果要装饰的函数只有1个或者3个、4个甚至有关键字参数呢</p>
<p>2、我们的调用仍然很麻烦，extended(add)(1, 2)的调用方式，不容易让使用者理解我们这个函数是在做什么</p>
<p>针对第一个问题，其实很好解决，python中给我们提供了不定长参数<code>*args</code>和<code>**kwargs**</code>，因此我们只需要做一个简单的修改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extended</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="comment"># 内层被装饰的功能函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 扩展的功能</span></span><br><span class="line">        logger.info(<span class="string">f&#x27;传入的参数为：<span class="subst">&#123;args，kwargs&#125;</span>&#x27;</span>)</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        <span class="comment"># 功能函数</span></span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        <span class="comment"># 扩展的功能</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        run_time = end_time - start_time</span><br><span class="line">        logger.info(<span class="string">f&#x27;函数的运行时间为：<span class="subst">&#123;run_time&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>

<p>来试试：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span>(<span class="params">a, b, c, d=None</span>):</span></span><br><span class="line">    res = a + b + c + d</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">print(extended(add2)(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, d=<span class="number">4</span>))</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| INFO     | __main__:wrapper:34 - 传入的参数为：(1, 2, 3),&#123;&#39;d&#39;: 4&#125;</span><br><span class="line">10</span><br><span class="line">| INFO     | __main__:wrapper:40 - 函数的运行时间为：1.0007085800170898</span><br></pre></td></tr></table></figure>

<p>通过不定长参数，让我们的装饰器更加通用了。</p>
<p>回到第二个问题，其实Python为了让大家写起来方便，给装饰器提供了一个<strong>语法糖</strong>，这就很pythonic了，用法如下：</p>
<blockquote>
<p>语法糖（Syntactic sugar），也译为糖衣语法，是由英国计算机科学家彼得·约翰·兰达（Peter J. Landin）发明的一个术语，指计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。通常来说使用语法糖能够增加程序的可读性，从而减少程序代码出错的机会。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extended</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        logger.info(<span class="string">f&#x27;传入的参数为：<span class="subst">&#123;args&#125;</span>,<span class="subst">&#123;kwargs&#125;</span>&#x27;</span>)</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        run_time = end_time - start_time</span><br><span class="line">        logger.info(<span class="string">f&#x27;函数的运行时间为：<span class="subst">&#123;run_time&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接戴一顶帽子</span></span><br><span class="line"><span class="meta">@extended</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    res = a + b</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">print(add(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<p>通过在功能函数上加<code>@</code>即可直接调用装饰器，这样有利于让我们把更多的注意力放在功能函数本身。</p>
<p>至此，我们就实现了一个基础且通用的装饰器。</p>
<h3 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h3><p>ok，新需求又来了，如果想通过装饰器传参给功能函数怎么办呢？比如我想通过从外部传入一个名字，打印是谁在调用这个函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extended</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 这里的name该从哪里传进来呢？</span></span><br><span class="line">        print(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>正在调用该函数&#x27;</span>)</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给装饰器传入&#x27;kevin&#x27;</span></span><br><span class="line"><span class="meta">@extended(&#x27;kevin&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    res = a + b</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<p>这样写肯定会报错，问题的关键在于如何去接收这个传入的参数，其实我们只需要在原来的装饰器外面再加一层用来接收外部参数即可，先上代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加了一层用来接收外部参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_name</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">extended</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">            print(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>正在调用该函数&#x27;</span>)</span><br><span class="line">            func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="comment"># 返回第二层函数</span></span><br><span class="line">    <span class="keyword">return</span> extended</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用的装饰器不再是extended,而是add_name</span></span><br><span class="line"><span class="meta">@add_name(&#x27;kevin&#x27;) # 等同于：add = add_name(&#x27;kevin&#x27;)(add)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    res = a + b</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(add(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<p>我们把原来的装饰器<code>extended</code>看做一个整体，即一个内层函数，<code>add_name</code>就是它的外层函数，外层作用域中有一个变量<code>name</code>传入，上面闭包中讲过，内层是可以引用外部作用域的变量的，因此，在最里层的功能函数，就可以直接引用这个<code>name</code>。于是，通过再嵌套一层，实现了我们新增的需求。</p>
<h3 id="原函数还是原函数吗？"><a href="#原函数还是原函数吗？" class="headerlink" title="原函数还是原函数吗？"></a>原函数还是原函数吗？</h3><p>在使用装饰器后，有一个值得注意的地方，还是上面的第一个例子，我们先打印出<code>add()</code>函数的一些元信息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(add.__name__)</span><br><span class="line"><span class="comment"># 输出： &#x27;wrapper&#x27;</span></span><br><span class="line">help(add)</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># Help on function wrapper in module __main__:</span></span><br><span class="line"><span class="comment"># wrapper(*args, **kwargs)</span></span><br></pre></td></tr></table></figure>

<p>我们发现，<code>add()</code>函数被装饰以后，它的元信息变了。元信息告诉我们“它不再是以前那个add()函数，而是被wrapper()取代了”。这是装饰器带来的一个副作用，会覆盖掉原函数的元信息。</p>
<p>为了解决这问题，可以通过内置的装饰器<code>@functools.wrap</code>解决，它能帮助保留原函数的元信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extended</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">    @functools.wrap(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 这里的name该从哪里传进来呢？</span></span><br><span class="line">        print(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>正在调用该函数&#x27;</span>)</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给装饰器传入&#x27;kevin&#x27;</span></span><br><span class="line"><span class="meta">@extended(&#x27;kevin&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    res = a + b</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">print(add.__name__)</span><br><span class="line"><span class="comment"># 输出：&#x27;add&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="叠加装饰器"><a href="#叠加装饰器" class="headerlink" title="叠加装饰器"></a>叠加装饰器</h3><p>我们不满足于只给函数扩展一个功能，想给它同时扩展不同的功能，我们可以直接在功能函数上直接叠加使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@decorator2</span></span><br><span class="line"><span class="meta">@decorator1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;叠加装饰器&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>那么当有多个装饰器时，程序的运行顺序是怎么样的呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extended1</span>(<span class="params">func1</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper1</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;我是装饰器1&#x27;</span>) <span class="comment"># step3：开始执行装饰器1</span></span><br><span class="line">        res = func1(*args, **kwargs) <span class="comment"># step4：此时func1=wrapper2()=add()</span></span><br><span class="line">        print(<span class="string">&#x27;装饰器1的尾巴&#x27;</span>) <span class="comment"># step6：继续装饰器1剩余的装饰</span></span><br><span class="line">        <span class="keyword">return</span> res <span class="comment"># step7： 返回res，装饰器1装饰完毕</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extended2</span>(<span class="params">func2</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper2</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;我是装饰器2&#x27;</span>) <span class="comment"># step1：先执行装饰器2</span></span><br><span class="line">        res = func2(*args, **kwargs) <span class="comment"># step2:此时func2=add(),但此时还不会执行add()函数                                本身，因为add()函数还有一个装饰器1，所以此时进入装饰器1</span></span><br><span class="line">        print(<span class="string">&#x27;装饰器2的尾巴&#x27;</span>) <span class="comment"># step8：继续装饰器2剩余的装饰</span></span><br><span class="line">        <span class="keyword">return</span> res <span class="comment"># step9:所有装饰完毕</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@extended2</span></span><br><span class="line"><span class="meta">@extended1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a, b</span>):</span> <span class="comment"># step5：执行完功能函数</span></span><br><span class="line">    print(<span class="string">&#x27;我是功能函数&#x27;</span>)</span><br><span class="line">    res = a + b</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">print(add(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">函数执行顺序：add()--&gt;wrapper2()--&gt;func2()--&gt;wrapper1()--&gt;func1()--&gt;add()</span></span><br><span class="line"><span class="string">装饰器装饰顺序：</span></span><br><span class="line"><span class="string">1、@extend2：add()--&gt;extend2()--&gt;func2=add原函数--&gt;add指向wrapper2</span></span><br><span class="line"><span class="string">2、@extend1：wrapper2--&gt;extend1()--&gt;func1=wrapper2--&gt;add指向wrapper1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我是装饰器2</span><br><span class="line">我是装饰器1</span><br><span class="line">我是功能函数</span><br><span class="line">装饰器1的尾巴</span><br><span class="line">装饰器2的尾巴</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<p><strong>装饰器执行顺序：从上往下</strong></p>
<p><strong>装饰器装饰顺序：从下往上</strong></p>
<h3 id="装饰类"><a href="#装饰类" class="headerlink" title="装饰类"></a>装饰类</h3><p>上文中说到的装饰器，装饰对象都是函数，那么能否装饰类呢？答案是可以的。</p>
<p>假如我们要给不同的类增加一个属性，</p>
<p>方法一：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extended</span>(<span class="params">cls</span>):</span></span><br><span class="line">    cls.name = <span class="string">&#x27;kevin&#x27;</span></span><br><span class="line">    cls.age = <span class="number">18</span></span><br><span class="line">    <span class="keyword">return</span> cls</span><br><span class="line"></span><br><span class="line"><span class="meta">@extended</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@extended</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(A.name) <span class="comment"># 输出kevin</span></span><br><span class="line">print(A.age) <span class="comment"># 输出18</span></span><br><span class="line">print(B.name) <span class="comment"># 输出kevin</span></span><br><span class="line">print(B.age) <span class="comment"># 输出18</span></span><br></pre></td></tr></table></figure>

<p>方法二：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extended</span>(<span class="params">cls</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        cls.name = <span class="string">&#x27;Annie&#x27;</span></span><br><span class="line">        cls.age = <span class="number">18</span></span><br><span class="line">        <span class="keyword">return</span> cls(*args, **kwargs) <span class="comment"># 返回的是A(),即对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@extended  # A = extended(A)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(A()) <span class="comment"># 类型为对象</span></span><br><span class="line">print(A().name) <span class="comment"># Annie</span></span><br><span class="line">print(A().age) <span class="comment"># 18</span></span><br></pre></td></tr></table></figure>

<h3 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h3><p>在python中有三个内置装饰器：<code>@classmethod</code>，<code>@staticmethod</code>，<code>@property</code>，查看这三个装饰器源码可以发现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">classmethod</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    classmethod(function) -&gt; method</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Convert a function to be a class method.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    A class method receives the class as implicit first argument,</span></span><br><span class="line"><span class="string">    just like an instance method receives the instance.</span></span><br><span class="line"><span class="string">    To declare a class method, use this idiom:</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">      class C:</span></span><br><span class="line"><span class="string">          @classmethod</span></span><br><span class="line"><span class="string">          def f(cls, arg1, arg2, ...):</span></span><br><span class="line"><span class="string">              ...</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    It can be called either on the class (e.g. C.f()) or on an instance</span></span><br><span class="line"><span class="string">    (e.g. C().f()).  The instance is ignored except for its class.</span></span><br><span class="line"><span class="string">    If a class method is called for a derived class, the derived class</span></span><br><span class="line"><span class="string">    object is passed as the implied first argument.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Class methods are different than C++ or Java static methods.</span></span><br><span class="line"><span class="string">    If you want those, see the staticmethod builtin.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span>(<span class="params">self, *args, **kwargs</span>):</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Return an attribute of instance, which is of type owner. &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, function</span>):</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod # known case of __new__</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">*args, **kwargs</span>):</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Create and return a new object.  See help(type) for accurate signature. &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    __func__ = property(<span class="keyword">lambda</span> self: object(), <span class="keyword">lambda</span> self, v: <span class="literal">None</span>, <span class="keyword">lambda</span> self: <span class="literal">None</span>)  <span class="comment"># default</span></span><br><span class="line"></span><br><span class="line">    __isabstractmethod__ = property(<span class="keyword">lambda</span> self: object(), <span class="keyword">lambda</span> self, v: <span class="literal">None</span>, <span class="keyword">lambda</span> self: <span class="literal">None</span>)  <span class="comment"># default</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">staticmethod</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    staticmethod(function) -&gt; method</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Convert a function to be a static method.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    A static method does not receive an implicit first argument.</span></span><br><span class="line"><span class="string">    To declare a static method, use this idiom:</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">         class C:</span></span><br><span class="line"><span class="string">             @staticmethod</span></span><br><span class="line"><span class="string">             def f(arg1, arg2, ...):</span></span><br><span class="line"><span class="string">                 ...</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    It can be called either on the class (e.g. C.f()) or on an instance</span></span><br><span class="line"><span class="string">    (e.g. C().f()). Both the class and the instance are ignored, and</span></span><br><span class="line"><span class="string">    neither is passed implicitly as the first argument to the method.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Static methods in Python are similar to those found in Java or C++.</span></span><br><span class="line"><span class="string">    For a more advanced concept, see the classmethod builtin.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span>(<span class="params">self, *args, **kwargs</span>):</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Return an attribute of instance, which is of type owner. &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, function</span>):</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod # known case of __new__</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">*args, **kwargs</span>):</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Create and return a new object.  See help(type) for accurate signature. &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    __func__ = property(<span class="keyword">lambda</span> self: object(), <span class="keyword">lambda</span> self, v: <span class="literal">None</span>, <span class="keyword">lambda</span> self: <span class="literal">None</span>)  <span class="comment"># default</span></span><br><span class="line"></span><br><span class="line">    __isabstractmethod__ = property(<span class="keyword">lambda</span> self: object(), <span class="keyword">lambda</span> self, v: <span class="literal">None</span>, <span class="keyword">lambda</span> self: <span class="literal">None</span>)  <span class="comment"># default</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">property</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Property attribute.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">      fget</span></span><br><span class="line"><span class="string">        function to be used for getting an attribute value</span></span><br><span class="line"><span class="string">      fset</span></span><br><span class="line"><span class="string">        function to be used for setting an attribute value</span></span><br><span class="line"><span class="string">      fdel</span></span><br><span class="line"><span class="string">        function to be used for del&#x27;ing an attribute</span></span><br><span class="line"><span class="string">      doc</span></span><br><span class="line"><span class="string">        docstring</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Typical use is to define a managed attribute x:</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    class C(object):</span></span><br><span class="line"><span class="string">        def getx(self): return self._x</span></span><br><span class="line"><span class="string">        def setx(self, value): self._x = value</span></span><br><span class="line"><span class="string">        def delx(self): del self._x</span></span><br><span class="line"><span class="string">        x = property(getx, setx, delx, &quot;I&#x27;m the &#x27;x&#x27; property.&quot;)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Decorators make defining new properties or modifying existing ones easy:</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    class C(object):</span></span><br><span class="line"><span class="string">        @property</span></span><br><span class="line"><span class="string">        def x(self):</span></span><br><span class="line"><span class="string">            &quot;I am the &#x27;x&#x27; property.&quot;</span></span><br><span class="line"><span class="string">            return self._x</span></span><br><span class="line"><span class="string">        @x.setter</span></span><br><span class="line"><span class="string">        def x(self, value):</span></span><br><span class="line"><span class="string">            self._x = value</span></span><br><span class="line"><span class="string">        @x.deleter</span></span><br><span class="line"><span class="string">        def x(self):</span></span><br><span class="line"><span class="string">            del self._x</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleter</span>(<span class="params">self, *args, **kwargs</span>):</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Descriptor to change the deleter on a property. &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getter</span>(<span class="params">self, *args, **kwargs</span>):</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Descriptor to change the getter on a property. &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setter</span>(<span class="params">self, *args, **kwargs</span>):</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Descriptor to change the setter on a property. &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span>(<span class="params">self, *args, **kwargs</span>):</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Delete an attribute of instance. &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span>(<span class="params">self, *args, **kwargs</span>):</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Return getattr(self, name). &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span>(<span class="params">self, *args, **kwargs</span>):</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Return an attribute of instance, which is of type owner. &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, fget=None, fset=None, fdel=None, doc=None</span>):</span> <span class="comment"># known special case of property.__init__</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Property attribute.</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">          fget</span></span><br><span class="line"><span class="string">            function to be used for getting an attribute value</span></span><br><span class="line"><span class="string">          fset</span></span><br><span class="line"><span class="string">            function to be used for setting an attribute value</span></span><br><span class="line"><span class="string">          fdel</span></span><br><span class="line"><span class="string">            function to be used for del&#x27;ing an attribute</span></span><br><span class="line"><span class="string">          doc</span></span><br><span class="line"><span class="string">            docstring</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Typical use is to define a managed attribute x:</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        class C(object):</span></span><br><span class="line"><span class="string">            def getx(self): return self._x</span></span><br><span class="line"><span class="string">            def setx(self, value): self._x = value</span></span><br><span class="line"><span class="string">            def delx(self): del self._x</span></span><br><span class="line"><span class="string">            x = property(getx, setx, delx, &quot;I&#x27;m the &#x27;x&#x27; property.&quot;)</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Decorators make defining new properties or modifying existing ones easy:</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        class C(object):</span></span><br><span class="line"><span class="string">            @property</span></span><br><span class="line"><span class="string">            def x(self):</span></span><br><span class="line"><span class="string">                &quot;I am the &#x27;x&#x27; property.&quot;</span></span><br><span class="line"><span class="string">                return self._x</span></span><br><span class="line"><span class="string">            @x.setter</span></span><br><span class="line"><span class="string">            def x(self, value):</span></span><br><span class="line"><span class="string">                self._x = value</span></span><br><span class="line"><span class="string">            @x.deleter</span></span><br><span class="line"><span class="string">            def x(self):</span></span><br><span class="line"><span class="string">                del self._x</span></span><br><span class="line"><span class="string">        # (copied from class doc)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod # known case of __new__</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">*args, **kwargs</span>):</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Create and return a new object.  See help(type) for accurate signature. &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span>(<span class="params">self, *args, **kwargs</span>):</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Set an attribute of instance to value. &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    fdel = property(<span class="keyword">lambda</span> self: object(), <span class="keyword">lambda</span> self, v: <span class="literal">None</span>, <span class="keyword">lambda</span> self: <span class="literal">None</span>)  <span class="comment"># default</span></span><br><span class="line"></span><br><span class="line">    fget = property(<span class="keyword">lambda</span> self: object(), <span class="keyword">lambda</span> self, v: <span class="literal">None</span>, <span class="keyword">lambda</span> self: <span class="literal">None</span>)  <span class="comment"># default</span></span><br><span class="line"></span><br><span class="line">    fset = property(<span class="keyword">lambda</span> self: object(), <span class="keyword">lambda</span> self, v: <span class="literal">None</span>, <span class="keyword">lambda</span> self: <span class="literal">None</span>)  <span class="comment"># default</span></span><br><span class="line"></span><br><span class="line">    __isabstractmethod__ = property(<span class="keyword">lambda</span> self: object(), <span class="keyword">lambda</span> self, v: <span class="literal">None</span>, <span class="keyword">lambda</span> self: <span class="literal">None</span>)  <span class="comment"># default</span></span><br></pre></td></tr></table></figure>

<p>其实这三个装饰器，都不是函数实现而是用类实现的。</p>
<p>如果要用类实现装饰器，会涉及到一个魔术方法<code>__call__</code>，先看看这个方法的作用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;这是实例初始化方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line">m = A() <span class="comment"># 输出：这是实例初始化方法</span></span><br><span class="line">m() <span class="comment"># 报错：TypeError: &#x27;A&#x27; object is not callable A的对象不可调用</span></span><br></pre></td></tr></table></figure>

<p>由上可知，当给一个实例对象加上<code>()</code>，它是无法被调用的，如果想让它能像函数一样被调用，就必须加上<code>__call__</code>方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;这是实例初始化方法&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;执行__call__&#x27;</span>)</span><br><span class="line"></span><br><span class="line">m = A() <span class="comment"># 输出：这是实例初始化方法</span></span><br><span class="line">m() <span class="comment"># 输出：执行__call__</span></span><br></pre></td></tr></table></figure>

<p>所以，当实例对象加上()后，就会自动触发<code>__call__</code>方法。</p>
<p>那么有了这个魔术方法的加持，我们就可以用类去实现装饰器了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">decorator</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, func</span>):</span> <span class="comment"># func = demo</span></span><br><span class="line">        print(<span class="string">&#x27;开始实例化对象&#x27;</span>)</span><br><span class="line">        self.func = func <span class="comment"># self.demo = demo</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;装饰器扩展的功能1&#x27;</span>)</span><br><span class="line">        self.func() <span class="comment"># self.demo()</span></span><br><span class="line">        print(<span class="string">&#x27;装饰器扩展的功能2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator # demo = decorator(demo)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;执行功能函数&#x27;</span>)</span><br><span class="line"></span><br><span class="line">demo()</span><br></pre></td></tr></table></figure>

<p>首先，我们创建了一个类<code>decorator</code>，它的初始化方法中会传入一个参数<code>func</code>，并将这个参数设置为实例属性<code>self.func</code>，当函数<code>demo()</code>执行时，会先进行装饰<code>@decorator</code>，即执行<code>__init__</code>，此时<code>demo = decorator(demo)</code>，即<code>demo</code>现在是一个<code>decorator</code>类的实例对象，又由于给<code>demo</code>对象加了括号，即调用实例对象，那么此时<code>__call__</code>方法就会触发，先执行扩展功能1，再执行原函数，最后执行扩展功能2，所以最后得到的输出是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">开始实例化对象</span><br><span class="line">装饰器扩展的功能1</span><br><span class="line">执行功能函数</span><br><span class="line">装饰器扩展的功能2</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>python中的装饰器无非就是以上几类，<strong>所谓装饰器，其实就是通过装饰器函数（或类），来修改原函数（或类）的一些功能，使得原函数（或类）不需要修改。</strong></p>
<blockquote>
<p>Decorators is to modify the behavior of the function through a wrapper so we don’t have to actually modify the function.</p>
</blockquote>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>魔术方法总结</title>
    <url>/posts/da8f1b2e.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在python中，有一些很特别的方法，它以”__”双下划线开头和结尾，这类方法我们称之为<strong>魔术方法</strong>。这些方法有特殊的用途，有的不需要我们自己去定义，有的我们通过简单的定义可以实现一些神奇的功能。</p>
<h3 id="init-、-new-和-del"><a href="#init-、-new-和-del" class="headerlink" title="__init__、__new__和__del__"></a>__init__、__new__和__del__</h3><h4 id="构造器：-init-和-new"><a href="#构造器：-init-和-new" class="headerlink" title="构造器：__init__和__new__"></a>构造器：__init__和__new__</h4><p><strong>__init__</strong>应该是我们最为熟悉和常见的一个魔术方法，很多时候，我们会直接把它叫做构造函数，其实不然，在实例一个对象的时候，它并不是第一个被调用的函数，而是一个<strong>__new__</strong>的方法，这两者共同作用才是真正的构造函数。</p>
<p>看栗子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;调用init方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;调用new方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A()  </span><br><span class="line"><span class="comment"># 输出结果： 调用new方法</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># 输出结果： None</span></span><br></pre></td></tr></table></figure>

<p>结果中我们可以发现有两个问题：</p>
<p>1、当实例对象<code>a</code>时，会自动先去调用<strong>__new__</strong>方法，但是为什么 <strong>__init__</strong>没有被调用呢？</p>
<p>2、为什么这个实例对象没有创建成功，返回的是<code>None</code>呢？</p>
<p> <strong>__init__</strong>没有被调用的原因是对象没有创建成功，那为什么对象没有创建成功呢？</p>
<p>原因是，python3之后，所有的类都是默认继承<code>object</code>类的，我们可以点进<code>object</code>类查看源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">object</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    The base class of the class hierarchy.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    When called, it accepts no arguments and returns a new featureless</span></span><br><span class="line"><span class="string">    instance that has no instance attributes and cannot be given any.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">     @staticmethod # known case of __new__</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *more</span>):</span> <span class="comment"># known special case of object.__new__</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Create and return a new object.  See help(type) for accurate signature.         &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>可以看到，基类中有<strong>__new__</strong>方法，而在上面的例子中，我们其实是重写了基类的<strong>__new__</strong>方法!导致它不能真正的去创建对象！(所以<strong>__new__</strong>要慎用，一般情况最好不要去重写)</p>
<p>我们修改下上面的例子，让类A中的new方法继承基类中的new方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age=None</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        print(<span class="string">&#x27;调用init方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;调用new方法&#x27;</span>)</span><br><span class="line">        print(<span class="string">&#x27;我是参数args：&#x27;</span>,args)</span><br><span class="line">        print(<span class="string">&#x27;我是参数kwargs&#x27;</span>,kwargs)</span><br><span class="line">        <span class="keyword">return</span> super().__new__(cls)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A(<span class="string">&#x27;古一&#x27;</span>,age=<span class="number">18</span>)</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line">调用new方法</span><br><span class="line">我是参数args： (&lt;class &#x27;__main__.A&#x27;&gt;, &#x27;古一&#x27;)</span><br><span class="line">我是参数kwargs &#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line">调用init方法</span><br><span class="line">&lt;__main__.A object at <span class="number">0x00000280B925C520</span>&gt;</span><br></pre></td></tr></table></figure>

<p>可以看到，实例对象<code>a</code>时，自动先调用<strong>__new__</strong>方法，由它去创建对象并且由<code>*args</code>, <code>**kwargs</code>来接收创建对象时的参数，第二步，对象创建好后，自动调用<strong>__init__</strong>方法，由它来完成实例对象的属性初始化操作。因此，由<strong>__new__</strong>和<strong>__init__</strong>组成的构造器，完成了对象的创建和初始化。</p>
<p>前面说到最好不要重写<strong>__new__</strong>方法，但在做<strong>单例模式</strong>时，我们会这么做。</p>
<h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p><strong>单例模式（Singleton Pattern）</strong>是软件设计中的一种常用设计模式，目的主要是使某个类只存在一个实例（节约内存），比如在我们自动化测试框架中，像日志模块和数据库操作等模块，这两个操作类中，其实我们只需要实例一个日志输出对象和数据库操作对象即可，这种情况，我们即可采用单例。</p>
<p>具体实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>:</span></span><br><span class="line">    __obj = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 如果该类不存在对象，则创建一个对象</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls.__obj:</span><br><span class="line">            cls.__obj = super().__new__(cls)</span><br><span class="line">            <span class="keyword">return</span> cls.__obj</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果该类已创建过对象，则返回上一个对象</span></span><br><span class="line">            <span class="keyword">return</span> cls.__obj</span><br><span class="line"></span><br><span class="line">a = Singleton()</span><br><span class="line">b = Singleton()</span><br><span class="line">c = Singleton()</span><br><span class="line">print(id(a))</span><br><span class="line">print(id(b))</span><br><span class="line">print(id(c))</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="number">1537050624832</span></span><br><span class="line"><span class="number">1537050624832</span></span><br><span class="line"><span class="number">1537050624832</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在创建对象会自动调用<strong>__new__</strong>方法，那么我们则可以通过重写<strong>__new__</strong>的方式，来限制一个类的对象创建。定义一个类属性<code>__obj</code>，如果该类没有创建过对象，那么就正常创建这个对象，并把这个对象赋值给类属性<code>__obj</code>，如果创建过对象，那么直接返回<code>__obj</code>，即之前创建的对象，所以最后可以看到，这个类创建的对象id都是一样的，即是同一个对象。</p>
<p>**ps:**通过装饰器的方式，也可以实现单例模式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span>(<span class="params">cls</span>):</span></span><br><span class="line">    <span class="comment"># 创建一个字典来存储类和对象的映射关系</span></span><br><span class="line">    dic = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 如果dic中有key为cls的类，则直接返回其对象</span></span><br><span class="line">        <span class="keyword">if</span> dic.get(cls):</span><br><span class="line">            <span class="keyword">return</span> dic[cls]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果dic中没有key为cls的类，那么将cls和其对象cls()放到dic中，并返回该对象</span></span><br><span class="line">            dic[cls] = cls(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> dic[cls]</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">b = A()</span><br><span class="line">c = A()</span><br><span class="line">print(id(a))</span><br><span class="line">print(id(b))</span><br><span class="line">print(id(c))</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="number">2412994972400</span></span><br><span class="line"><span class="number">2412994972400</span></span><br><span class="line"><span class="number">2412994972400</span></span><br></pre></td></tr></table></figure>

<p>还有更多的单例实现方式，可以参考<a href="%5Bhttps://www.cnblogs.com/huchong/p/8244279.html%5D">听风大佬的博文</a>。</p>
<h4 id="析构器：-del"><a href="#析构器：-del" class="headerlink" title="析构器：__del__"></a>析构器：__del__</h4><p>python中通过<strong>__del__</strong>就是一个析构函数了，当对象被销毁时，会调用他本身的<strong>析构函数</strong>，另外当对象在某个作用域中调用完毕，在跳出其作用域的同时析构函数也会被调用一次，这样可以用来释放内存空间。</p>
<blockquote>
<p>析构函数(destructor) 与构造函数相反，当对象结束其生命周期，如对象所在的函数已调用完毕时，系统自动执行析构函数。析构函数往往用来做“清理善后” 的工作（例如在建立对象时用new开辟了一片内存空间，delete会自动调用析构函数后释放内存）。</p>
</blockquote>
<p>简单来说，就是擦屁股的，这个对象删除不用了，ok，我帮你善后。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;我来善后！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">print(<span class="string">&#x27;对象a在该作用域中调用完毕&#x27;</span>) <span class="comment"># 对象a在该作用域中调用完成后，立即调用__del__</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="string">&#x27;对象a在该作用域中调用完毕&#x27;</span></span><br><span class="line"><span class="string">&#x27;我来善后！&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;我来善后！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line"><span class="keyword">del</span> a <span class="comment"># 删除对象a后，立即调用__del__</span></span><br><span class="line">print(<span class="string">&#x27;对象a没了&#x27;</span>)</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="string">&#x27;我来善后！</span></span><br><span class="line"><span class="string">&#x27;</span>对象a在该作用域中调用完毕<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="enter-和-exit"><a href="#enter-和-exit" class="headerlink" title="__enter__和__exit__"></a>__enter__和__exit__</h3><p>在平常操作文件时，通常需要先打开文件、操作读写、再关闭文件，而当使用<code>with</code> 关键字去操作文件时，却可以自动关闭文件，这是为什么呢？why？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法一：</span></span><br><span class="line">f = open(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">f.close()</span><br><span class="line"><span class="comment"># 方法二：</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&#x27;python&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>这背后的原理其实就是：<strong>上下文管理器</strong>。（上下文管理器具体原理看这篇<a href="https://ancientone.cf/posts/65e41272.html">《上下文管理器》</a>）</p>
<p>而实现上下文管理器的方法之一，涉及到两个魔术方法：<strong>__enter__</strong>和<strong>__exit__</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;我要进来了&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;我要出去了&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Demo(): <span class="comment"># Demo()即为上下文管理器</span></span><br><span class="line">    print(<span class="string">&#x27;我进来了&#x27;</span>)</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">我要进来了</span><br><span class="line">我进来了</span><br><span class="line">我要出去了</span><br></pre></td></tr></table></figure>

<p>如上所示，<code>Demo</code>实现了<code>__enter__</code>和<code>__exit__</code>这两个上下文管理器协议，当Demo调用/实例化的时候，则创建了上下文管理器<code>Demo</code>。</p>
<p>当上下文管理器遇到<code>with</code>关键字，上下文管理器就会被激活，先自动调用<code>__enter__</code>，然后进入运行时上下文环境，执行<code>with_body</code>中的语句，执行完成后，自动调用<code>__exit__</code>。其实这里的<code>__enter__</code>和<code>__exit__</code>就类似于我们测试中的<strong>前置</strong>和<strong>后置</strong>。</p>
<p>通常，<code>with</code>会和<code>as</code>一起使用，当有<code>as</code>从句时：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;执行前置条件&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;执行后置条件&#x27;</span>)</span><br><span class="line">        print(exc_type)</span><br><span class="line">        print(exc_val)</span><br><span class="line">        print(exc_tb)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count</span>(<span class="params">a, b</span>):</span></span><br><span class="line">        <span class="keyword">return</span> a / b</span><br><span class="line"><span class="keyword">with</span> Demo() <span class="keyword">as</span> x:</span><br><span class="line">    print(x.count(<span class="number">4</span>,<span class="number">2</span>))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">执行前置条件</span><br><span class="line"><span class="number">2.0</span></span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="literal">None</span></span><br><span class="line">执行后置条件</span><br></pre></td></tr></table></figure>

<p>在执行<code>__enter__</code>方法后，会返回自身或另一个与运行时上下文相关的对象（此例返回了Demo对象），然后赋值给变量<code>x</code>，在上下文环境中，实例对象<code>x</code>执行了<code>count</code>方法。</p>
<p>此外，在上面的例子中，应该能注意到，我们分别打印了<code>__exit__</code> 中的三个参数：<code>exc_type</code>，<code>exc_val</code>， <code>exc_tb</code>，但是打印结果却都为<code>None</code>，why？</p>
<p>首先，这三个参数代表的含义为：</p>
<ul>
<li>exc_type: 异常类型</li>
<li>exc_val:异常值</li>
<li>exc_tb:异常的溯源信息</li>
</ul>
<p>当在执行<code>with_body</code>中的语句时，若出现了异常，则会自动执行<code>__exit__</code> 方法，并且将异常信息分别对应这三个参数，传递进<code>__exit__</code> 方法中进行处理。</p>
<p>我们用上面的例子，修改一下<code>count</code>的参数，构造一个异常：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> Demo() <span class="keyword">as</span> x:</span><br><span class="line">    print(x.count(<span class="number">1</span>,<span class="number">0</span>))</span><br></pre></td></tr></table></figure>

<p>此时的运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行前置条件</span><br><span class="line">&lt;class &#39;ZeroDivisionError&#39;&gt;</span><br><span class="line">division by zero</span><br><span class="line">&lt;traceback object at 0x00000231755FACC0&gt;</span><br><span class="line">执行后置条件</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;C:\Users\ancient\demo.py&quot;, line 34, in &lt;module&gt;</span><br><span class="line">    print(f.count(1,0))</span><br><span class="line">  File &quot;C:\Users\ancient\demo.py&quot;, line 15, in count</span><br><span class="line">    return a &#x2F; b</span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到，<code>with</code>代码块中的代码出现了异常后，立即触发了<code>__exit__</code>方法捕捉到这个异常，并分别打印了异常的类型、值、溯源信息，然后抛出了异常。</p>
<p>需要注意的是，如果<code>__exit__</code> 方法中有<code>return True</code>，那么该方法则不会抛出异常。</p>
<h3 id="str"><a href="#str" class="headerlink" title="__str__"></a>__str__</h3><p>先抛一个问题：为什么<code>str(123)</code>打印出来会是字符串<code>&quot;123&quot;</code>呢？</p>
<p>先不忙解释，我们先看如果打印一个类的实例对象，会是什么呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">a = Demo()</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">&lt;__main__.Demo object at <span class="number">0x0000019C0B789070</span>&gt;</span><br></pre></td></tr></table></figure>

<p>可以看到，打印结果是<code>a</code>的对象信息和内存地址。其实通过查看<code>str()</code>源码会发现，<code>str</code>其实是一个类，所有的字符串都是它的实例对象，那么为什么同样是类，我们自定义类的实例对象的打印结果却不一样呢？原因就在于<code>__str__</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">str</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    str(object=&#x27;&#x27;) -&gt; str</span></span><br><span class="line"><span class="string">    str(bytes_or_buffer[, encoding[, errors]]) -&gt; str</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Create a new string object from the given object. If encoding or</span></span><br><span class="line"><span class="string">    errors is specified, then the object must expose a data buffer</span></span><br><span class="line"><span class="string">    that will be decoded using the given encoding and error handler.</span></span><br><span class="line"><span class="string">    Otherwise, returns the result of object.__str__() (if defined)</span></span><br><span class="line"><span class="string">    or repr(object).</span></span><br><span class="line"><span class="string">    encoding defaults to sys.getdefaultencoding().</span></span><br><span class="line"><span class="string">    errors defaults to &#x27;strict&#x27;.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, value=<span class="string">&#x27;&#x27;</span>, encoding=None, errors=<span class="string">&#x27;strict&#x27;</span></span>):</span></span><br><span class="line">        <span class="comment"># known special case of str.__init__</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        str(object=&#x27;&#x27;) -&gt; str</span></span><br><span class="line"><span class="string">        str(bytes_or_buffer[, encoding[, errors]]) -&gt; str</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Create a new string object from the given object. If encoding or</span></span><br><span class="line"><span class="string">        errors is specified, then the object must expose a data buffer</span></span><br><span class="line"><span class="string">        that will be decoded using the given encoding and error handler.</span></span><br><span class="line"><span class="string">        Otherwise, returns the result of object.__str__() (if defined)</span></span><br><span class="line"><span class="string">        or repr(object).</span></span><br><span class="line"><span class="string">        encoding defaults to sys.getdefaultencoding().</span></span><br><span class="line"><span class="string">        errors defaults to &#x27;strict&#x27;.</span></span><br><span class="line"><span class="string">        # (copied from class doc)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self, *args, **kwargs</span>):</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Return str(self). &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"> ...............</span><br></pre></td></tr></table></figure>

<p><code>__str__</code>方法可以自定义实例对象的打印结果为指定的字符串，这里<code>str()</code> 的实例对象返回的是<code>Return str(self)</code>，即返回的对象本身，所以，这就是为什么<code>str(123)</code>打印出来会是字符串<code>&quot;123&quot;</code>。</p>
<p>我们也可以来自定义试试：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, price</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.price = price</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>的价格是：<span class="subst">&#123;self.price&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">benz = Car(<span class="string">&#x27;Benz&#x27;</span>, <span class="string">&#x27;40w&#x27;</span>)</span><br><span class="line">audi = Car(<span class="string">&#x27;Audi&#x27;</span>, <span class="string">&#x27;35w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(benz) <span class="comment"># 输出：Benz的价格是：40w</span></span><br><span class="line">print(audi) <span class="comment"># 输出：Audi的价格是：35w</span></span><br></pre></td></tr></table></figure>

<p>同理，<code>int()</code>、<code>bool()</code>等其实也是类似的原理。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">int</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    int([x]) -&gt; integer</span></span><br><span class="line"><span class="string">    int(x, base=10) -&gt; integer</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Convert a number or string to an integer, or return 0 if no arguments</span></span><br><span class="line"><span class="string">    are given.  If x is a number, return x.__int__().  For floating point</span></span><br><span class="line"><span class="string">    numbers, this truncates towards zero.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    If x is not a number or if base is given, then x must be a string,</span></span><br><span class="line"><span class="string">    bytes, or bytearray instance representing an integer literal in the</span></span><br><span class="line"><span class="string">    given base.  The literal can be preceded by &#x27;+&#x27; or &#x27;-&#x27; and be surrounded</span></span><br><span class="line"><span class="string">    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.</span></span><br><span class="line"><span class="string">    Base 0 means to interpret the base from the string as an integer literal.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; int(&#x27;0b100&#x27;, base=0)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__int__</span>(<span class="params">self, *args, **kwargs</span>):</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; int(self) &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">  ...........</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bool</span>(<span class="params">int</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    bool(x) -&gt; bool</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns True when the argument x is true, False otherwise.</span></span><br><span class="line"><span class="string">    The builtins True and False are the only two instances of the class bool.</span></span><br><span class="line"><span class="string">    The class bool is a subclass of the class int, and cannot be subclassed.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__and__</span>(<span class="params">self, *args, **kwargs</span>):</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Return self&amp;value. &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__or__</span>(<span class="params">self, *args, **kwargs</span>):</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Return self|value. &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">   .........</span><br></pre></td></tr></table></figure>

<blockquote>
<p>python自2.2以后，对类和类型进行了统一，做法就是将int()、float()、str()、list()、tuple()这些BIF转换为<strong>工厂函数</strong>，所谓工厂函数，其实就是一个类对象，当你调用他们的时候，事实上就是创建一个相应的实例对象。</p>
</blockquote>
<h3 id="add"><a href="#add" class="headerlink" title="__add__"></a>__add__</h3><p><code>&quot;hello,&quot; + &quot;world&quot;</code>字符串为什么可以拼接成<code>&quot;hello,world&quot;</code>?</p>
<p><code>1+1</code>为什么可以等于整型相加为什么可以等于<code>2</code>?</p>
<p><code>[1,2,3] + [&quot;a&quot;,&quot;b&quot;]</code>列表相加为什么可以合并为<code>[1,2,3,&quot;a&quot;,&quot;b&quot;]</code>?</p>
<p><code>&#123;&quot;a&quot;:1&#125; + &#123;&quot;b&quot;:2&#125;</code>字典又为什么不能直接相加合并呢？</p>
<p>原因是可以相加的类里都有<code>__add__</code>方法，而字典没有该方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__add__</span>(<span class="params">self, *args, **kwargs</span>):</span> <span class="comment"># real signature unknown</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Return self+value. &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>那为什么有这个方法就能让同类型的对象相加呢？</p>
<p>因为<code>__add__</code>方法定义了对象相加的逻辑和返回值，当使用<code>+</code>操作时，将会触发<code>__add__()</code>方法。</p>
<p>直接上例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, age</span>):</span></span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">man = Person(<span class="number">22</span>)</span><br><span class="line">woman = Person(<span class="number">20</span>)</span><br><span class="line">print(man+woman)</span><br></pre></td></tr></table></figure>

<p>这里<code>Person</code>类中并没有定义对象相加的方法，此时直接相加就会报错，提示不支持该操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;C:\Users\ancient\demo.py&quot;, line 8, in &lt;module&gt;</span><br><span class="line">    print(man+woman)</span><br><span class="line">TypeError: unsupported operand type(s) for +: &#39;Person&#39; and &#39;Person&#39;</span><br></pre></td></tr></table></figure>

<p>加上<code>__add__</code>后：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, age</span>):</span></span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.age + other.age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">man = Person(<span class="number">22</span>)</span><br><span class="line">woman = Person(<span class="number">20</span>)</span><br><span class="line">print(man + woman)</span><br><span class="line"><span class="comment"># 输出结果： 42</span></span><br></pre></td></tr></table></figure>

<p><code>__add__</code>方法中的参数<code>self</code>和<code>other</code>分别指<code>Person</code>的不同实例对象，这里<code>self</code>即对象<code>man</code>，<code>other</code>即对象<code>woman</code>。配合上文提到的<code>__str__</code>，还可以自定义<code>+</code>的打印结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, age</span>):</span></span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;两人年龄之和为:<span class="subst">&#123;self.age&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> Person(self.age + other.age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">man = Person(<span class="number">22</span>)</span><br><span class="line">woman = Person(<span class="number">20</span>)</span><br><span class="line">print(man + woman)</span><br><span class="line"><span class="comment"># 输出结果：两人年龄之和为:42</span></span><br></pre></td></tr></table></figure>

<p>这里只提到了<code>+</code>的魔术方法，其实其他的运算符也都有对应的魔术方法，原理也差不多，本文就不再赘述。</p>
<p>附上其它运算符对应魔术方法：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/%E8%BF%90%E7%AE%97%E7%AC%A6.png"></p>
<h3 id="slots"><a href="#slots" class="headerlink" title="__slots__"></a>__slots__</h3><p>众所周知，python是一门动态语言，所谓动态就是运行代码时可以根据某些条件改变自身结构，例如创建一个类的实例对象，可以给该实例绑定任意的属性和方法。</p>
<p>绑定属性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">a.name = <span class="string">&#x27;python&#x27;</span></span><br><span class="line">print(a.name) <span class="comment"># 输出：python</span></span><br></pre></td></tr></table></figure>

<p>绑定方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> MethodType</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_age</span>(<span class="params">self, age</span>):</span></span><br><span class="line">    self.age = age</span><br><span class="line"></span><br><span class="line">a.set_age = MethodType(set_age, a) <span class="comment"># 将setage()方法绑定为对象a的方法</span></span><br><span class="line">a.set_age(<span class="number">18</span>)</span><br><span class="line">print(a.age) <span class="comment"># 输出18</span></span><br></pre></td></tr></table></figure>

<p>此外，每个类的实例对象都会被分配一个<code>__dict__</code>属性，它会维护该实例的所有属性。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A(<span class="string">&#x27;古一&#x27;</span>,<span class="number">18</span>)</span><br><span class="line">print(a.__dict__) </span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;古一&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们再实例一个对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = A(<span class="string">&#x27;古二&#x27;</span>,<span class="number">19</span>)</span><br><span class="line">print(b.__dict__) </span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;古二&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">19</span>&#125;</span><br></pre></td></tr></table></figure>

<p>由此可见，类的每次实例化，都会为其对象分配一个<code>__dict__</code>属性，那么试想，如果需要创建大量实例，这个<code>__dict__</code>就会有点浪费内存了。</p>
<p>所以python也是提供了一种解决方案，就是在类中定义<code>__slots__</code>属性。</p>
<p><code>__slots__</code>一是可以限制实例能添加的属性，二是阻止类实例化时分配<code>__dict__</code>属性。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    __slots__ = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>] </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A(<span class="string">&#x27;古一&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">a.gender = <span class="string">&#x27;male&#x27;</span></span><br><span class="line">print(a.gender)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;C:\Users\ancient\demo.py&quot;, line 65, in &lt;module&gt;</span><br><span class="line">    a.gender &#x3D; &#39;male&#39;</span><br><span class="line">AttributeError: &#39;A&#39; object has no attribute &#39;gender&#39;</span><br></pre></td></tr></table></figure>

<p>报错提示<code>A</code> 对象没有<code>gender</code>这个属性，因为<code>__slots__</code>限制了这个类的所有实例对象只能有<code>name</code>、<code>age</code>这两个属性，不能再添加任何属性。</p>
<p>另外，<code>A</code>的实例对象也不再有<code>__dict__</code>属性了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(a.__dict__)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;C:\Users\ancient\demo.py&quot;, line 66, in &lt;module&gt;</span><br><span class="line">    print(a.__dict__)</span><br><span class="line">AttributeError: &#39;A&#39; object has no attribute &#39;__dict__&#39;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<ul>
<li><code>__slots__</code>仅对当前类起作用，对继承的子类不起作用</li>
<li>在子类中定义<code>__slots__</code>，子类允许定义的属性就是自身的<code>__slots__</code>加上父类的<code>__slots__</code></li>
</ul>
<p>说了这么多，有啥实际应用呢？</p>
<p>在接口自动化测试中，有个场景是需要验证查询日志的返回结果是否跟查询条件一致，比如返回了一组这样的json数据：<img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/ae86sen/mypic2/json.png"></p>
<p>即我需要校验其中每个字典中某些字段的值和查询条件一致，那么我该怎么处理呢？</p>
<p>第一个方法很简单，直接用<code>jsonpath</code>提取查询字段，然后遍历比较就行，但是日志的数量通常是上万条的，这时候<code>jsonpath</code>的性能就不太行。</p>
<p>第二个方法，就是自己定义一个逻辑实现。我们可以看到，这样一组json数据中，列表中嵌套了许多字典，每个字典的结构其实都一样，<code>key</code>都是一样的，只是<code>value</code>不一定一样，那么，我们可以封装一个校验json的类，把每个字典都当做一个实例对象，里面的<code>key</code>就是实例属性，<code>value</code>就是实例属性值，然后我们还可以顶一个<code>is_validated</code>方法来对做相关的校验，比如这样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Validated</span>:</span></span><br><span class="line">    __slots__ = [<span class="string">&#x27;happenTime&#x27;</span>, <span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;appName&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, json_data</span>):</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> json_data.items():</span><br><span class="line">            <span class="keyword">if</span> k <span class="keyword">in</span> self.__slots__:</span><br><span class="line">                setattr(self, k, v)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_validated</span>(<span class="params">self,expr</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>另外有些<code>key</code> 对我们来说，是不需要的，我们只需要保留查询条件字段即可（比如我们的查询字段为<code>happenTime</code>、 <code>type</code>、 <code>appName</code>，那么我们就只需要保留这三个字段），因此我们可以设置<code>__slots__</code>来限制只保留我们需要的字段，相当于一个白名单，另外，也可以阻止<code>__dict__</code>的生成来节约内存。</p>
<p>这个方法的好处是，代码复用性会更强，扩展性也更强，如果下一次又加了几个新字段，那么继承一下，那么第一个版本和第二个版本分别是属性隔离、接口隔离的，也符合面向对象的开闭原则。</p>
<p>但是，目前这个方法的运行速度还不够快，还需要优化，暂时还没想到更好的方法，害。</p>
<h3 id="自定义属性访问"><a href="#自定义属性访问" class="headerlink" title="自定义属性访问"></a>自定义属性访问</h3><p>python的自定义属性访问涉及到四个魔术方法，分别是：<code>__getattribute__</code>、<code>__getattr__</code>、<code>__setattr__</code>和<code>__delattr__</code>。</p>
<h4 id="getattribute"><a href="#getattribute" class="headerlink" title="__getattribute__"></a>__getattribute__</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;调用__getattribute__&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">a = A(<span class="number">123</span>)</span><br><span class="line">print(a.x)</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">调用__getattribute__</span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure>

<p>可以看到，当我们在一个类中定义了<code>__getattribute__</code>方法，在访问对象属性的时候，会去调用这个方法，但是这里返回的结果却是<code>None</code>，这是因为我们重写了父类的<code>__getattribute__</code>方法，它无法完成返回对应属性值的操作。</p>
<p>父类object中的<code>__getattribute__</code>方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span>(<span class="params">self, *args, **kwargs</span>):</span> <span class="comment"># real signature unknown</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Return getattr(self, name). &quot;&quot;&quot;</span>  <span class="comment"># 返回属性值</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：虽然看源码我们知道该方法其实就是Return getattr(self, name)，但是我们重写的时候绝对不能这么写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;调用__getattribute__&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> self.item <span class="comment"># 相当于self.__getattribute__(item)</span></span><br></pre></td></tr></table></figure>

<p>这样将会陷入无限递归~</p>
<p>因此我们需要调用父类的该方法，来实现返回属性值的功能。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;调用__getattribute__&#x27;</span>)</span><br><span class="line">        print(<span class="string">f&#x27;item:<span class="subst">&#123;item&#125;</span>&#x27;</span>)         <span class="comment"># item即属性名</span></span><br><span class="line">        <span class="keyword">return</span> super().__getattribute__(item)</span><br><span class="line"> </span><br><span class="line">a = A(<span class="number">123</span>)</span><br><span class="line">print(a.x)</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">调用__getattribute__</span><br><span class="line">item:x</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure>

<p><code>a.x</code>等价于<code>a.__getattribute__(x)</code>。</p>
<h4 id="getattr"><a href="#getattr" class="headerlink" title="__getattr__"></a>__getattr__</h4><p>接上面的例子，当访问一个存在的属性时：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;调用__getattribute__&#x27;</span>)</span><br><span class="line">        print(<span class="string">f&#x27;item:<span class="subst">&#123;item&#125;</span>&#x27;</span>)         <span class="comment"># item即属性名</span></span><br><span class="line">        <span class="keyword">return</span> super().__getattribute__(item)</span><br><span class="line"> </span><br><span class="line">a = A(<span class="number">123</span>)</span><br><span class="line">print(a.y)</span><br></pre></td></tr></table></figure>

<p>此时会直接报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">调用__getattribute__</span><br><span class="line">item:y</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;C:\Users\ancient\demo.py&quot;, line 16, in &lt;module&gt;</span><br><span class="line">    print(a.name)</span><br><span class="line">  File &quot;C:\Users\ancient\demo.py&quot;, line 8, in __getattribute__</span><br><span class="line">    return super().__getattribute__(item)</span><br><span class="line">AttributeError: &#39;A&#39; object has no attribute &#39;y&#39;</span><br></pre></td></tr></table></figure>

<p>如果我们在这个类中定义一个<code>__getattr__</code>方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;调用__getattribute__&#x27;</span>)</span><br><span class="line">        print(<span class="string">f&#x27;item:<span class="subst">&#123;item&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> super().__getattribute__(item)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;调用__getattr__&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A(<span class="number">123</span>)</span><br><span class="line">print(a.y)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">调用__getattribute__</span><br><span class="line">item:name</span><br><span class="line">调用__getattr__</span><br><span class="line">None</span><br></pre></td></tr></table></figure>

<p>可以发现，当访问属性时，会先调用<code>__getattribute__</code>，如果这个属性存在，就返回属性值，如果这个属性不存在（发生AttributeError错误），将会触发<code>__getattr__</code>，这个方法会捕获异常。</p>
<p>其实可以总结出，访问属性时，属性的查找过程如下（如<code>print(a.attr)</code>）：</p>
<p>1、首先会在对象的实例属性中寻找，未找到则执行第二步</p>
<p>2、在对象所在的类中查找类属性，未找到则执行第三步</p>
<p>3、到对象的继承链上寻找，未找到则只需第四步</p>
<p>4、最后调用<code>__getattr__</code>方法，如果该属性还是没有找到且没有定义<code>__getattr__</code>方法，那么就会抛出<code>AttributeError</code>，终止查找。</p>
<h4 id="setattr"><a href="#setattr" class="headerlink" title="__setattr__"></a>__setattr__</h4><p>这个很好理解，就是在给对象定义属性时，就会触发<code>__setattr__</code>方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;调用__getattribute__&#x27;</span>)</span><br><span class="line">        print(<span class="string">f&#x27;item:<span class="subst">&#123;item&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> super().__getattribute__(item)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;调用__getattr__&#x27;</span>)</span><br><span class="line">        self.item = <span class="number">123</span></span><br><span class="line">        <span class="keyword">return</span> self.item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span>(<span class="params">self, key, value</span>):</span></span><br><span class="line">        print(<span class="string">f&#x27;key:<span class="subst">&#123;key&#125;</span>&#x27;</span>)</span><br><span class="line">        print(<span class="string">f&#x27;value:<span class="subst">&#123;value&#125;</span>&#x27;</span>)</span><br><span class="line">        super().__setattr__(key, value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A(<span class="number">123</span>)</span><br><span class="line">a.y = <span class="string">&#x27;python&#x27;</span></span><br><span class="line">setattr(a, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;java&#x27;</span>)</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">key:x</span><br><span class="line">value:<span class="number">123</span></span><br><span class="line">key:y</span><br><span class="line">value:python</span><br><span class="line">key:z</span><br><span class="line">value:java</span><br></pre></td></tr></table></figure>

<p>可以看到三种定义对象属性的方式，不管是哪一种，都会触发<code>__setattr__</code>。</p>
<p>此外，这里重写<code>__setattr__</code>方法时，也必须调用父类<code>__setattr__</code>，否则属性不会真正设置成功。</p>
<h4 id="delattr"><a href="#delattr" class="headerlink" title="__delattr__"></a>__delattr__</h4><p>很明显，最后一个方法就是在删除对象属性时触发的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delattr__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;调用__delattr__&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A(<span class="number">123</span>)</span><br><span class="line"><span class="keyword">del</span> a.x</span><br><span class="line">print(a.x)</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">调用__delattr__</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure>

<p>值得注意的是，当重写了<code>__delattr__</code>时，如果没有调用父类的<code>__delattr__</code>，其实属性是不会被删除的。要想删除，就必须调用父类方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__delattr__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">      print(<span class="string">&#x27;调用__delattr__&#x27;</span>)</span><br><span class="line">      super().__delattr__(item)</span><br></pre></td></tr></table></figure>

<h4 id="小例子"><a href="#小例子" class="headerlink" title="小例子"></a>小例子</h4><p>上面说了那么多，结合一个小例子，来看看这几个魔术方法的作用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">定义一个Students类：</span><br><span class="line">属性：</span><br><span class="line">    name: 属性值只能是字符串</span><br><span class="line">    age:属性值只能是int</span><br><span class="line">    grade:属性值只能是dict类型</span><br><span class="line">    </span><br><span class="line">name属性不能被删除</span><br><span class="line">grade属性如果没有添加，则返回None</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span>(<span class="params">self, key, value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> key == <span class="string">&#x27;name&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> isinstance(value,str):</span><br><span class="line">                super().__setattr__(key,value)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> AttributeError(<span class="string">&#x27;name属性只能是str类型&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> key == <span class="string">&#x27;age&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> isinstance(value,int):</span><br><span class="line">                super().__setattr__(key,value)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> AttributeError(<span class="string">&#x27;age属性只能是int类型&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> key == <span class="string">&#x27;grade&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> isinstance(value,dict):</span><br><span class="line">                super().__setattr__(key,value)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> AttributeError(<span class="string">&#x27;grade属性只能是dict类型&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delattr__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="keyword">if</span> item == <span class="string">&#x27;name&#x27;</span>:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">&#x27;name属性不能被删除&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            super().__delattr__(item)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="keyword">if</span> item == <span class="string">&#x27;grade&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> super().__getattribute__(item)</span><br><span class="line">a = Students()</span><br><span class="line">a.name = <span class="number">123</span> <span class="comment"># 报错，提示name属性只能是str类型</span></span><br><span class="line">a.age = <span class="string">&#x27;12&#x27;</span> <span class="comment"># 报错，提示age属性只能是int类型</span></span><br><span class="line">print(a.grade) <span class="comment"># 返回None</span></span><br><span class="line"><span class="keyword">del</span> a.name <span class="comment"># 报错，提示name属性不能被删除</span></span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>上文中总结了一些常用的魔术方法，所谓魔术方法，我个人理解其实就像LOL中每个英雄的<strong>被动技能</strong>，当我们给一个类定义了一些魔术方法，就相当于赋予了它一个被动技能，这个被动技能会在特定的情况下被自动触发，从而使对象变得更加灵活强大，实现一些或高级或复杂的功能，是真正的<strong>黑魔法</strong>。</p>
<p>当然，python中的魔术方法远不止上面所总结的，下面附上python中的魔术方法大全以供查阅。</p>
<h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p><strong>魔术方法大全</strong></p>
<table>
<thead>
<tr>
<th><strong>魔法方法</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>基本的魔法方法</strong></td>
<td></td>
</tr>
<tr>
<td><strong><strong>new</strong>(cls[, …])</strong></td>
<td>__new__是在一个对象实例化的时候所调用的第一个方法</td>
</tr>
<tr>
<td><strong><strong>init</strong>(self[, …])</strong></td>
<td>构造器，当一个实例被创建的时候调用的初始化方法</td>
</tr>
<tr>
<td><strong><strong>del</strong>(self)</strong></td>
<td>析构器，当一个实例被销毁的时候调用的方法</td>
</tr>
<tr>
<td><strong><strong>call</strong>(self[, args…])</strong></td>
<td>允许一个类的实例像函数一样被调用：x(a, b) 调用 x.<strong>call</strong>(a, b)</td>
</tr>
<tr>
<td><strong><strong>len</strong>(self)</strong></td>
<td>定义当被 len() 调用时的行为</td>
</tr>
<tr>
<td><strong><strong>repr</strong>(self)</strong></td>
<td>定义当被 repr() 调用时的行为</td>
</tr>
<tr>
<td><strong><strong>str</strong>(self)</strong></td>
<td>定义当被 str() 调用时的行为</td>
</tr>
<tr>
<td><strong><strong>bytes</strong>(self)</strong></td>
<td>定义当被 bytes() 调用时的行为</td>
</tr>
<tr>
<td><strong><strong>hash</strong>(self)</strong></td>
<td>定义当被 hash() 调用时的行为</td>
</tr>
<tr>
<td><strong><strong>bool</strong>(self)</strong></td>
<td>定义当被 bool() 调用时的行为，应该返回 True 或 False</td>
</tr>
<tr>
<td><strong><strong>format</strong>(self, format_spec)</strong></td>
<td>定义当被 format() 调用时的行为</td>
</tr>
<tr>
<td><strong>有关属性</strong></td>
<td></td>
</tr>
<tr>
<td><strong><strong>getattr</strong>(self, name)</strong></td>
<td>定义当用户试图获取一个不存在的属性时的行为</td>
</tr>
<tr>
<td><strong><strong>getattribute</strong>(self, name)</strong></td>
<td>定义当该类的属性被访问时的行为</td>
</tr>
<tr>
<td><strong><strong>setattr</strong>(self, name, value)</strong></td>
<td>定义当一个属性被设置时的行为</td>
</tr>
<tr>
<td><strong><strong>delattr</strong>(self, name)</strong></td>
<td>定义当一个属性被删除时的行为</td>
</tr>
<tr>
<td><strong><strong>dir</strong>(self)</strong></td>
<td>定义当 dir() 被调用时的行为</td>
</tr>
<tr>
<td><strong><strong>get</strong>(self, instance, owner)</strong></td>
<td>定义当描述符的值被取得时的行为</td>
</tr>
<tr>
<td><strong><strong>set</strong>(self, instance, value)</strong></td>
<td>定义当描述符的值被改变时的行为</td>
</tr>
<tr>
<td><strong><strong>delete</strong>(self, instance)</strong></td>
<td>定义当描述符的值被删除时的行为</td>
</tr>
<tr>
<td><strong>比较操作符</strong></td>
<td></td>
</tr>
<tr>
<td><strong><strong>lt</strong>(self, other)</strong></td>
<td>定义小于号的行为：x &lt; y 调用 x.<strong>lt</strong>(y)</td>
</tr>
<tr>
<td><strong><strong>le</strong>(self, other)</strong></td>
<td>定义小于等于号的行为：x &lt;= y 调用 x.<strong>le</strong>(y)</td>
</tr>
<tr>
<td><strong><strong>eq</strong>(self, other)</strong></td>
<td>定义等于号的行为：x == y 调用 x.<strong>eq</strong>(y)</td>
</tr>
<tr>
<td><strong><strong>ne</strong>(self, other)</strong></td>
<td>定义不等号的行为：x != y 调用 x.<strong>ne</strong>(y)</td>
</tr>
<tr>
<td><strong><strong>gt</strong>(self, other)</strong></td>
<td>定义大于号的行为：x &gt; y 调用 x.<strong>gt</strong>(y)</td>
</tr>
<tr>
<td><strong><strong>ge</strong>(self, other)</strong></td>
<td>定义大于等于号的行为：x &gt;= y 调用 x.<strong>ge</strong>(y)</td>
</tr>
<tr>
<td><strong>算数运算符</strong></td>
<td></td>
</tr>
<tr>
<td><strong><strong>add</strong>(self, other)</strong></td>
<td>定义加法的行为：+</td>
</tr>
<tr>
<td><strong><strong>sub</strong>(self, other)</strong></td>
<td>定义减法的行为：-</td>
</tr>
<tr>
<td><strong><strong>mul</strong>(self, other)</strong></td>
<td>定义乘法的行为：*</td>
</tr>
<tr>
<td><strong><strong>truediv</strong>(self, other)</strong></td>
<td>定义真除法的行为：/</td>
</tr>
<tr>
<td><strong><strong>floordiv</strong>(self, other)</strong></td>
<td>定义整数除法的行为：//</td>
</tr>
<tr>
<td><strong><strong>mod</strong>(self, other)</strong></td>
<td>定义取模算法的行为：%</td>
</tr>
<tr>
<td><strong><strong>divmod</strong>(self, other)</strong></td>
<td>定义当被 divmod() 调用时的行为</td>
</tr>
<tr>
<td><strong><strong>pow</strong>(self, other[, modulo])</strong></td>
<td>定义当被 power() 调用或 ** 运算时的行为</td>
</tr>
<tr>
<td><strong><strong>lshift</strong>(self, other)</strong></td>
<td>定义按位左移位的行为：&lt;&lt;</td>
</tr>
<tr>
<td><strong><strong>rshift</strong>(self, other)</strong></td>
<td>定义按位右移位的行为：&gt;&gt;</td>
</tr>
<tr>
<td><strong><strong>and</strong>(self, other)</strong></td>
<td>定义按位与操作的行为：&amp;</td>
</tr>
<tr>
<td><strong><strong>xor</strong>(self, other)</strong></td>
<td>定义按位异或操作的行为：^</td>
</tr>
<tr>
<td><strong><strong>or</strong>(self, other)</strong></td>
<td>定义按位或操作的行为：|</td>
</tr>
<tr>
<td><strong>反运算</strong></td>
<td></td>
</tr>
<tr>
<td><strong><strong>radd</strong>(self, other)</strong></td>
<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>
</tr>
<tr>
<td><strong><strong>rsub</strong>(self, other)</strong></td>
<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>
</tr>
<tr>
<td><strong><strong>rmul</strong>(self, other)</strong></td>
<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>
</tr>
<tr>
<td><strong><strong>rtruediv</strong>(self, other)</strong></td>
<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>
</tr>
<tr>
<td><strong><strong>rfloordiv</strong>(self, other)</strong></td>
<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>
</tr>
<tr>
<td><strong><strong>rmod</strong>(self, other)</strong></td>
<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>
</tr>
<tr>
<td><strong><strong>rdivmod</strong>(self, other)</strong></td>
<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>
</tr>
<tr>
<td><strong><strong>rpow</strong>(self, other)</strong></td>
<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>
</tr>
<tr>
<td><strong><strong>rlshift</strong>(self, other)</strong></td>
<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>
</tr>
<tr>
<td><strong><strong>rrshift</strong>(self, other)</strong></td>
<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>
</tr>
<tr>
<td><strong><strong>rand</strong>(self, other)</strong></td>
<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>
</tr>
<tr>
<td><strong><strong>rxor</strong>(self, other)</strong></td>
<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>
</tr>
<tr>
<td><strong><strong>ror</strong>(self, other)</strong></td>
<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>
</tr>
<tr>
<td><strong>增量赋值运算</strong></td>
<td></td>
</tr>
<tr>
<td><strong><strong>iadd</strong>(self, other)</strong></td>
<td>定义赋值加法的行为：+=</td>
</tr>
<tr>
<td><strong><strong>isub</strong>(self, other)</strong></td>
<td>定义赋值减法的行为：-=</td>
</tr>
<tr>
<td><strong><strong>imul</strong>(self, other)</strong></td>
<td>定义赋值乘法的行为：*=</td>
</tr>
<tr>
<td><strong><strong>itruediv</strong>(self, other)</strong></td>
<td>定义赋值真除法的行为：/=</td>
</tr>
<tr>
<td><strong><strong>ifloordiv</strong>(self, other)</strong></td>
<td>定义赋值整数除法的行为：//=</td>
</tr>
<tr>
<td><strong><strong>imod</strong>(self, other)</strong></td>
<td>定义赋值取模算法的行为：%=</td>
</tr>
<tr>
<td><strong><strong>ipow</strong>(self, other[, modulo])</strong></td>
<td>定义赋值幂运算的行为：**=</td>
</tr>
<tr>
<td><strong><strong>ilshift</strong>(self, other)</strong></td>
<td>定义赋值按位左移位的行为：&lt;&lt;=</td>
</tr>
<tr>
<td><strong><strong>irshift</strong>(self, other)</strong></td>
<td>定义赋值按位右移位的行为：&gt;&gt;=</td>
</tr>
<tr>
<td><strong><strong>iand</strong>(self, other)</strong></td>
<td>定义赋值按位与操作的行为：&amp;=</td>
</tr>
<tr>
<td><strong><strong>ixor</strong>(self, other)</strong></td>
<td>定义赋值按位异或操作的行为：^=</td>
</tr>
<tr>
<td><strong><strong>ior</strong>(self, other)</strong></td>
<td>定义赋值按位或操作的行为：|=</td>
</tr>
<tr>
<td><strong>一元操作符</strong></td>
<td></td>
</tr>
<tr>
<td><strong><strong>pos</strong>(self)</strong></td>
<td>定义正号的行为：+x</td>
</tr>
<tr>
<td><strong><strong>neg</strong>(self)</strong></td>
<td>定义负号的行为：-x</td>
</tr>
<tr>
<td><strong><strong>abs</strong>(self)</strong></td>
<td>定义当被 abs() 调用时的行为</td>
</tr>
<tr>
<td><strong><strong>invert</strong>(self)</strong></td>
<td>定义按位求反的行为：~x</td>
</tr>
<tr>
<td><strong>类型转换</strong></td>
<td></td>
</tr>
<tr>
<td><strong><strong>complex</strong>(self)</strong></td>
<td>定义当被 complex() 调用时的行为（需要返回恰当的值）</td>
</tr>
<tr>
<td><strong><strong>int</strong>(self)</strong></td>
<td>定义当被 int() 调用时的行为（需要返回恰当的值）</td>
</tr>
<tr>
<td><strong><strong>float</strong>(self)</strong></td>
<td>定义当被 float() 调用时的行为（需要返回恰当的值）</td>
</tr>
<tr>
<td><strong><strong>round</strong>(self[, n])</strong></td>
<td>定义当被 round() 调用时的行为（需要返回恰当的值）</td>
</tr>
<tr>
<td><strong><strong>index</strong>(self)</strong></td>
<td>1. 当对象是被应用在切片表达式中时，实现整形强制转换 2. 如果你定义了一个可能在切片时用到的定制的数值型,你应该定义 <strong>index</strong> 3. 如果 <strong>index</strong> 被定义，则 <strong>int</strong> 也需要被定义，且返回相同的值</td>
</tr>
<tr>
<td></td>
<td>上下文管理（with 语句）</td>
</tr>
<tr>
<td><strong><strong>enter</strong>(self)</strong></td>
<td>1. 定义当使用 with 语句时的初始化行为 2. <strong>enter</strong> 的返回值被 with 语句的目标或者 as 后的名字绑定</td>
</tr>
<tr>
<td><strong><strong>exit</strong>(self, exc_type, exc_value, traceback)</strong></td>
<td>1. 定义当一个代码块被执行或者终止后上下文管理器应该做什么 2. 一般被用来处理异常，清除工作或者做一些代码块执行完毕之后的日常工作</td>
</tr>
<tr>
<td><strong>容器类型</strong></td>
<td></td>
</tr>
<tr>
<td><strong><strong>len</strong>(self)</strong></td>
<td>定义当被 len() 调用时的行为（返回容器中元素的个数）</td>
</tr>
<tr>
<td><strong><strong>getitem</strong>(self, key)</strong></td>
<td>定义获取容器中指定元素的行为，相当于 self[key]</td>
</tr>
<tr>
<td><strong><strong>setitem</strong>(self, key, value)</strong></td>
<td>定义设置容器中指定元素的行为，相当于 self[key] = value</td>
</tr>
<tr>
<td><strong><strong>delitem</strong>(self, key)</strong></td>
<td>定义删除容器中指定元素的行为，相当于 del self[key]</td>
</tr>
<tr>
<td><strong><strong>iter</strong>(self)</strong></td>
<td>定义当迭代容器中的元素的行为</td>
</tr>
<tr>
<td><strong><strong>reversed</strong>(self)</strong></td>
<td>定义当被 reversed() 调用时的行为</td>
</tr>
<tr>
<td><strong><strong>contains</strong>(self, item)</strong></td>
<td>定义当使用成员测试运算符（in 或 not in）时的行为</td>
</tr>
</tbody></table>
<p>参考文章：<a href="https://www.cnblogs.com/nmb-musen/p/10861536.html">《python魔术方法大全》</a></p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>魔术方法</tag>
      </tags>
  </entry>
</search>
